define(['dart_sdk', 'packages/basic_utils/src/X509Utils.dart', 'packages/basic_utils/src/model/RRecordType.dart', 'packages/logging/src/logger.dart', 'packages/mongo_dart/src/database/operation/operation_base.dart', 'packages/bson/src/types/decimal_128.dart', 'packages/mongo_dart/src/database/message/additional/payload.dart', 'packages/pool/pool.dart', 'packages/crypto/src/sha1.dart', 'packages/crypto/src/hmac.dart', 'packages/crypto/src/md5.dart', 'packages/collection/src/equality.dart', 'packages/mongo_dart_query/mongo_dart_query.dart', 'packages/mongo_dart/src/database/info/server_status.dart'], (function load__packages__mongo_dart__src__database__utils__split_hosts_dart(dart_sdk, packages__basic_utils__src__X509Utils$46dart, packages__basic_utils__src__model__RRecordType$46dart, packages__logging__src__logger$46dart, packages__mongo_dart__src__database__operation__operation_base$46dart, packages__bson__src__types__decimal_128$46dart, packages__mongo_dart__src__database__message__additional__payload$46dart, packages__pool__pool$46dart, packages__crypto__src__sha1$46dart, packages__crypto__src__hmac$46dart, packages__crypto__src__md5$46dart, packages__collection__src__equality$46dart, packages__mongo_dart_query__mongo_dart_query$46dart, packages__mongo_dart__src__database__info__server_status$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const _native_typed_data = dart_sdk._native_typed_data;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const DnsUtils = packages__basic_utils__src__X509Utils$46dart.src__DnsUtils;
  const RRecordType = packages__basic_utils__src__model__RRecordType$46dart.src__model__RRecordType;
  const logger = packages__logging__src__logger$46dart.src__logger;
  const operation_base = packages__mongo_dart__src__database__operation__operation_base$46dart.src__database__operation__operation_base;
  const bson = packages__bson__src__types__decimal_128$46dart.bson;
  const payload = packages__mongo_dart__src__database__message__additional__payload$46dart.src__database__message__additional__payload;
  const pool = packages__pool__pool$46dart.pool;
  const sha1$ = packages__crypto__src__sha1$46dart.src__sha1;
  const hmac$ = packages__crypto__src__hmac$46dart.src__hmac;
  const md5 = packages__crypto__src__md5$46dart.src__md5;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const mongo_dart_query = packages__mongo_dart_query__mongo_dart_query$46dart.mongo_dart_query;
  const server_status = packages__mongo_dart__src__database__info__server_status$46dart.src__database__info__server_status;
  var split_hosts = Object.create(dart.library);
  var check_same_domain = Object.create(dart.library);
  var dns_lookup = Object.create(dart.library);
  var db_admin_command_operation = Object.create(dart.library);
  var server_status_operation = Object.create(dart.library);
  var insert_one_options = Object.create(dart.library);
  var insert_one_operation = Object.create(dart.library);
  var create_index_options = Object.create(dart.library);
  var command_operation = Object.create(dart.library);
  var create_index_operation = Object.create(dart.library);
  var read_preference = Object.create(dart.library);
  var mongo_response_message = Object.create(dart.library);
  var mongo_modern_message = Object.create(dart.library);
  var section = Object.create(dart.library);
  var mongo_dart = Object.create(dart.library);
  var $startsWith = dartx.startsWith;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  var $trim = dartx.trim;
  var $split = dartx.split;
  var $add = dartx.add;
  var $length = dartx.length;
  var $last = dartx.last;
  var $_get = dartx._get;
  var $contains = dartx.contains;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $replaceAll = dartx.replaceAll;
  var $entries = dartx.entries;
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $keys = dartx.keys;
  var $endsWith = dartx.endsWith;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $join = dartx.join;
  var $toString = dartx.toString;
  var $runtimeType = dartx.runtimeType;
  var $replaceFirst = dartx.replaceFirst;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $toList = dartx.toList;
  var $sublist = dartx.sublist;
  var $lengthInBytes = dartx.lengthInBytes;
  var $values = dartx.values;
  var $map = dartx.map;
  var $codeUnits = dartx.codeUnits;
  var $elementAt = dartx.elementAt;
  var $addAll = dartx.addAll;
  var $forEach = dartx.forEach;
  var $firstWhere = dartx.firstWhere;
  var $any = dartx.any;
  var $toInt = dartx.toInt;
  var $toDouble = dartx.toDouble;
  var $ceil = dartx.ceil;
  var $clear = dartx.clear;
  var $setRange = dartx.setRange;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    ListLOfStringL: () => (T.ListLOfStringL = dart.constFn(dart.legacy(T.ListOfStringL())))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    IdentityMapOfStringL$ObjectL: () => (T.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ObjectL())))(),
    MapOfStringL$ObjectL: () => (T.MapOfStringL$ObjectL = dart.constFn(core.Map$(T.StringL(), T.ObjectL())))(),
    MapLOfStringL$ObjectL: () => (T.MapLOfStringL$ObjectL = dart.constFn(dart.legacy(T.MapOfStringL$ObjectL())))(),
    ObjectIdL: () => (T.ObjectIdL = dart.constFn(dart.legacy(bson.ObjectId)))(),
    JSArrayOfMapLOfStringL$ObjectL: () => (T.JSArrayOfMapLOfStringL$ObjectL = dart.constFn(_interceptors.JSArray$(T.MapLOfStringL$ObjectL())))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    IterableL: () => (T.IterableL = dart.constFn(dart.legacy(core.Iterable)))(),
    ReadPreferenceModeL: () => (T.ReadPreferenceModeL = dart.constFn(dart.legacy(read_preference.ReadPreferenceMode)))(),
    ReadPreferenceL: () => (T.ReadPreferenceL = dart.constFn(dart.legacy(read_preference.ReadPreference)))(),
    DbCollectionL: () => (T.DbCollectionL = dart.constFn(dart.legacy(mongo_dart.DbCollection)))(),
    DbL: () => (T.DbL = dart.constFn(dart.legacy(mongo_dart.Db)))(),
    SectionL: () => (T.SectionL = dart.constFn(dart.legacy(section.Section)))(),
    JSArrayOfSectionL: () => (T.JSArrayOfSectionL = dart.constFn(_interceptors.JSArray$(T.SectionL())))(),
    ListOfMapLOfStringL$ObjectL: () => (T.ListOfMapLOfStringL$ObjectL = dart.constFn(core.List$(T.MapLOfStringL$ObjectL())))(),
    ListLOfMapLOfStringL$ObjectL: () => (T.ListLOfMapLOfStringL$ObjectL = dart.constFn(dart.legacy(T.ListOfMapLOfStringL$ObjectL())))(),
    JSArrayOfDbL: () => (T.JSArrayOfDbL = dart.constFn(_interceptors.JSArray$(T.DbL())))(),
    FutureOfDbL: () => (T.FutureOfDbL = dart.constFn(async.Future$(T.DbL())))(),
    FutureLOfDbL: () => (T.FutureLOfDbL = dart.constFn(dart.legacy(T.FutureOfDbL())))(),
    VoidToFutureLOfDbL: () => (T.VoidToFutureLOfDbL = dart.constFn(dart.fnType(T.FutureLOfDbL(), [])))(),
    FutureL: () => (T.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    DbLToFutureL: () => (T.DbLToFutureL = dart.constFn(dart.fnType(T.FutureL(), [T.DbL()])))(),
    ListLToFutureL: () => (T.ListLToFutureL = dart.constFn(dart.fnType(T.FutureL(), [T.ListL()])))(),
    AuthenticationSchemeL: () => (T.AuthenticationSchemeL = dart.constFn(dart.legacy(mongo_dart.AuthenticationScheme)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    ListLOfintLToUint8ListL: () => (T.ListLOfintLToUint8ListL = dart.constFn(dart.fnType(T.Uint8ListL(), [T.ListLOfintL()])))(),
    DefaultEqualityOfNeverL: () => (T.DefaultEqualityOfNeverL = dart.constFn(equality.DefaultEquality$(dart.legacy(dart.Never))))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    FutureOfMapLOfStringL$dynamic: () => (T.FutureOfMapLOfStringL$dynamic = dart.constFn(async.Future$(T.MapLOfStringL$dynamic())))(),
    FutureLOfMapLOfStringL$dynamic: () => (T.FutureLOfMapLOfStringL$dynamic = dart.constFn(dart.legacy(T.FutureOfMapLOfStringL$dynamic())))(),
    MapLOfStringL$dynamicToFutureLOfMapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamicToFutureLOfMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.FutureLOfMapLOfStringL$dynamic(), [T.MapLOfStringL$dynamic()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    MapLOfStringL$dynamicToboolL: () => (T.MapLOfStringL$dynamicToboolL = dart.constFn(dart.fnType(T.boolL(), [T.MapLOfStringL$dynamic()])))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    SelectorBuilderL: () => (T.SelectorBuilderL = dart.constFn(dart.legacy(mongo_dart_query.SelectorBuilder)))(),
    ListQueueOfMapLOfStringL$dynamic: () => (T.ListQueueOfMapLOfStringL$dynamic = dart.constFn(collection.ListQueue$(T.MapLOfStringL$dynamic())))(),
    MongoReplyMessageL: () => (T.MongoReplyMessageL = dart.constFn(dart.legacy(mongo_dart.MongoReplyMessage)))(),
    MongoReplyMessageLToFutureLOfMapLOfStringL$dynamic: () => (T.MongoReplyMessageLToFutureLOfMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.FutureLOfMapLOfStringL$dynamic(), [T.MongoReplyMessageL()])))(),
    CompleterOfMapLOfStringL$dynamic: () => (T.CompleterOfMapLOfStringL$dynamic = dart.constFn(async.Completer$(T.MapLOfStringL$dynamic())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    _AsyncStarImplOfMapLOfStringL$dynamic: () => (T._AsyncStarImplOfMapLOfStringL$dynamic = dart.constFn(async._AsyncStarImpl$(T.MapLOfStringL$dynamic())))(),
    ListOfMapLOfStringL$dynamic: () => (T.ListOfMapLOfStringL$dynamic = dart.constFn(core.List$(T.MapLOfStringL$dynamic())))(),
    StringLAndStringLToNull: () => (T.StringLAndStringLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), T.StringL()])))(),
    FutureOfMongoReplyMessageL: () => (T.FutureOfMongoReplyMessageL = dart.constFn(async.Future$(T.MongoReplyMessageL())))(),
    FutureLOfMongoReplyMessageL: () => (T.FutureLOfMongoReplyMessageL = dart.constFn(dart.legacy(T.FutureOfMongoReplyMessageL())))(),
    VoidToFutureLOfMongoReplyMessageL: () => (T.VoidToFutureLOfMongoReplyMessageL = dart.constFn(dart.fnType(T.FutureLOfMongoReplyMessageL(), [])))(),
    SectionLToboolL: () => (T.SectionLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.SectionL()])))(),
    VoidToFutureLOfMapLOfStringL$dynamic: () => (T.VoidToFutureLOfMapLOfStringL$dynamic = dart.constFn(dart.fnType(T.FutureLOfMapLOfStringL$dynamic(), [])))(),
    VoidToStringL: () => (T.VoidToStringL = dart.constFn(dart.fnType(T.StringL(), [])))(),
    MapLOfStringL$dynamicToListLOfStringL: () => (T.MapLOfStringL$dynamicToListLOfStringL = dart.constFn(dart.fnType(T.ListLOfStringL(), [T.MapLOfStringL$dynamic()])))(),
    ListLOfStringLToboolL: () => (T.ListLOfStringLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ListLOfStringL()])))(),
    ListLOfStringLToStringL: () => (T.ListLOfStringLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.ListLOfStringL()])))(),
    MapLOfStringL$dynamicToStringL: () => (T.MapLOfStringL$dynamicToStringL = dart.constFn(dart.fnType(T.StringL(), [T.MapLOfStringL$dynamic()])))(),
    StringLAnddynamicToNull: () => (T.StringLAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), dart.dynamic])))(),
    JSArrayOfMapLOfStringL$dynamic: () => (T.JSArrayOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(T.MapLOfStringL$dynamic())))(),
    FutureOfintL: () => (T.FutureOfintL = dart.constFn(async.Future$(T.intL())))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))(),
    FutureLOfintL: () => (T.FutureLOfintL = dart.constFn(dart.legacy(T.FutureOfintL())))(),
    MapLOfStringL$dynamicToFutureLOfintL: () => (T.MapLOfStringL$dynamicToFutureLOfintL = dart.constFn(dart.fnType(T.FutureLOfintL(), [T.MapLOfStringL$dynamic()])))(),
    FutureOfMapLOfStringL$ObjectL: () => (T.FutureOfMapLOfStringL$ObjectL = dart.constFn(async.Future$(T.MapLOfStringL$ObjectL())))(),
    FutureLOfMapLOfStringL$ObjectL: () => (T.FutureLOfMapLOfStringL$ObjectL = dart.constFn(dart.legacy(T.FutureOfMapLOfStringL$ObjectL())))(),
    VoidToFutureLOfMapLOfStringL$ObjectL: () => (T.VoidToFutureLOfMapLOfStringL$ObjectL = dart.constFn(dart.fnType(T.FutureLOfMapLOfStringL$ObjectL(), [])))(),
    ModifierBuilderL: () => (T.ModifierBuilderL = dart.constFn(dart.legacy(mongo_dart_query.ModifierBuilder)))(),
    BsonMapL: () => (T.BsonMapL = dart.constFn(dart.legacy(bson.BsonMap)))(),
    JSArrayOfBsonMapL: () => (T.JSArrayOfBsonMapL = dart.constFn(_interceptors.JSArray$(T.BsonMapL())))(),
    CompleterOfboolL: () => (T.CompleterOfboolL = dart.constFn(async.Completer$(T.boolL())))(),
    MapLOfStringL$dynamicToNull: () => (T.MapLOfStringL$dynamicToNull = dart.constFn(dart.fnType(core.Null, [T.MapLOfStringL$dynamic()])))(),
    StringLAndObjectLToNull: () => (T.StringLAndObjectLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), T.ObjectL()])))(),
    LinkedHashMapOfStringL$ObjectL: () => (T.LinkedHashMapOfStringL$ObjectL = dart.constFn(collection.LinkedHashMap$(T.StringL(), T.ObjectL())))(),
    DateTimeL: () => (T.DateTimeL = dart.constFn(dart.legacy(core.DateTime)))(),
    JSArrayOfFutureL: () => (T.JSArrayOfFutureL = dart.constFn(_interceptors.JSArray$(T.FutureL())))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    ListLOfintLToNull: () => (T.ListLOfintLToNull = dart.constFn(dart.fnType(core.Null, [T.ListLOfintL()])))(),
    intLToNull: () => (T.intLToNull = dart.constFn(dart.fnType(core.Null, [T.intL()])))(),
    CompleterOfintL: () => (T.CompleterOfintL = dart.constFn(async.Completer$(T.intL())))(),
    BsonBinaryL: () => (T.BsonBinaryL = dart.constFn(dart.legacy(bson.BsonBinary)))(),
    MapLOfStringL$dynamicTovoid: () => (T.MapLOfStringL$dynamicTovoid = dart.constFn(dart.fnType(dart.void, [T.MapLOfStringL$dynamic()])))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    GridOutL: () => (T.GridOutL = dart.constFn(dart.legacy(mongo_dart.GridOut)))(),
    CompleterOfGridOutL: () => (T.CompleterOfGridOutL = dart.constFn(async.Completer$(T.GridOutL())))(),
    _StreamHandlerTransformerOfListLOfintL$ListLOfintL: () => (T._StreamHandlerTransformerOfListLOfintL$ListLOfintL = dart.constFn(async._StreamHandlerTransformer$(T.ListLOfintL(), T.ListLOfintL())))(),
    LinkedHashSetOfintL: () => (T.LinkedHashSetOfintL = dart.constFn(collection.LinkedHashSet$(T.intL())))(),
    MongoResponseMessageL: () => (T.MongoResponseMessageL = dart.constFn(dart.legacy(mongo_response_message.MongoResponseMessage)))(),
    FutureLOfNull: () => (T.FutureLOfNull = dart.constFn(dart.legacy(T.FutureOfNull())))(),
    dynamicAnddynamicToFutureLOfNull: () => (T.dynamicAnddynamicToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [dart.dynamic, dart.dynamic])))(),
    VoidToFutureLOfNull: () => (T.VoidToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [])))(),
    CompleterOfMongoReplyMessageL: () => (T.CompleterOfMongoReplyMessageL = dart.constFn(async.Completer$(T.MongoReplyMessageL())))(),
    MongoModernMessageL: () => (T.MongoModernMessageL = dart.constFn(dart.legacy(mongo_modern_message.MongoModernMessage)))(),
    CompleterOfMongoModernMessageL: () => (T.CompleterOfMongoModernMessageL = dart.constFn(async.Completer$(T.MongoModernMessageL())))(),
    CompleterOfMongoResponseMessageL: () => (T.CompleterOfMongoResponseMessageL = dart.constFn(async.Completer$(T.MongoResponseMessageL())))(),
    CompleterLOfMongoResponseMessageL: () => (T.CompleterLOfMongoResponseMessageL = dart.constFn(dart.legacy(T.CompleterOfMongoResponseMessageL())))(),
    FutureOfMongoModernMessageL: () => (T.FutureOfMongoModernMessageL = dart.constFn(async.Future$(T.MongoModernMessageL())))(),
    FutureLOfMongoModernMessageL: () => (T.FutureLOfMongoModernMessageL = dart.constFn(dart.legacy(T.FutureOfMongoModernMessageL())))(),
    _ConnectionL: () => (T._ConnectionL = dart.constFn(dart.legacy(mongo_dart._Connection)))(),
    IdentityMapOfStringL$_ConnectionL: () => (T.IdentityMapOfStringL$_ConnectionL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T._ConnectionL())))(),
    IdentityMapOfintL$CompleterLOfMongoResponseMessageL: () => (T.IdentityMapOfintL$CompleterLOfMongoResponseMessageL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.CompleterLOfMongoResponseMessageL())))(),
    MongoMessageL: () => (T.MongoMessageL = dart.constFn(dart.legacy(mongo_dart.MongoMessage)))(),
    ListQueueOfMongoMessageL: () => (T.ListQueueOfMongoMessageL = dart.constFn(collection.ListQueue$(T.MongoMessageL())))(),
    _StreamHandlerTransformerOfUint8ListL$MongoResponseMessageL: () => (T._StreamHandlerTransformerOfUint8ListL$MongoResponseMessageL = dart.constFn(async._StreamHandlerTransformer$(T.Uint8ListL(), T.MongoResponseMessageL())))(),
    ListQueueOfListLOfintL: () => (T.ListQueueOfListLOfintL = dart.constFn(collection.ListQueue$(T.ListLOfintL())))(),
    intLAndListLOfintLTointL: () => (T.intLAndListLOfintLTointL = dart.constFn(dart.fnType(T.intL(), [T.intL(), T.ListLOfintL()])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constSet(T.StringL(), ["name", "key", "writeConcern", "w", "wtimeout", "j", "fsync", "readPreference", "session"]);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: read_preference.ReadPreferenceMode.prototype,
        [_name$]: "ReadPreferenceMode.primary",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: read_preference.ReadPreferenceMode.prototype,
        [_name$]: "ReadPreferenceMode.primaryPreferred",
        index: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: read_preference.ReadPreferenceMode.prototype,
        [_name$]: "ReadPreferenceMode.secondary",
        index: 2
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: read_preference.ReadPreferenceMode.prototype,
        [_name$]: "ReadPreferenceMode.secondaryPreferred",
        index: 3
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: read_preference.ReadPreferenceMode.prototype,
        [_name$]: "ReadPreferenceMode.nearest",
        index: 4
      });
    },
    get C6() {
      return C[6] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], T.ReadPreferenceModeL());
    },
    get C7() {
      return C[7] = dart.constList([C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], T.ReadPreferenceModeL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: mongo_dart.AuthenticationScheme.prototype,
        [_name$0]: "AuthenticationScheme.MONGODB_CR",
        index: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: mongo_dart.AuthenticationScheme.prototype,
        [_name$0]: "AuthenticationScheme.SCRAM_SHA_1",
        index: 1
      });
    },
    get C10() {
      return C[10] = dart.constList([C[8] || CT.C8, C[9] || CT.C9], T.AuthenticationSchemeL());
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: T.DefaultEqualityOfNeverL().prototype
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: equality.IterableEquality.prototype,
        [IterableEquality__elementEquality]: C[12] || CT.C12
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: mongo_dart.WriteConcern.prototype,
        [j$]: false,
        [fsync$]: false,
        [wtimeout$]: 0,
        [w$]: -1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: mongo_dart.WriteConcern.prototype,
        [j$]: false,
        [fsync$]: false,
        [wtimeout$]: 0,
        [w$]: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: mongo_dart.WriteConcern.prototype,
        [j$]: false,
        [fsync$]: false,
        [wtimeout$]: 0,
        [w$]: 1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: mongo_dart.WriteConcern.prototype,
        [j$]: false,
        [fsync$]: false,
        [wtimeout$]: 0,
        [w$]: 2
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: mongo_dart.WriteConcern.prototype,
        [j$]: false,
        [fsync$]: true,
        [wtimeout$]: 0,
        [w$]: 1
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: mongo_dart.WriteConcern.prototype,
        [j$]: true,
        [fsync$]: false,
        [wtimeout$]: 0,
        [w$]: 1
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: mongo_dart.WriteConcern.prototype,
        [j$]: false,
        [fsync$]: false,
        [wtimeout$]: 0,
        [w$]: "majority"
      });
    },
    get C20() {
      return C[20] = dart.constMap(T.StringL(), dart.dynamic, []);
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: mongo_dart.State.prototype,
        [_value$]: "INIT"
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: mongo_dart.State.prototype,
        [_value$]: "OPENING"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: mongo_dart.State.prototype,
        [_value$]: "OPEN"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: mongo_dart.State.prototype,
        [_value$]: "CLOSING"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: mongo_dart.State.prototype,
        [_value$]: "CLOSED"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: mongo_dart.ConnectionException.prototype,
        [ConnectionException_message]: "Invalid state: Connection already closed."
      });
    }
  }, false);
  var C = Array(27).fill(void 0);
  var I = [
    "file:///C:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/mongo_dart-0.4.4/lib/src/database/utils/dns_lookup.dart",
    "package:mongo_dart/src/database/operation/db_admin_command_operation.dart",
    "package:mongo_dart/src/database/operation/server_status_operation.dart",
    "package:mongo_dart/src/database/operation/options/insert_one_options.dart",
    "package:mongo_dart/src/database/operation/command_operation.dart",
    "package:mongo_dart/src/database/operation/insert_one_operation.dart",
    "package:mongo_dart/src/database/operation/options/create_index_options.dart",
    "package:mongo_dart/src/database/operation/create_index_operation.dart",
    "package:mongo_dart/src/database/operation/parameters/read_preference.dart",
    "package:mongo_dart/mongo_dart.dart",
    "package:mongo_dart/src/database/message/mongo_response_message.dart",
    "package:mongo_dart/src/database/message/mongo_modern_message.dart",
    "package:mongo_dart/src/database/message/additional/section.dart"
  ];
  split_hosts.splitHosts = function splitHosts(uriString) {
    let prefix = null;
    let suffix = null;
    let startHostsIndex = null;
    let endServersIndex = null;
    if (uriString[$startsWith]("mongodb://")) {
      startHostsIndex = "mongodb://".length;
    } else {
      dart.throw(new mongo_dart.MongoDartError.new("Unexpected scheme in url \"" + dart.str(uriString) + "\". " + "The url is expected to start with \"mongodb://\""));
    }
    endServersIndex = uriString[$indexOf]("/", T.intL().as(startHostsIndex));
    if (dart.equals(endServersIndex, -1)) {
      endServersIndex = uriString.length;
      suffix = "";
    } else {
      suffix = uriString[$substring](T.intL().as(endServersIndex))[$trim]();
    }
    let hostsString = uriString[$substring](T.intL().as(startHostsIndex), T.intL().as(endServersIndex));
    let credentialsIndex = hostsString[$indexOf]("@");
    if (credentialsIndex !== -1) {
      startHostsIndex = dart.dsend(startHostsIndex, '+', [credentialsIndex + 1]);
      hostsString = uriString[$substring](T.intL().as(startHostsIndex), T.intL().as(endServersIndex));
    }
    prefix = uriString[$substring](0, T.intL().as(startHostsIndex))[$trim]();
    let parts = hostsString[$split](",");
    return (() => {
      let t0 = T.JSArrayOfStringL().of([]);
      for (let server of parts)
        t0[$add](dart.str(prefix) + server[$trim]() + dart.str(suffix));
      return t0;
    })();
  };
  check_same_domain.checkSameDomain = function checkSameDomain(uri, checkUri) {
    let uriParts = uri.host[$split](".");
    let checkParts = checkUri.host[$split](".");
    if (dart.notNull(uriParts[$length]) < 2) {
      dart.throw(new mongo_dart.MongoDartError.new("At list a domain is required, but got \"" + dart.str(uri.host) + "\""));
    }
    if (dart.notNull(checkParts[$length]) < 2) {
      dart.throw(new mongo_dart.MongoDartError.new("At list a domain is required, but got \"" + dart.str(checkUri.host) + "\""));
    }
    return uriParts[$last] == checkParts[$last] && uriParts[$_get](dart.notNull(uriParts[$length]) - 2) == checkParts[$_get](dart.notNull(checkParts[$length]) - 2);
  };
  dns_lookup.decodeDnsSeedlist = function decodeDnsSeedlist(dnsSeedlistUri) {
    return async.async(T.ListLOfStringL(), function* decodeDnsSeedlist() {
      let t1, t1$, t4;
      if (!(dnsSeedlistUri.scheme === "mongodb+srv")) dart.assertFailed("The method \"decodeDnsSeedlist\" requires an Uri with mongodb+srv schema", I[0], 11, 10, "dnsSeedlistUri.scheme == 'mongodb+srv'");
      if (dnsSeedlistUri.host[$contains](",")) {
        dart.throw(new mongo_dart.MongoDartError.new("mongodb+srv schema Uri requires only one host, " + "while more then one have been found in host section " + "(\"" + dart.str(dnsSeedlistUri.host) + "\")"));
      }
      let records = (yield DnsUtils.DnsUtils.lookupRecord(dnsSeedlistUri.host, RRecordType.RRecordType.TXT));
      if (records == null) {
        dart.throw(new mongo_dart.MongoDartError.new("It is impossible to contact the DNS server" + " or the host \"" + dart.str(dnsSeedlistUri.host) + "\" is not correct."));
      }
      if (dart.test(records[$isEmpty])) {
        dart.throw(new mongo_dart.MongoDartError.new("DNS data is not correct (missing TXT detail)"));
      }
      let additionalParms = records[$first].data[$replaceAll]("\"", "");
      records = (yield DnsUtils.DnsUtils.lookupRecord("_mongodb._tcp." + dart.str(dnsSeedlistUri.host), RRecordType.RRecordType.SRV));
      if (records == null) {
        dart.throw(new mongo_dart.MongoDartError.new("Impossible to contact the DNS server"));
      }
      if (dart.test(records[$isEmpty])) {
        dart.throw(new mongo_dart.MongoDartError.new("DNS data is not correct (missing SRV detail)"));
      }
      let user = dnsSeedlistUri.userInfo;
      let postPrefix = user == null || user[$isEmpty] ? "" : dart.str(user) + "@";
      let prefix = "mongodb://" + postPrefix;
      let requestedParameters = (t1 = dnsSeedlistUri.queryParameters, t1 == null ? new (T.IdentityMapOfStringL$StringL()).new() : t1);
      let dnsServerParameters = (t1$ = core.Uri.parse("mongodb://db.example.com/?" + additionalParms).queryParameters, t1$ == null ? new (T.IdentityMapOfStringL$StringL()).new() : t1$);
      let actualParameters = (() => {
        let t1 = new (T.IdentityMapOfStringL$StringL()).new();
        for (let t2 of dnsServerParameters[$entries])
          t1[$_set](t2.key, t2.value);
        for (let t3 of requestedParameters[$entries])
          t1[$_set](t3.key, t3.value);
        return t1;
      })();
      let tlsString = (t4 = actualParameters[$_get]("tls"), t4 == null ? actualParameters[$_get]("ssl") : t4);
      if (tlsString == null) {
        actualParameters[$_set]("ssl", "true");
      }
      let suffix = new core.StringBuffer.new(dnsSeedlistUri.path);
      if (dart.test(actualParameters[$isNotEmpty])) {
        let isFirst = true;
        for (let key of actualParameters[$keys]) {
          if (isFirst) {
            suffix.write("?");
            isFirst = false;
          } else {
            suffix.write("&");
          }
          suffix.write(dart.str(key) + "=" + dart.str(actualParameters[$_get](key)));
        }
      }
      let addresses = T.JSArrayOfStringL().of([]);
      for (let record of records) {
        let parts = record.data[$split](" ");
        let host = null;
        if (parts[$last][$endsWith](".")) {
          host = parts[$last][$substring](0, parts[$last].length - 1);
        } else {
          host = parts[$last];
        }
        addresses[$add](dart.str(host) + ":" + dart.str(parts[$_get](dart.notNull(parts[$length]) - 2)));
      }
      let ret = (() => {
        let t4 = T.JSArrayOfStringL().of([]);
        for (let address of addresses)
          t4[$add](prefix + dart.str(address) + dart.str(suffix));
        return t4;
      })();
      for (let address of ret) {
        let actualUri = core.Uri.parse(address);
        if (!dart.test(check_same_domain.checkSameDomain(actualUri, dnsSeedlistUri))) {
          let dnsParts = dnsSeedlistUri.host[$split](".");
          let dnsDomain = dart.str(dnsParts[$_get](dart.notNull(dnsParts[$length]) - 2)) + "." + dart.str(dnsParts[$last]);
          let actualParts = actualUri.host[$split](".");
          let actualDomain = dart.str(actualParts[$_get](dart.notNull(actualParts[$length]) - 2)) + "." + dart.str(actualParts[$last]);
          dart.throw(new mongo_dart.MongoDartError.new("Different domain detected in DNS SRV record: " + "required \"" + dnsDomain + "\", detected \"" + actualDomain + "\""));
        }
        dns_lookup._log.info("Dns host detected: " + dart.str(address));
      }
      return ret;
    });
  };
  dart.defineLazy(dns_lookup, {
    /*dns_lookup._log*/get _log() {
      return logger.Logger.new("dns_llokup");
    },
    set _log(_) {}
  }, true);
  var db$ = dart.privateName(db_admin_command_operation, "DbAdminCommandOperation.db");
  var command$ = dart.privateName(db_admin_command_operation, "DbAdminCommandOperation.command");
  var namespace = dart.privateName(db_admin_command_operation, "DbAdminCommandOperation.namespace");
  db_admin_command_operation.DbAdminCommandOperation = class DbAdminCommandOperation extends operation_base.OperationBase {
    get db() {
      return this[db$];
    }
    set db(value) {
      this[db$] = value;
    }
    get command() {
      return this[command$];
    }
    set command(value) {
      this[command$] = value;
    }
    get namespace() {
      return this[namespace];
    }
    set namespace(value) {
      this[namespace] = value;
    }
    $buildCommand() {
      return this.command;
    }
    execute() {
      return async.async(T.MapLOfStringL$ObjectL(), (function* execute() {
        let db = this.db;
        let command = this.$buildCommand();
        command[$_set]("$db", "admin");
        let modernMessage = new mongo_modern_message.MongoModernMessage.new(command);
        return db.executeModernMessage(modernMessage);
      }).bind(this));
    }
  };
  (db_admin_command_operation.DbAdminCommandOperation.new = function(db, command, opts) {
    let t5;
    let options = opts && 'options' in opts ? opts.options : null;
    this[namespace] = null;
    this[db$] = db;
    this[command$] = command;
    db_admin_command_operation.DbAdminCommandOperation.__proto__.new.call(this, (t5 = options, t5 == null ? new (T.IdentityMapOfStringL$ObjectL()).new() : t5));
    ;
  }).prototype = db_admin_command_operation.DbAdminCommandOperation.prototype;
  dart.addTypeTests(db_admin_command_operation.DbAdminCommandOperation);
  dart.addTypeCaches(db_admin_command_operation.DbAdminCommandOperation);
  dart.setMethodSignature(db_admin_command_operation.DbAdminCommandOperation, () => ({
    __proto__: dart.getMethods(db_admin_command_operation.DbAdminCommandOperation.__proto__),
    $buildCommand: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))), [])
  }));
  dart.setLibraryUri(db_admin_command_operation.DbAdminCommandOperation, I[1]);
  dart.setFieldSignature(db_admin_command_operation.DbAdminCommandOperation, () => ({
    __proto__: dart.getFields(db_admin_command_operation.DbAdminCommandOperation.__proto__),
    db: dart.fieldType(dart.legacy(mongo_dart.Db)),
    command: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))),
    namespace: dart.fieldType(dart.legacy(core.String))
  }));
  server_status_operation.ServerStatusOperation = class ServerStatusOperation extends db_admin_command_operation.DbAdminCommandOperation {};
  (server_status_operation.ServerStatusOperation.new = function(db, opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    server_status_operation.ServerStatusOperation.__proto__.new.call(this, db, new (T.IdentityMapOfStringL$ObjectL()).from(["serverStatus", 1]), {options: options});
    ;
  }).prototype = server_status_operation.ServerStatusOperation.prototype;
  dart.addTypeTests(server_status_operation.ServerStatusOperation);
  dart.addTypeCaches(server_status_operation.ServerStatusOperation);
  dart.setLibraryUri(server_status_operation.ServerStatusOperation, I[2]);
  var collection$ = dart.privateName(insert_one_options, "InsertOneOptions.collection");
  var writeConcern$ = dart.privateName(insert_one_options, "InsertOneOptions.writeConcern");
  var ordered$ = dart.privateName(insert_one_options, "InsertOneOptions.ordered");
  var collation$ = dart.privateName(insert_one_options, "InsertOneOptions.collation");
  insert_one_options.InsertOneOptions = class InsertOneOptions extends core.Object {
    get collection() {
      return this[collection$];
    }
    set collection(value) {
      super.collection = value;
    }
    get writeConcern() {
      return this[writeConcern$];
    }
    set writeConcern(value) {
      super.writeConcern = value;
    }
    get ordered() {
      return this[ordered$];
    }
    set ordered(value) {
      super.ordered = value;
    }
    get collation() {
      return this[collation$];
    }
    set collation(value) {
      super.collation = value;
    }
    get options() {
      return (() => {
        let t5 = new (T.IdentityMapOfStringL$ObjectL()).new();
        if (this.writeConcern != null) t5[$_set]("writeConcern", this.writeConcern.asMap(this.collection.db.masterConnection.serverStatus));
        t5[$_set]("ordered", this.ordered);
        if (this.collation != null) t5[$_set]("collation", this.collation);
        return t5;
      })();
    }
  };
  (insert_one_options.InsertOneOptions.new = function(collection, opts) {
    let t5;
    let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
    let ordered = opts && 'ordered' in opts ? opts.ordered : null;
    let collation = opts && 'collation' in opts ? opts.collation : null;
    this[collection$] = collection;
    this[writeConcern$] = writeConcern;
    this[collation$] = collation;
    this[ordered$] = (t5 = ordered, t5 == null ? true : t5);
    ;
  }).prototype = insert_one_options.InsertOneOptions.prototype;
  dart.addTypeTests(insert_one_options.InsertOneOptions);
  dart.addTypeCaches(insert_one_options.InsertOneOptions);
  dart.setGetterSignature(insert_one_options.InsertOneOptions, () => ({
    __proto__: dart.getGetters(insert_one_options.InsertOneOptions.__proto__),
    options: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(insert_one_options.InsertOneOptions, I[3]);
  dart.setFieldSignature(insert_one_options.InsertOneOptions, () => ({
    __proto__: dart.getFields(insert_one_options.InsertOneOptions.__proto__),
    collection: dart.finalFieldType(dart.legacy(mongo_dart.DbCollection)),
    writeConcern: dart.finalFieldType(dart.legacy(mongo_dart.WriteConcern)),
    ordered: dart.finalFieldType(dart.legacy(core.bool)),
    collation: dart.finalFieldType(dart.legacy(core.Map))
  }));
  var document$ = dart.privateName(insert_one_operation, "InsertOneOperation.document");
  var db$0 = dart.privateName(command_operation, "CommandOperation.db");
  var collection$0 = dart.privateName(command_operation, "CommandOperation.collection");
  var command$0 = dart.privateName(command_operation, "CommandOperation.command");
  var namespace$ = dart.privateName(command_operation, "CommandOperation.namespace");
  command_operation.CommandOperation = class CommandOperation extends operation_base.OperationBase {
    get db() {
      return this[db$0];
    }
    set db(value) {
      this[db$0] = value;
    }
    get collection() {
      return this[collection$0];
    }
    set collection(value) {
      this[collection$0] = value;
    }
    get command() {
      return this[command$0];
    }
    set command(value) {
      this[command$0] = value;
    }
    get namespace() {
      return this[namespace$];
    }
    set namespace(value) {
      this[namespace$] = value;
    }
    $buildCommand() {
      return this.command;
    }
    execute() {
      return async.async(T.MapLOfStringL$ObjectL(), (function* execute() {
        let t7, t6;
        let db = this.db;
        let options = collection.LinkedHashMap.from(this.options);
        let command = this.$buildCommand();
        let dbName = (t6 = T.StringL().as(options[$_get]("dbName")), t6 == null ? (t7 = T.StringL().as(options[$_get]("authdb")), t7 == null ? db.databaseName : t7) : t6);
        if (dart.test(this.hasAspect(operation_base.Aspect.writeOperation))) {
          if (options[$_get]("writeConcern") != null) {
            command[$_set]("writeConcern", options[$_get]("writeConcern"));
          }
        }
        if (dbName != null) {
          command[$_set]("$db", dbName);
        }
        let modernMessage = new mongo_modern_message.MongoModernMessage.new(command);
        return db.executeModernMessage(modernMessage);
      }).bind(this));
    }
  };
  (command_operation.CommandOperation.new = function(db, options, opts) {
    let collection = opts && 'collection' in opts ? opts.collection : null;
    let command = opts && 'command' in opts ? opts.command : null;
    let aspect = opts && 'aspect' in opts ? opts.aspect : null;
    this[namespace$] = null;
    this[db$0] = db;
    this[collection$0] = collection;
    this[command$0] = command;
    command_operation.CommandOperation.__proto__.new.call(this, options);
    this.defineAspects(aspect);
    if (!dart.test(this.hasAspect(operation_base.Aspect.writeOperation))) {
      if (this.collection != null) {
        let readPreference = read_preference.resolveReadPreference(this.collection, options);
        if (readPreference != null) {
          this.options[$_set]("readPreference", readPreference.toJSON());
        }
      } else {
        let readPreference = read_preference.resolveReadPreference(this.db, options);
        if (readPreference != null) {
          this.options[$_set]("readPreference", readPreference.toJSON());
        }
      }
    } else {
      command_operation.applyWriteConcern(this.options, this.options, {db: this.db, collection: this.collection});
      this.options[$_set]("readPreference", read_preference.ReadPreference.primary.toJSON());
    }
  }).prototype = command_operation.CommandOperation.prototype;
  dart.addTypeTests(command_operation.CommandOperation);
  dart.addTypeCaches(command_operation.CommandOperation);
  dart.setMethodSignature(command_operation.CommandOperation, () => ({
    __proto__: dart.getMethods(command_operation.CommandOperation.__proto__),
    $buildCommand: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))), [])
  }));
  dart.setLibraryUri(command_operation.CommandOperation, I[4]);
  dart.setFieldSignature(command_operation.CommandOperation, () => ({
    __proto__: dart.getFields(command_operation.CommandOperation.__proto__),
    db: dart.fieldType(dart.legacy(mongo_dart.Db)),
    collection: dart.fieldType(dart.legacy(mongo_dart.DbCollection)),
    command: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))),
    namespace: dart.fieldType(dart.legacy(core.String))
  }));
  const execute = Symbol("execute");
  insert_one_operation.InsertOneOperation = class InsertOneOperation extends command_operation.CommandOperation {
    get document() {
      return this[document$];
    }
    set document(value) {
      this[document$] = value;
    }
    $buildCommand() {
      return new (T.IdentityMapOfStringL$ObjectL()).from(["insert", this.collection.collectionName, "documents", T.JSArrayOfMapLOfStringL$ObjectL().of([this.document]), "ordered", this.options[$_get]("ordered")]);
    }
    execute() {
      return async.async(T.MapLOfStringL$ObjectL(), (function* execute$() {
        let ret = (yield this[execute]());
        if (dart.equals(ret[$_get]("ok"), 1.0)) {
          ret[$_set]("ops", T.JSArrayOfMapLOfStringL$ObjectL().of([this.document]));
          ret[$_set]("insertedCount", 1);
          ret[$_set]("insertedId", this.document[$_get]("_id"));
        }
        return ret;
      }).bind(this));
    }
    [execute]() {
      return super.execute();
    }
  };
  (insert_one_operation.InsertOneOperation.new = function(collection, document, insertOneOptions) {
    this[document$] = document;
    insert_one_operation.InsertOneOperation.__proto__.new.call(this, collection.db, insertOneOptions.options, {collection: collection, aspect: operation_base.Aspect.writeOperation});
    if (this.document == null) {
      dart.throw(new core.ArgumentError.new("Document required in insertOne() method"));
    }
    let id = T.ObjectIdL().as(this.document[$_get]("_id"));
    if (id == null) {
      this.document[$_set]("_id", new bson.ObjectId.new());
    }
  }).prototype = insert_one_operation.InsertOneOperation.prototype;
  dart.addTypeTests(insert_one_operation.InsertOneOperation);
  dart.addTypeCaches(insert_one_operation.InsertOneOperation);
  dart.setLibraryUri(insert_one_operation.InsertOneOperation, I[5]);
  dart.setFieldSignature(insert_one_operation.InsertOneOperation, () => ({
    __proto__: dart.getFields(insert_one_operation.InsertOneOperation.__proto__),
    document: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))))
  }));
  var collection$1 = dart.privateName(create_index_options, "CreateIndexOptions.collection");
  var writeConcern$0 = dart.privateName(create_index_options, "CreateIndexOptions.writeConcern");
  var uniqueIndex$ = dart.privateName(create_index_options, "CreateIndexOptions.uniqueIndex");
  var sparseIndex$ = dart.privateName(create_index_options, "CreateIndexOptions.sparseIndex");
  var background$ = dart.privateName(create_index_options, "CreateIndexOptions.background");
  var dropDuplicatedEntries$ = dart.privateName(create_index_options, "CreateIndexOptions.dropDuplicatedEntries");
  var geoLowerBound$ = dart.privateName(create_index_options, "CreateIndexOptions.geoLowerBound");
  var geoHighBound$ = dart.privateName(create_index_options, "CreateIndexOptions.geoHighBound");
  var formatVersion = dart.privateName(create_index_options, "CreateIndexOptions.formatVersion");
  var expireAfterSeconds = dart.privateName(create_index_options, "CreateIndexOptions.expireAfterSeconds");
  var indexName$ = dart.privateName(create_index_options, "CreateIndexOptions.indexName");
  var partialFilterExpression$ = dart.privateName(create_index_options, "CreateIndexOptions.partialFilterExpression");
  var collation$0 = dart.privateName(create_index_options, "CreateIndexOptions.collation");
  create_index_options.CreateIndexOptions = class CreateIndexOptions extends core.Object {
    get collection() {
      return this[collection$1];
    }
    set collection(value) {
      this[collection$1] = value;
    }
    get writeConcern() {
      return this[writeConcern$0];
    }
    set writeConcern(value) {
      this[writeConcern$0] = value;
    }
    get uniqueIndex() {
      return this[uniqueIndex$];
    }
    set uniqueIndex(value) {
      this[uniqueIndex$] = value;
    }
    get sparseIndex() {
      return this[sparseIndex$];
    }
    set sparseIndex(value) {
      this[sparseIndex$] = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      this[background$] = value;
    }
    get dropDuplicatedEntries() {
      return this[dropDuplicatedEntries$];
    }
    set dropDuplicatedEntries(value) {
      this[dropDuplicatedEntries$] = value;
    }
    get geoLowerBound() {
      return this[geoLowerBound$];
    }
    set geoLowerBound(value) {
      this[geoLowerBound$] = value;
    }
    get geoHighBound() {
      return this[geoHighBound$];
    }
    set geoHighBound(value) {
      this[geoHighBound$] = value;
    }
    get formatVersion() {
      return this[formatVersion];
    }
    set formatVersion(value) {
      this[formatVersion] = value;
    }
    get expireAfterSeconds() {
      return this[expireAfterSeconds];
    }
    set expireAfterSeconds(value) {
      this[expireAfterSeconds] = value;
    }
    get indexName() {
      return this[indexName$];
    }
    set indexName(value) {
      this[indexName$] = value;
    }
    get partialFilterExpression() {
      return this[partialFilterExpression$];
    }
    set partialFilterExpression(value) {
      this[partialFilterExpression$] = value;
    }
    get collation() {
      return this[collation$0];
    }
    set collation(value) {
      this[collation$0] = value;
    }
    get options() {
      return (() => {
        let t6 = new (T.IdentityMapOfStringL$ObjectL()).new();
        if (this.writeConcern != null) t6[$_set]("writeConcern", this.writeConcern.asMap(this.collection.db.masterConnection.serverStatus));
        t6[$_set]("unique", this.uniqueIndex);
        t6[$_set]("sparse", this.sparseIndex);
        t6[$_set]("background", this.background);
        t6[$_set]("dropDups", this.dropDuplicatedEntries);
        if (this.geoLowerBound != null) t6[$_set]("min", this.geoLowerBound);
        if (this.geoHighBound != null) t6[$_set]("max", this.geoHighBound);
        if (this.formatVersion != null) t6[$_set]("v", this.formatVersion);
        if (this.expireAfterSeconds != null) t6[$_set]("expireAfterSeconds", this.expireAfterSeconds);
        if (this.indexName != null) t6[$_set]("name", this.indexName);
        if (this.partialFilterExpression != null) t6[$_set]("partialFilterExpression", this.partialFilterExpression);
        if (this.collation != null) t6[$_set]("collation", this.collation);
        return t6;
      })();
    }
  };
  (create_index_options.CreateIndexOptions.new = function(collection, opts) {
    let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
    let uniqueIndex = opts && 'uniqueIndex' in opts ? opts.uniqueIndex : null;
    let sparseIndex = opts && 'sparseIndex' in opts ? opts.sparseIndex : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let dropDuplicatedEntries = opts && 'dropDuplicatedEntries' in opts ? opts.dropDuplicatedEntries : null;
    let geoLowerBound = opts && 'geoLowerBound' in opts ? opts.geoLowerBound : null;
    let geoHighBound = opts && 'geoHighBound' in opts ? opts.geoHighBound : null;
    let indexName = opts && 'indexName' in opts ? opts.indexName : null;
    let partialFilterExpression = opts && 'partialFilterExpression' in opts ? opts.partialFilterExpression : null;
    let collation = opts && 'collation' in opts ? opts.collation : null;
    this[uniqueIndex$] = false;
    this[sparseIndex$] = false;
    this[background$] = false;
    this[dropDuplicatedEntries$] = false;
    this[formatVersion] = null;
    this[expireAfterSeconds] = null;
    this[collection$1] = collection;
    this[writeConcern$0] = writeConcern;
    this[uniqueIndex$] = uniqueIndex;
    this[sparseIndex$] = sparseIndex;
    this[background$] = background;
    this[dropDuplicatedEntries$] = dropDuplicatedEntries;
    this[geoLowerBound$] = geoLowerBound;
    this[geoHighBound$] = geoHighBound;
    this[indexName$] = indexName;
    this[partialFilterExpression$] = partialFilterExpression;
    this[collation$0] = collation;
    ;
  }).prototype = create_index_options.CreateIndexOptions.prototype;
  dart.addTypeTests(create_index_options.CreateIndexOptions);
  dart.addTypeCaches(create_index_options.CreateIndexOptions);
  dart.setGetterSignature(create_index_options.CreateIndexOptions, () => ({
    __proto__: dart.getGetters(create_index_options.CreateIndexOptions.__proto__),
    options: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(create_index_options.CreateIndexOptions, I[6]);
  dart.setFieldSignature(create_index_options.CreateIndexOptions, () => ({
    __proto__: dart.getFields(create_index_options.CreateIndexOptions.__proto__),
    collection: dart.fieldType(dart.legacy(mongo_dart.DbCollection)),
    writeConcern: dart.fieldType(dart.legacy(mongo_dart.WriteConcern)),
    uniqueIndex: dart.fieldType(dart.legacy(core.bool)),
    sparseIndex: dart.fieldType(dart.legacy(core.bool)),
    background: dart.fieldType(dart.legacy(core.bool)),
    dropDuplicatedEntries: dart.fieldType(dart.legacy(core.bool)),
    geoLowerBound: dart.fieldType(dart.legacy(core.double)),
    geoHighBound: dart.fieldType(dart.legacy(core.double)),
    formatVersion: dart.fieldType(dart.legacy(core.double)),
    expireAfterSeconds: dart.fieldType(dart.legacy(core.int)),
    indexName: dart.fieldType(dart.legacy(core.String)),
    partialFilterExpression: dart.fieldType(dart.legacy(core.Map)),
    collation: dart.fieldType(dart.legacy(core.Map))
  }));
  command_operation.applyWriteConcern = function applyWriteConcern(target, options, opts) {
    let db = opts && 'db' in opts ? opts.db : null;
    let collection = opts && 'collection' in opts ? opts.collection : null;
    options == null ? options = new (T.IdentityMapOfStringL$ObjectL()).new() : null;
    if (dart.test(target[$containsKey]("writeConcern"))) {
      if (target[$_get]("writeConcern") == null) {
        target[$remove]("writeConcern");
      } else {
        return target;
      }
    }
    if (target != options && dart.test(options[$containsKey]("writeConcern"))) {
      if (options[$_get]("writeConcern") != null) {
        target[$_set]("writeConcern", options[$_get]("writeConcern"));
        return target;
      }
    }
    if (db != null && db.writeConcern != null) {
      target[$_set]("writeConcern", db.writeConcern.asMap(db.masterConnection.serverStatus));
      return target;
    }
    return target;
  };
  var fieldOrSpec$ = dart.privateName(create_index_operation, "CreateIndexOperation.fieldOrSpec");
  var indexes = dart.privateName(create_index_operation, "CreateIndexOperation.indexes");
  const execute$ = Symbol("execute");
  create_index_operation.CreateIndexOperation = class CreateIndexOperation extends command_operation.CommandOperation {
    get fieldOrSpec() {
      return this[fieldOrSpec$];
    }
    set fieldOrSpec(value) {
      this[fieldOrSpec$] = value;
    }
    get indexes() {
      return this[indexes];
    }
    set indexes(value) {
      this[indexes] = value;
    }
    $buildCommand() {
      let indexes = this.indexes;
      for (let optionName of this.options[$keys]) {
        if (!dart.test(create_index_operation.keysToOmit.contains(optionName))) {
          indexes[$_set](optionName, this.options[$_get](optionName));
        }
      }
      return new (T.IdentityMapOfStringL$ObjectL()).from(["createIndexes", this.collection.collectionName, "indexes", T.JSArrayOfMapLOfStringL$ObjectL().of([indexes])]);
    }
    execute() {
      return async.async(T.MapLOfStringL$ObjectL(), (function* execute() {
        return this[execute$]();
      }).bind(this));
    }
    [execute$]() {
      return super.execute();
    }
  };
  (create_index_operation.CreateIndexOperation.new = function(db, collection, fieldOrSpec, indexOptions) {
    this[indexes] = null;
    this[fieldOrSpec$] = fieldOrSpec;
    create_index_operation.CreateIndexOperation.__proto__.new.call(this, db, indexOptions.options, {collection: collection, aspect: operation_base.Aspect.writeOperation});
    let indexParameters = create_index_operation.parseIndexOptions(this.fieldOrSpec);
    let indexName = this.options != null && this.options[$_get]("name") != null && T.StringL().is(this.options[$_get]("name")) ? T.StringL().as(this.options[$_get]("name")) : T.StringL().as(indexParameters[$_get]("name"));
    this.indexes = new (T.IdentityMapOfStringL$ObjectL()).from(["name", indexName, "key", indexParameters[$_get]("fieldHash")]);
  }).prototype = create_index_operation.CreateIndexOperation.prototype;
  dart.addTypeTests(create_index_operation.CreateIndexOperation);
  dart.addTypeCaches(create_index_operation.CreateIndexOperation);
  dart.setLibraryUri(create_index_operation.CreateIndexOperation, I[7]);
  dart.setFieldSignature(create_index_operation.CreateIndexOperation, () => ({
    __proto__: dart.getFields(create_index_operation.CreateIndexOperation.__proto__),
    fieldOrSpec: dart.fieldType(dart.legacy(core.Object)),
    indexes: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))))
  }));
  create_index_operation.parseIndexOptions = function parseIndexOptions(fieldOrSpec) {
    let t7, t7$;
    let fieldHash = new (T.IdentityMapOfStringL$ObjectL()).new();
    let indexes = [];
    let keys = null;
    if (T.StringL().is(fieldOrSpec)) {
      indexes[$add](create_index_operation._fieldIndexName(fieldOrSpec, "1"));
      fieldHash[$_set](fieldOrSpec, 1);
    } else if (T.ListL().is(fieldOrSpec)) {
      for (let object of fieldOrSpec) {
        if (T.StringL().is(object)) {
          indexes[$add](create_index_operation._fieldIndexName(object, "1"));
          fieldHash[$_set](object, 1);
        } else if (T.ListL().is(object)) {
          indexes[$add](create_index_operation._fieldIndexName(T.StringL().as(object[$_get](0)), T.StringL().as((t7 = object[$_get](1), t7 == null ? "1" : t7))));
          fieldHash[$_set](T.StringL().as(object[$_get](0)), (t7$ = object[$_get](1), t7$ == null ? "1" : t7$));
        } else if (T.MapL().is(object)) {
          keys = object[$keys];
          for (let t7$0 of T.IterableL().as(keys)) {
            let key = T.StringL().as(t7$0);
            indexes[$add](create_index_operation._fieldIndexName(key, T.StringL().as(object[$_get](key))));
            fieldHash[$_set](key, object[$_get](key));
          }
        } else {
        }
      }
    } else if (T.MapL().is(fieldOrSpec)) {
      keys = fieldOrSpec[$keys];
      for (let t8 of T.IterableL().as(keys)) {
        let key = T.StringL().as(t8);
        let indexDirection = dart.str(fieldOrSpec[$_get](key));
        indexes[$add](create_index_operation._fieldIndexName(key, indexDirection));
        fieldHash[$_set](key, fieldOrSpec[$_get](key));
      }
    }
    return new (T.IdentityMapOfStringL$ObjectL()).from(["name", indexes[$join]("_"), "keys", keys, "fieldHash", fieldHash]);
  };
  create_index_operation._fieldIndexName = function _fieldIndexName(fieldName, sort) {
    return dart.str(fieldName) + "_" + dart.str(sort);
  };
  dart.defineLazy(create_index_operation, {
    /*create_index_operation.keysToOmit*/get keysToOmit() {
      return C[0] || CT.C0;
    }
  }, true);
  var _name$ = dart.privateName(read_preference, "_name");
  read_preference.ReadPreferenceMode = class ReadPreferenceMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (read_preference.ReadPreferenceMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = read_preference.ReadPreferenceMode.prototype;
  dart.addTypeTests(read_preference.ReadPreferenceMode);
  dart.addTypeCaches(read_preference.ReadPreferenceMode);
  dart.setMethodSignature(read_preference.ReadPreferenceMode, () => ({
    __proto__: dart.getMethods(read_preference.ReadPreferenceMode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(read_preference.ReadPreferenceMode, I[8]);
  dart.setFieldSignature(read_preference.ReadPreferenceMode, () => ({
    __proto__: dart.getFields(read_preference.ReadPreferenceMode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(read_preference.ReadPreferenceMode, ['toString']);
  read_preference.ReadPreferenceMode.primary = C[1] || CT.C1;
  read_preference.ReadPreferenceMode.primaryPreferred = C[2] || CT.C2;
  read_preference.ReadPreferenceMode.secondary = C[3] || CT.C3;
  read_preference.ReadPreferenceMode.secondaryPreferred = C[4] || CT.C4;
  read_preference.ReadPreferenceMode.nearest = C[5] || CT.C5;
  read_preference.ReadPreferenceMode.values = C[6] || CT.C6;
  var mode$ = dart.privateName(read_preference, "ReadPreference.mode");
  var tags$ = dart.privateName(read_preference, "ReadPreference.tags");
  var options$ = dart.privateName(read_preference, "ReadPreference.options");
  var maxStalenessSeconds = dart.privateName(read_preference, "ReadPreference.maxStalenessSeconds");
  var minWireVersion = dart.privateName(read_preference, "ReadPreference.minWireVersion");
  read_preference.ReadPreference = class ReadPreference extends core.Object {
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get maxStalenessSeconds() {
      return this[maxStalenessSeconds];
    }
    set maxStalenessSeconds(value) {
      super.maxStalenessSeconds = value;
    }
    get minWireVersion() {
      return this[minWireVersion];
    }
    set minWireVersion(value) {
      super.minWireVersion = value;
    }
    static getMaxStalenessSeconds(options) {
      if (options == null) {
        return null;
      }
      if (options[$_get]("maxStalenessSeconds") != null) {
        if (!T.intL().is(options[$_get]("maxStalenessSeconds")) || dart.notNull(T.intL().as(options[$_get]("maxStalenessSeconds"))) < 0) {
          dart.throw(new core.ArgumentError.new("maxStalenessSeconds must be a positive integer"));
        }
        return T.intL().as(options[$_get]("maxStalenessSeconds"));
      }
      return null;
    }
    static getMinWireVersion(options) {
      if (options == null) {
        return null;
      }
      if (options[$_get]("maxStalenessSeconds") != null) {
        if (!T.intL().is(options[$_get]("maxStalenessSeconds")) || dart.notNull(T.intL().as(options[$_get]("maxStalenessSeconds"))) < 0) {
          dart.throw(new core.ArgumentError.new("maxStalenessSeconds must be a positive integer"));
        }
        return 5;
      }
      return null;
    }
    get preference() {
      return this.mode;
    }
    static fromOptions(options) {
      let t9;
      if (options == null || options[$_get]("readPreference") == null) {
        return null;
      }
      let readPreference = options[$_get]("readPreference");
      if (T.ReadPreferenceModeL().is(readPreference)) {
        return new read_preference.ReadPreference.new(readPreference, T.ListL().as(options[$_get]("readPreferenceTags")));
      } else if (T.MapL().is(readPreference)) {
        let mode = (t9 = T.ReadPreferenceModeL().as(readPreference[$_get]("mode")), t9 == null ? T.ReadPreferenceModeL().as(readPreference[$_get]("preference")) : t9);
        if (mode != null) {
          return new read_preference.ReadPreference.new(mode, T.ListL().as(readPreference[$_get]("tags")), new (T.IdentityMapOfStringL$ObjectL()).from(["maxStalenessSeconds", readPreference[$_get]("maxStalenessSeconds")]));
        }
      } else if (T.ReadPreferenceL().is(options[$_get]("readPreference"))) {
        return T.ReadPreferenceL().as(options[$_get]("readPreference"));
      } else {
        dart.throw(new core.UnsupportedError.new("The \"" + "readPreference" + "\" value is of an " + "unmanaged type " + dart.str(dart.runtimeType(options[$_get]("readPreference")))));
      }
      return null;
    }
    static isValid(mode) {
      return true;
    }
    get slaveOk() {
      return read_preference.ReadPreference.needSlaveOk[$contains](this.mode);
    }
    _equals(other) {
      if (other == null) return false;
      return T.ReadPreferenceL().is(other) && this.mode == other.mode;
    }
    get hashCode() {
      return dart.hashCode(this.mode);
    }
    toJSON() {
      let readPreference = new (T.IdentityMapOfStringL$ObjectL()).from(["mode", dart.str(this.mode)[$replaceFirst]("ReadPreferenceMode.", "")]);
      if (this.tags != null) {
        readPreference[$_set]("tags", this.tags);
      }
      if (this.maxStalenessSeconds != null) {
        readPreference[$_set]("maxStalenessSeconds", this.maxStalenessSeconds);
      }
      return readPreference;
    }
  };
  (read_preference.ReadPreference.new = function(mode = null, tags = null, options = null) {
    let t9;
    this[mode$] = mode;
    this[tags$] = tags;
    this[options$] = (t9 = options, t9 == null ? new (T.IdentityMapOfStringL$ObjectL()).new() : t9);
    this[maxStalenessSeconds] = read_preference.ReadPreference.getMaxStalenessSeconds(options);
    this[minWireVersion] = read_preference.ReadPreference.getMinWireVersion(options);
    if (this.mode == read_preference.ReadPreferenceMode.primary) {
      if (this.tags != null && dart.test(this.tags[$isNotEmpty])) {
        dart.throw(new core.ArgumentError.new("Primary read preference cannot be combined with tags"));
      }
      if (this.maxStalenessSeconds != null) {
        dart.throw(new core.ArgumentError.new("Primary read preference cannot be combined with maxStalenessSeconds"));
      }
    }
  }).prototype = read_preference.ReadPreference.prototype;
  dart.addTypeTests(read_preference.ReadPreference);
  dart.addTypeCaches(read_preference.ReadPreference);
  dart.setMethodSignature(read_preference.ReadPreference, () => ({
    __proto__: dart.getMethods(read_preference.ReadPreference.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toJSON: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))), [])
  }));
  dart.setGetterSignature(read_preference.ReadPreference, () => ({
    __proto__: dart.getGetters(read_preference.ReadPreference.__proto__),
    preference: dart.legacy(read_preference.ReadPreferenceMode),
    slaveOk: dart.legacy(core.bool),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(read_preference.ReadPreference, I[8]);
  dart.setFieldSignature(read_preference.ReadPreference, () => ({
    __proto__: dart.getFields(read_preference.ReadPreference.__proto__),
    mode: dart.finalFieldType(dart.legacy(read_preference.ReadPreferenceMode)),
    tags: dart.finalFieldType(dart.legacy(core.List)),
    options: dart.finalFieldType(dart.legacy(core.Map)),
    maxStalenessSeconds: dart.finalFieldType(dart.legacy(core.int)),
    minWireVersion: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(read_preference.ReadPreference, ['_equals']);
  dart.defineExtensionAccessors(read_preference.ReadPreference, ['hashCode']);
  dart.defineLazy(read_preference.ReadPreference, {
    /*read_preference.ReadPreference.needSlaveOk*/get needSlaveOk() {
      return C[7] || CT.C7;
    },
    /*read_preference.ReadPreference.primary*/get primary() {
      return new read_preference.ReadPreference.new(read_preference.ReadPreferenceMode.primary);
    },
    set primary(_) {},
    /*read_preference.ReadPreference.primaryPreferred*/get primaryPreferred() {
      return new read_preference.ReadPreference.new(read_preference.ReadPreferenceMode.primaryPreferred);
    },
    set primaryPreferred(_) {},
    /*read_preference.ReadPreference.secondary*/get secondary() {
      return new read_preference.ReadPreference.new(read_preference.ReadPreferenceMode.secondary);
    },
    set secondary(_) {},
    /*read_preference.ReadPreference.secondaryPreferred*/get secondaryPreferred() {
      return new read_preference.ReadPreference.new(read_preference.ReadPreferenceMode.secondaryPreferred);
    },
    set secondaryPreferred(_) {},
    /*read_preference.ReadPreference.nearest*/get nearest() {
      return new read_preference.ReadPreference.new(read_preference.ReadPreferenceMode.nearest);
    },
    set nearest(_) {}
  }, true);
  read_preference.resolveReadPreference = function resolveReadPreference(parent, options) {
    options == null ? options = new (T.IdentityMapOfStringL$ObjectL()).new() : null;
    let inheritedReadPreference = null;
    if (T.DbCollectionL().is(parent)) {
      inheritedReadPreference = parent.readPreference;
    } else if (T.DbL().is(parent)) {
      inheritedReadPreference = parent.readPreference;
    }
    let readPreference = null;
    if (options[$_get]("readPreference") != null) {
      readPreference = read_preference.ReadPreference.fromOptions(options);
    } else if (inheritedReadPreference != null) {
      readPreference = inheritedReadPreference;
    } else {
      dart.throw(new core.ArgumentError.new("No readPreference was provided or inherited."));
    }
    return readPreference;
  };
  var responseTo = dart.privateName(mongo_dart, "MongoMessage.responseTo");
  var opcode = dart.privateName(mongo_dart, "MongoMessage.opcode");
  var _requestId = dart.privateName(mongo_dart, "_requestId");
  var _messageLength = dart.privateName(mongo_dart, "_messageLength");
  mongo_dart.MongoMessage = class MongoMessage extends core.Object {
    get responseTo() {
      return this[responseTo];
    }
    set responseTo(value) {
      this[responseTo] = value;
    }
    get opcode() {
      return this[opcode];
    }
    set opcode(value) {
      this[opcode] = value;
    }
    get messageLength() {
      return this[_messageLength];
    }
    get requestId() {
      this[_requestId] == null ? this[_requestId] = mongo_dart._Statics.nextRequestId : null;
      return this[_requestId];
    }
    serialize() {
      dart.throw(new mongo_dart.MongoDartError.new("Must be implemented"));
    }
    readMessageHeaderFrom(buffer) {
      this[_messageLength] = buffer.readInt32();
      this[_requestId] = buffer.readInt32();
      this.responseTo = buffer.readInt32();
      let opcodeFromWire = buffer.readInt32();
      if (opcodeFromWire != this.opcode) {
        dart.throw(new mongo_dart.MongoDartError.new("Expected " + dart.str(this.opcode) + " in Message header. Got " + dart.str(opcodeFromWire)));
      }
    }
    writeMessageHeaderTo(buffer) {
      buffer.writeInt(this.messageLength);
      buffer.writeInt(this.requestId);
      buffer.writeInt(0);
      buffer.writeInt(this.opcode);
      if (dart.notNull(this.messageLength) < 0) {
        dart.throw(new mongo_dart.MongoDartError.new("Error in message length"));
      }
    }
    toString() {
      return dart.throw(new mongo_dart.MongoDartError.new("must be implemented"));
    }
  };
  (mongo_dart.MongoMessage.new = function() {
    this[_requestId] = null;
    this[_messageLength] = null;
    this[responseTo] = null;
    this[opcode] = mongo_dart.MongoMessage.Reply;
    ;
  }).prototype = mongo_dart.MongoMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoMessage);
  dart.addTypeCaches(mongo_dart.MongoMessage);
  dart.setMethodSignature(mongo_dart.MongoMessage, () => ({
    __proto__: dart.getMethods(mongo_dart.MongoMessage.__proto__),
    serialize: dart.fnType(dart.legacy(bson.BsonBinary), []),
    readMessageHeaderFrom: dart.fnType(dart.void, [dart.legacy(bson.BsonBinary)]),
    writeMessageHeaderTo: dart.fnType(dart.void, [dart.legacy(bson.BsonBinary)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(mongo_dart.MongoMessage, () => ({
    __proto__: dart.getGetters(mongo_dart.MongoMessage.__proto__),
    messageLength: dart.legacy(core.int),
    requestId: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mongo_dart.MongoMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoMessage.__proto__),
    [_requestId]: dart.fieldType(dart.legacy(core.int)),
    [_messageLength]: dart.fieldType(dart.legacy(core.int)),
    responseTo: dart.fieldType(dart.legacy(core.int)),
    opcode: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoMessage, ['toString']);
  dart.defineLazy(mongo_dart.MongoMessage, {
    /*mongo_dart.MongoMessage.Reply*/get Reply() {
      return 1;
    },
    /*mongo_dart.MongoMessage.Message*/get Message() {
      return 1000;
    },
    /*mongo_dart.MongoMessage.Update*/get Update() {
      return 2001;
    },
    /*mongo_dart.MongoMessage.Insert*/get Insert() {
      return 2002;
    },
    /*mongo_dart.MongoMessage.Query*/get Query() {
      return 2004;
    },
    /*mongo_dart.MongoMessage.GetMore*/get GetMore() {
      return 2005;
    },
    /*mongo_dart.MongoMessage.Delete*/get Delete() {
      return 2006;
    },
    /*mongo_dart.MongoMessage.KillCursors*/get KillCursors() {
      return 2007;
    },
    /*mongo_dart.MongoMessage.ModernMessage*/get ModernMessage() {
      return 2013;
    }
  }, true);
  mongo_response_message.MongoResponseMessage = class MongoResponseMessage extends mongo_dart.MongoMessage {
    deserialize(buffer) {
      dart.throw(new mongo_dart.MongoDartError.new("Must be implemented"));
    }
    static extractOpcode(buffer) {
      let t9;
      buffer.readInt32();
      buffer.readInt32();
      buffer.readInt32();
      let opcodeFromWire = buffer.readInt32();
      t9 = buffer;
      t9.offset = dart.notNull(t9.offset) - 16;
      return opcodeFromWire;
    }
  };
  (mongo_response_message.MongoResponseMessage.new = function() {
    mongo_response_message.MongoResponseMessage.__proto__.new.call(this);
    ;
  }).prototype = mongo_response_message.MongoResponseMessage.prototype;
  dart.addTypeTests(mongo_response_message.MongoResponseMessage);
  dart.addTypeCaches(mongo_response_message.MongoResponseMessage);
  dart.setMethodSignature(mongo_response_message.MongoResponseMessage, () => ({
    __proto__: dart.getMethods(mongo_response_message.MongoResponseMessage.__proto__),
    deserialize: dart.fnType(dart.legacy(mongo_dart.MongoMessage), [dart.legacy(bson.BsonBinary)])
  }));
  dart.setLibraryUri(mongo_response_message.MongoResponseMessage, I[10]);
  var flags = dart.privateName(mongo_modern_message, "MongoModernMessage.flags");
  var responseFlags = dart.privateName(mongo_modern_message, "MongoModernMessage.responseFlags");
  var sections = dart.privateName(mongo_modern_message, "MongoModernMessage.sections");
  mongo_modern_message.MongoModernMessage = class MongoModernMessage extends mongo_response_message.MongoResponseMessage {
    get flags() {
      return this[flags];
    }
    set flags(value) {
      this[flags] = value;
    }
    get responseFlags() {
      return this[responseFlags];
    }
    set responseFlags(value) {
      this[responseFlags] = value;
    }
    get sections() {
      return this[sections];
    }
    set sections(value) {
      this[sections] = value;
    }
    createSections(doc) {
      let t9, t9$;
      let ret = T.JSArrayOfSectionL().of([]);
      let isPulledOutCommand = false;
      let keys = (t9$ = (t9 = doc, t9 == null ? null : t9[$keys]), t9$ == null ? null : t9$[$toList]());
      if (keys == null || dart.test(keys[$isEmpty])) {
        dart.throw(new mongo_dart.MongoDartError.new("Invalid document received for Mongo Modern Message"));
      }
      let indexOfCommandName = mongo_modern_message.MongoModernMessage.commandName[$indexOf](keys[$first]);
      if (indexOfCommandName === -1) {
        dart.throw(new mongo_dart.MongoDartError.new("The first entry (\"" + dart.str(keys[$first]) + "\") of the document is not a command name"));
      }
      if (dart.test(mongo_modern_message.MongoModernMessage.pulledOutCommand[$contains](keys[$first]))) {
        isPulledOutCommand = true;
      }
      if (!isPulledOutCommand) {
        ret[$add](section.Section.new(0, doc));
        return ret;
      }
      let argumentName = mongo_modern_message.MongoModernMessage.commandArgument[$_get](indexOfCommandName);
      let data = T.ListLOfMapLOfStringL$ObjectL().as(doc[$_get](argumentName));
      if (data == null) {
        dart.throw(new mongo_dart.MongoDartError.new("The command " + dart.str(keys[$first]) + " requires an element with " + "key " + dart.str(argumentName)));
      }
      doc[$remove](argumentName);
      ret[$add](section.Section.new(0, doc));
      let totalElements = data[$length];
      let sectionList = null;
      while (dart.notNull(totalElements) > 0) {
        if (dart.notNull(totalElements) > 50) {
          sectionList = data[$sublist](0, 50);
        } else {
          sectionList = data[$sublist](0, totalElements);
        }
        ret[$add](section.Section.new(1, new (T.IdentityMapOfStringL$ObjectL()).from([argumentName, sectionList])));
        totalElements = dart.notNull(totalElements) - 50;
      }
      return ret;
    }
    get messageLength() {
      let sectionsSize = 0;
      for (let section of this.sections) {
        sectionsSize = sectionsSize + dart.notNull(section.byteLength);
      }
      return 16 + 4 + sectionsSize;
    }
    serialize() {
      let buffer = new bson.BsonBinary.new(this.messageLength);
      this.writeMessageHeaderTo(buffer);
      buffer.writeInt(this.flags);
      for (let section of this.sections) {
        section.packValue(buffer);
      }
      buffer.offset = 0;
      return buffer;
    }
    deserialize(buffer) {
      this.sections = T.JSArrayOfSectionL().of([]);
      this.readMessageHeaderFrom(buffer);
      this.responseFlags = buffer.readInt32();
      if (buffer.byteArray[$lengthInBytes] != super.messageLength) {
        dart.throw(new mongo_dart.MongoDartError.new("The length of the buffer received " + "(" + dart.str(buffer.byteLength()) + ") is not what expected " + "(" + dart.str(super.messageLength) + ")"));
      }
      while (dart.notNull(buffer.offset) < dart.notNull(super.messageLength)) {
        this.sections[$add](section.Section.fromBuffer(buffer));
      }
      return this;
    }
    toString() {
      if (this.sections[$length] === 1) {
        return "MongoModernMessage(" + dart.str(this.requestId) + ", " + dart.str(this.sections[$_get](0)) + ")";
      }
      return "MongoModernMessage(" + dart.str(this.requestId) + ", " + dart.str(this.sections[$length]) + " sections)";
    }
  };
  (mongo_modern_message.MongoModernMessage.fromBuffer = function(buffer) {
    this[flags] = null;
    this[responseFlags] = null;
    this[sections] = null;
    mongo_modern_message.MongoModernMessage.__proto__.new.call(this);
    this.opcode = mongo_dart.MongoMessage.ModernMessage;
    this.deserialize(buffer);
  }).prototype = mongo_modern_message.MongoModernMessage.prototype;
  (mongo_modern_message.MongoModernMessage.new = function(document, opts) {
    let checksumPresent = opts && 'checksumPresent' in opts ? opts.checksumPresent : null;
    let moreToCome = opts && 'moreToCome' in opts ? opts.moreToCome : null;
    let exhaustAllowed = opts && 'exhaustAllowed' in opts ? opts.exhaustAllowed : null;
    this[flags] = null;
    this[responseFlags] = null;
    this[sections] = null;
    mongo_modern_message.MongoModernMessage.__proto__.new.call(this);
    checksumPresent == null ? checksumPresent = false : null;
    moreToCome == null ? moreToCome = false : null;
    exhaustAllowed == null ? exhaustAllowed = false : null;
    this.opcode = mongo_dart.MongoMessage.ModernMessage;
    this.flags = 0;
    if (dart.test(checksumPresent)) {
      this.flags = (dart.notNull(this.flags) | 1) >>> 0;
    }
    if (dart.test(moreToCome)) {
      this.flags = (dart.notNull(this.flags) | 2) >>> 0;
    }
    if (dart.test(exhaustAllowed)) {
      this.flags = (dart.notNull(this.flags) | 65536) >>> 0;
    }
    this.sections = this.createSections(document);
  }).prototype = mongo_modern_message.MongoModernMessage.prototype;
  dart.addTypeTests(mongo_modern_message.MongoModernMessage);
  dart.addTypeCaches(mongo_modern_message.MongoModernMessage);
  dart.setMethodSignature(mongo_modern_message.MongoModernMessage, () => ({
    __proto__: dart.getMethods(mongo_modern_message.MongoModernMessage.__proto__),
    createSections: dart.fnType(dart.legacy(core.List$(dart.legacy(section.Section))), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    deserialize: dart.fnType(dart.legacy(mongo_response_message.MongoResponseMessage), [dart.legacy(bson.BsonBinary)])
  }));
  dart.setLibraryUri(mongo_modern_message.MongoModernMessage, I[11]);
  dart.setFieldSignature(mongo_modern_message.MongoModernMessage, () => ({
    __proto__: dart.getFields(mongo_modern_message.MongoModernMessage.__proto__),
    flags: dart.fieldType(dart.legacy(core.int)),
    responseFlags: dart.fieldType(dart.legacy(core.int)),
    sections: dart.fieldType(dart.legacy(core.List$(dart.legacy(section.Section))))
  }));
  dart.defineExtensionMethods(mongo_modern_message.MongoModernMessage, ['toString']);
  dart.defineLazy(mongo_modern_message.MongoModernMessage, {
    /*mongo_modern_message.MongoModernMessage.basePayloadType*/get basePayloadType() {
      return 0;
    },
    /*mongo_modern_message.MongoModernMessage.documentsPayloadType*/get documentsPayloadType() {
      return 1;
    },
    /*mongo_modern_message.MongoModernMessage.maxDocumentsPerPayload1*/get maxDocumentsPerPayload1() {
      return 50;
    },
    /*mongo_modern_message.MongoModernMessage.flagCheckSumPresent*/get flagCheckSumPresent() {
      return 1;
    },
    /*mongo_modern_message.MongoModernMessage.flagMoreToCome*/get flagMoreToCome() {
      return 2;
    },
    /*mongo_modern_message.MongoModernMessage.flagExhaustAllowed*/get flagExhaustAllowed() {
      return 65536;
    },
    /*mongo_modern_message.MongoModernMessage.commandName*/get commandName() {
      return T.JSArrayOfStringL().of(["createIndexes", "insert", "update", "delete", "serverStatus"]);
    },
    set commandName(_) {},
    /*mongo_modern_message.MongoModernMessage.commandArgument*/get commandArgument() {
      return T.JSArrayOfStringL().of(["indexes", "documents", "updates", "deletes", null]);
    },
    set commandArgument(_) {},
    /*mongo_modern_message.MongoModernMessage.globalArgument*/get globalArgument() {
      return T.JSArrayOfStringL().of(["$db", "readPreference"]);
    },
    set globalArgument(_) {},
    /*mongo_modern_message.MongoModernMessage.pulledOutCommand*/get pulledOutCommand() {
      return T.JSArrayOfStringL().of(["insert", "update", "delete"]);
    },
    set pulledOutCommand(_) {}
  }, true);
  dart.defineLazy(mongo_modern_message, {
    /*mongo_modern_message.notFound*/get notFound() {
      return -1;
    }
  }, true);
  var payloadType$ = dart.privateName(section, "Section.payloadType");
  var payload$ = dart.privateName(section, "Section.payload");
  section.Section = class Section extends core.Object {
    get payloadType() {
      return this[payloadType$];
    }
    set payloadType(value) {
      this[payloadType$] = value;
    }
    get payload() {
      return this[payload$];
    }
    set payload(value) {
      this[payload$] = value;
    }
    static new(payloadType, data) {
      if (payloadType === 0) {
        return new section.SectionType0.fromDocument(payloadType, data);
      } else if (payloadType === 1) {
        return new section.SectionType1.fromDocument(payloadType, data);
      }
      return null;
    }
    static fromBuffer(buffer) {
      section._arrangeBuffer(buffer);
      let payloadType = buffer.readByte();
      if (payloadType === 0) {
        return new section.SectionType0.new(payloadType, new payload.Payload0.fromBuffer(buffer));
      } else if (payloadType === 1) {
        return new section.SectionType1.new(payloadType, new payload.Payload1.fromBuffer(buffer));
      }
      return null;
    }
    get byteLength() {
      return 1 + dart.notNull(this.payload.byteLength);
    }
    packValue(buffer) {
      buffer.writeByte(this.payloadType);
      this.payload.packValue(buffer);
    }
  };
  (section.Section.__ = function(payloadType) {
    this[payload$] = null;
    this[payloadType$] = payloadType;
    ;
  }).prototype = section.Section.prototype;
  dart.addTypeTests(section.Section);
  dart.addTypeCaches(section.Section);
  dart.setMethodSignature(section.Section, () => ({
    __proto__: dart.getMethods(section.Section.__proto__),
    packValue: dart.fnType(dart.void, [dart.legacy(bson.BsonBinary)])
  }));
  dart.setGetterSignature(section.Section, () => ({
    __proto__: dart.getGetters(section.Section.__proto__),
    byteLength: dart.legacy(core.int)
  }));
  dart.setLibraryUri(section.Section, I[12]);
  dart.setFieldSignature(section.Section, () => ({
    __proto__: dart.getFields(section.Section.__proto__),
    payloadType: dart.fieldType(dart.legacy(core.int)),
    payload: dart.fieldType(dart.legacy(payload.Payload))
  }));
  section.SectionType0 = class SectionType0 extends section.Section {};
  (section.SectionType0.fromDocument = function(payloadType, document) {
    section.SectionType0.__proto__.__.call(this, payloadType);
    this.payload = new payload.Payload0.new(document);
  }).prototype = section.SectionType0.prototype;
  (section.SectionType0.new = function(payloadType, payload) {
    section.SectionType0.__proto__.__.call(this, payloadType);
    this.payload = payload;
  }).prototype = section.SectionType0.prototype;
  dart.addTypeTests(section.SectionType0);
  dart.addTypeCaches(section.SectionType0);
  dart.setLibraryUri(section.SectionType0, I[12]);
  section.SectionType1 = class SectionType1 extends section.Section {};
  (section.SectionType1.fromDocument = function(payloadType, document) {
    section.SectionType1.__proto__.__.call(this, payloadType);
    if (dart.notNull(document[$length]) > 1) {
      dart.throw(new mongo_dart.MongoDartError.new("Expected only one element in the " + "document while generating section 1"));
    }
    if (!T.ListL().is(document[$values][$first])) {
      dart.throw(new mongo_dart.MongoDartError.new("The value of the document parameter must be a List of documents"));
    }
    let identifier = document[$keys][$first];
    let documents = T.ListLOfMapLOfStringL$ObjectL().as(document[$values][$first]);
    this.payload = new payload.Payload1.new(identifier, documents);
  }).prototype = section.SectionType1.prototype;
  (section.SectionType1.new = function(payloadType, payload) {
    section.SectionType1.__proto__.__.call(this, payloadType);
    this.payload = payload;
  }).prototype = section.SectionType1.prototype;
  dart.addTypeTests(section.SectionType1);
  dart.addTypeCaches(section.SectionType1);
  dart.setLibraryUri(section.SectionType1, I[12]);
  section._arrangeBuffer = function _arrangeBuffer(buffer) {
    if (buffer.byteList == null) {
      buffer.makeByteList();
    } else {
      buffer.makeHexString();
    }
  };
  var maxConnections$ = dart.privateName(mongo_dart, "ConnectionPool.maxConnections");
  var dbFactory$ = dart.privateName(mongo_dart, "ConnectionPool.dbFactory");
  var _connections = dart.privateName(mongo_dart, "_connections");
  var _index = dart.privateName(mongo_dart, "_index");
  var _pool = dart.privateName(mongo_dart, "_pool");
  mongo_dart.ConnectionPool = class ConnectionPool extends core.Object {
    get maxConnections() {
      return this[maxConnections$];
    }
    set maxConnections(value) {
      super.maxConnections = value;
    }
    get dbFactory() {
      return this[dbFactory$];
    }
    set dbFactory(value) {
      super.dbFactory = value;
    }
    connect() {
      return this[_pool].withResource(T.DbL(), dart.fn(() => async.async(T.DbL(), (function*() {
        let i = this[_index];
        if (dart.notNull(this[_index]) >= dart.notNull(this.maxConnections)) this[_index] = 0;
        if (dart.notNull(i) < dart.notNull(this[_connections][$length])) {
          return this[_connections][$_get](i);
        } else {
          let db = (yield this.dbFactory());
          yield db.open();
          this[_connections][$add](db);
          return db;
        }
      }).bind(this)), T.VoidToFutureLOfDbL()));
    }
    close() {
      return async.Future.wait(dart.dynamic, this[_connections][$map](T.FutureL(), dart.fn(c => c.close(), T.DbLToFutureL()))).then(dart.dynamic, dart.fn(_ => this[_pool].close(), T.ListLToFutureL()));
    }
  };
  (mongo_dart.ConnectionPool.new = function(maxConnections, dbFactory) {
    this[_connections] = T.JSArrayOfDbL().of([]);
    this[_index] = 0;
    this[_pool] = null;
    this[maxConnections$] = maxConnections;
    this[dbFactory$] = dbFactory;
    this[_pool] = new pool.Pool.new(this.maxConnections);
  }).prototype = mongo_dart.ConnectionPool.prototype;
  dart.addTypeTests(mongo_dart.ConnectionPool);
  dart.addTypeCaches(mongo_dart.ConnectionPool);
  dart.setMethodSignature(mongo_dart.ConnectionPool, () => ({
    __proto__: dart.getMethods(mongo_dart.ConnectionPool.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.legacy(mongo_dart.Db))), []),
    close: dart.fnType(dart.legacy(async.Future), [])
  }));
  dart.setLibraryUri(mongo_dart.ConnectionPool, I[9]);
  dart.setFieldSignature(mongo_dart.ConnectionPool, () => ({
    __proto__: dart.getFields(mongo_dart.ConnectionPool.__proto__),
    [_connections]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(mongo_dart.Db)))),
    [_index]: dart.fieldType(dart.legacy(core.int)),
    [_pool]: dart.fieldType(dart.legacy(pool.Pool)),
    maxConnections: dart.finalFieldType(dart.legacy(core.int)),
    dbFactory: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(mongo_dart.Db))), [])))
  }));
  var _name$0 = dart.privateName(mongo_dart, "_name");
  mongo_dart.AuthenticationScheme = class AuthenticationScheme extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (mongo_dart.AuthenticationScheme.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = mongo_dart.AuthenticationScheme.prototype;
  dart.addTypeTests(mongo_dart.AuthenticationScheme);
  dart.addTypeCaches(mongo_dart.AuthenticationScheme);
  dart.setMethodSignature(mongo_dart.AuthenticationScheme, () => ({
    __proto__: dart.getMethods(mongo_dart.AuthenticationScheme.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mongo_dart.AuthenticationScheme, I[9]);
  dart.setFieldSignature(mongo_dart.AuthenticationScheme, () => ({
    __proto__: dart.getFields(mongo_dart.AuthenticationScheme.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mongo_dart.AuthenticationScheme, ['toString']);
  mongo_dart.AuthenticationScheme.MONGODB_CR = C[8] || CT.C8;
  mongo_dart.AuthenticationScheme.SCRAM_SHA_1 = C[9] || CT.C9;
  mongo_dart.AuthenticationScheme.values = C[10] || CT.C10;
  mongo_dart.Authenticator = class Authenticator extends core.Object {};
  (mongo_dart.Authenticator.new = function() {
    ;
  }).prototype = mongo_dart.Authenticator.prototype;
  dart.addTypeTests(mongo_dart.Authenticator);
  dart.addTypeCaches(mongo_dart.Authenticator);
  dart.setLibraryUri(mongo_dart.Authenticator, I[9]);
  dart.defineLazy(mongo_dart.Authenticator, {
    /*mongo_dart.Authenticator.name_*/get name_() {
      return null;
    },
    set name_(_) {}
  }, true);
  var username = dart.privateName(mongo_dart, "UsernamePasswordCredential.username");
  var password = dart.privateName(mongo_dart, "UsernamePasswordCredential.password");
  mongo_dart.UsernamePasswordCredential = class UsernamePasswordCredential extends core.Object {
    get username() {
      return this[username];
    }
    set username(value) {
      this[username] = value;
    }
    get password() {
      return this[password];
    }
    set password(value) {
      this[password] = value;
    }
  };
  (mongo_dart.UsernamePasswordCredential.new = function() {
    this[username] = null;
    this[password] = null;
    ;
  }).prototype = mongo_dart.UsernamePasswordCredential.prototype;
  dart.addTypeTests(mongo_dart.UsernamePasswordCredential);
  dart.addTypeCaches(mongo_dart.UsernamePasswordCredential);
  dart.setLibraryUri(mongo_dart.UsernamePasswordCredential, I[9]);
  dart.setFieldSignature(mongo_dart.UsernamePasswordCredential, () => ({
    __proto__: dart.getFields(mongo_dart.UsernamePasswordCredential.__proto__),
    username: dart.fieldType(dart.legacy(core.String)),
    password: dart.fieldType(dart.legacy(core.String))
  }));
  mongo_dart.RandomStringGenerator = class RandomStringGenerator extends core.Object {};
  (mongo_dart.RandomStringGenerator.new = function() {
    ;
  }).prototype = mongo_dart.RandomStringGenerator.prototype;
  dart.addTypeTests(mongo_dart.RandomStringGenerator);
  dart.addTypeCaches(mongo_dart.RandomStringGenerator);
  dart.setLibraryUri(mongo_dart.RandomStringGenerator, I[9]);
  dart.defineLazy(mongo_dart.RandomStringGenerator, {
    /*mongo_dart.RandomStringGenerator.allowedCharacters*/get allowedCharacters() {
      return "!\"#'$%&()*+-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    }
  }, true);
  mongo_dart.CryptoStrengthStringGenerator = class CryptoStrengthStringGenerator extends mongo_dart.RandomStringGenerator {
    generate(length) {
      let random = math.Random.secure();
      let allowedCodeUnits = mongo_dart.RandomStringGenerator.allowedCharacters[$codeUnits];
      let max = dart.notNull(allowedCodeUnits[$length]) - 1;
      let randomString = T.JSArrayOfintL().of([]);
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        randomString[$add](allowedCodeUnits[$elementAt](random.nextInt(max)));
      }
      return core.String.fromCharCodes(randomString);
    }
  };
  (mongo_dart.CryptoStrengthStringGenerator.new = function() {
    ;
  }).prototype = mongo_dart.CryptoStrengthStringGenerator.prototype;
  dart.addTypeTests(mongo_dart.CryptoStrengthStringGenerator);
  dart.addTypeCaches(mongo_dart.CryptoStrengthStringGenerator);
  dart.setMethodSignature(mongo_dart.CryptoStrengthStringGenerator, () => ({
    __proto__: dart.getMethods(mongo_dart.CryptoStrengthStringGenerator.__proto__),
    generate: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mongo_dart.CryptoStrengthStringGenerator, I[9]);
  mongo_dart.SaslMechanism = class SaslMechanism extends core.Object {};
  (mongo_dart.SaslMechanism.new = function() {
    ;
  }).prototype = mongo_dart.SaslMechanism.prototype;
  dart.addTypeTests(mongo_dart.SaslMechanism);
  dart.addTypeCaches(mongo_dart.SaslMechanism);
  dart.setLibraryUri(mongo_dart.SaslMechanism, I[9]);
  var bytesToSendToServer = dart.privateName(mongo_dart, "SaslStep.bytesToSendToServer");
  var isComplete = dart.privateName(mongo_dart, "SaslStep.isComplete");
  mongo_dart.SaslStep = class SaslStep extends core.Object {
    get bytesToSendToServer() {
      return this[bytesToSendToServer];
    }
    set bytesToSendToServer(value) {
      this[bytesToSendToServer] = value;
    }
    get isComplete() {
      return this[isComplete];
    }
    set isComplete(value) {
      this[isComplete] = value;
    }
  };
  (mongo_dart.SaslStep.new = function() {
    this[bytesToSendToServer] = null;
    this[isComplete] = null;
    ;
  }).prototype = mongo_dart.SaslStep.prototype;
  dart.addTypeTests(mongo_dart.SaslStep);
  dart.addTypeCaches(mongo_dart.SaslStep);
  dart.setLibraryUri(mongo_dart.SaslStep, I[9]);
  dart.setFieldSignature(mongo_dart.SaslStep, () => ({
    __proto__: dart.getFields(mongo_dart.SaslStep.__proto__),
    bytesToSendToServer: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    isComplete: dart.fieldType(dart.legacy(core.bool))
  }));
  var connection$ = dart.privateName(mongo_dart, "SaslConversation.connection");
  mongo_dart.SaslConversation = class SaslConversation extends core.Object {
    get connection() {
      return this[connection$];
    }
    set connection(value) {
      this[connection$] = value;
    }
  };
  (mongo_dart.SaslConversation.new = function(connection) {
    this[connection$] = connection;
    ;
  }).prototype = mongo_dart.SaslConversation.prototype;
  dart.addTypeTests(mongo_dart.SaslConversation);
  dart.addTypeCaches(mongo_dart.SaslConversation);
  dart.setLibraryUri(mongo_dart.SaslConversation, I[9]);
  dart.setFieldSignature(mongo_dart.SaslConversation, () => ({
    __proto__: dart.getFields(mongo_dart.SaslConversation.__proto__),
    connection: dart.fieldType(dart.legacy(mongo_dart._Connection))
  }));
  var mechanism$ = dart.privateName(mongo_dart, "SaslAuthenticator.mechanism");
  var db$1 = dart.privateName(mongo_dart, "SaslAuthenticator.db");
  mongo_dart.SaslAuthenticator = class SaslAuthenticator extends mongo_dart.Authenticator {
    get mechanism() {
      return this[mechanism$];
    }
    set mechanism(value) {
      this[mechanism$] = value;
    }
    get db() {
      return this[db$1];
    }
    set db(value) {
      this[db$1] = value;
    }
    authenticate(connection) {
      return async.async(dart.dynamic, (function* authenticate() {
        let t9, t9$;
        let conversation = new mongo_dart.SaslConversation.new(connection);
        let currentStep = this.mechanism.initialize(connection);
        let command = mongo_dart.DbCommand.createSaslStartCommand((t9 = this.db.authSourceDb, t9 == null ? this.db : t9), this.mechanism.name, currentStep.bytesToSendToServer);
        while (true) {
          let result = null;
          result = (yield this.db.executeDbCommand(command, {connection: connection}));
          if (dart.equals(result[$_get]("done"), true) && dart.test(currentStep.isComplete)) {
            break;
          }
          let payload = result[$_get]("payload");
          let payloadAsBytes = convert.base64.decode(dart.toString(payload));
          currentStep = currentStep.transition(conversation, payloadAsBytes);
          let conversationId = T.intL().as(result[$_get]("conversationId"));
          command = mongo_dart.DbCommand.createSaslContinueCommand((t9$ = this.db.authSourceDb, t9$ == null ? this.db : t9$), conversationId, currentStep.bytesToSendToServer);
        }
      }).bind(this));
    }
  };
  (mongo_dart.SaslAuthenticator.new = function(mechanism, db) {
    this[mechanism$] = mechanism;
    this[db$1] = db;
    ;
  }).prototype = mongo_dart.SaslAuthenticator.prototype;
  dart.addTypeTests(mongo_dart.SaslAuthenticator);
  dart.addTypeCaches(mongo_dart.SaslAuthenticator);
  dart.setMethodSignature(mongo_dart.SaslAuthenticator, () => ({
    __proto__: dart.getMethods(mongo_dart.SaslAuthenticator.__proto__),
    authenticate: dart.fnType(dart.legacy(async.Future), [dart.legacy(mongo_dart._Connection)])
  }));
  dart.setLibraryUri(mongo_dart.SaslAuthenticator, I[9]);
  dart.setFieldSignature(mongo_dart.SaslAuthenticator, () => ({
    __proto__: dart.getFields(mongo_dart.SaslAuthenticator.__proto__),
    mechanism: dart.fieldType(dart.legacy(mongo_dart.SaslMechanism)),
    db: dart.fieldType(dart.legacy(mongo_dart.Db))
  }));
  var clientFirstMessageBare$ = dart.privateName(mongo_dart, "ClientFirst.clientFirstMessageBare");
  var credential$ = dart.privateName(mongo_dart, "ClientFirst.credential");
  var rPrefix$ = dart.privateName(mongo_dart, "ClientFirst.rPrefix");
  mongo_dart.ClientFirst = class ClientFirst extends mongo_dart.SaslStep {
    get clientFirstMessageBare() {
      return this[clientFirstMessageBare$];
    }
    set clientFirstMessageBare(value) {
      this[clientFirstMessageBare$] = value;
    }
    get credential() {
      return this[credential$];
    }
    set credential(value) {
      this[credential$] = value;
    }
    get rPrefix() {
      return this[rPrefix$];
    }
    set rPrefix(value) {
      this[rPrefix$] = value;
    }
    transition(conversation, bytesReceivedFromServer) {
      let serverFirstMessage = convert.utf8.decode(bytesReceivedFromServer);
      let decodedMessage = mongo_dart.parsePayload(serverFirstMessage);
      let r = T.StringL().as(decodedMessage[$_get]("r"));
      if (r == null || !r[$startsWith](this.rPrefix)) {
        dart.throw(new mongo_dart.MongoDartError.new("Server sent an invalid nonce."));
      }
      let s = decodedMessage[$_get]("s");
      let i = core.int.parse(dart.toString(decodedMessage[$_get]("i")));
      let gs2Header = "n,,";
      let encodedHeader = convert.base64.encode(convert.utf8.encode(gs2Header));
      let channelBinding = "c=" + dart.str(encodedHeader);
      let nonce = "r=" + dart.str(r);
      let clientFinalMessageWithoutProof = channelBinding + "," + nonce;
      let passwordDigest = mongo_dart.ClientFirst.md5DigestPassword(this.credential.username, this.credential.password);
      let salt = convert.base64.decode(dart.toString(s));
      let saltedPassword = mongo_dart.ClientFirst.hi(passwordDigest, salt, i);
      let clientKey = mongo_dart.ClientFirst.computeHMAC(saltedPassword, "Client Key");
      let storedKey = mongo_dart.ClientFirst.h(clientKey);
      let authMessage = dart.str(this.clientFirstMessageBare) + "," + dart.str(serverFirstMessage) + "," + clientFinalMessageWithoutProof;
      let clientSignature = mongo_dart.ClientFirst.computeHMAC(storedKey, authMessage);
      let clientProof = mongo_dart.ClientFirst.xor(clientKey, clientSignature);
      let serverKey = mongo_dart.ClientFirst.computeHMAC(saltedPassword, "Server Key");
      let serverSignature = mongo_dart.ClientFirst.computeHMAC(serverKey, authMessage);
      let base64clientProof = convert.base64.encode(clientProof);
      let proof = "p=" + dart.str(base64clientProof);
      let clientFinalMessage = clientFinalMessageWithoutProof + "," + proof;
      return new mongo_dart.ClientLast.new(mongo_dart._coerceUint8List(convert.utf8.encode(clientFinalMessage)), serverSignature);
    }
    static computeHMAC(data, key) {
      let sha1 = sha1$.sha1;
      let hmac = new hmac$.Hmac.new(sha1, data);
      hmac.convert(convert.utf8.encode(key));
      return _native_typed_data.NativeUint8List.fromList(hmac.convert(convert.utf8.encode(key)).bytes);
    }
    static h(data) {
      return _native_typed_data.NativeUint8List.fromList(sha1$.sha1.convert(data).bytes);
    }
    static md5DigestPassword(username, password) {
      return dart.toString(md5.md5.convert(convert.utf8.encode(dart.str(username) + ":mongo:" + dart.str(password))));
    }
    static xor(a, b) {
      let result = T.JSArrayOfintL().of([]);
      if (dart.notNull(a[$length]) > dart.notNull(b[$length])) {
        for (let i = 0; i < dart.notNull(b[$length]); i = i + 1) {
          result[$add]((dart.notNull(a[$_get](i)) ^ dart.notNull(b[$_get](i))) >>> 0);
        }
      } else {
        for (let i = 0; i < dart.notNull(a[$length]); i = i + 1) {
          result[$add]((dart.notNull(a[$_get](i)) ^ dart.notNull(b[$_get](i))) >>> 0);
        }
      }
      return _native_typed_data.NativeUint8List.fromList(result);
    }
    static hi(password, salt, iterations) {
      let t9;
      let digest = dart.fn(msg => {
        let hmac = new hmac$.Hmac.new(sha1$.sha1, password[$codeUnits]);
        return _native_typed_data.NativeUint8List.fromList(hmac.convert(msg).bytes);
      }, T.ListLOfintLToUint8ListL());
      let newSalt = _native_typed_data.NativeUint8List.fromList((t9 = T.ListOfintL().from(salt), (() => {
        t9[$addAll](T.JSArrayOfintL().of([0, 0, 0, 1]));
        return t9;
      })()));
      let ui = digest(newSalt);
      let u1 = ui;
      for (let i = 0; i < dart.notNull(iterations) - 1; i = i + 1) {
        u1 = digest(u1);
        ui = mongo_dart.ClientFirst.xor(ui, u1);
      }
      return ui;
    }
  };
  (mongo_dart.ClientFirst.new = function(bytesToSendToServer, credential, clientFirstMessageBare, rPrefix) {
    this[credential$] = credential;
    this[clientFirstMessageBare$] = clientFirstMessageBare;
    this[rPrefix$] = rPrefix;
    mongo_dart.ClientFirst.__proto__.new.call(this);
    this.bytesToSendToServer = bytesToSendToServer;
    this.isComplete = false;
  }).prototype = mongo_dart.ClientFirst.prototype;
  dart.addTypeTests(mongo_dart.ClientFirst);
  dart.addTypeCaches(mongo_dart.ClientFirst);
  dart.setMethodSignature(mongo_dart.ClientFirst, () => ({
    __proto__: dart.getMethods(mongo_dart.ClientFirst.__proto__),
    transition: dart.fnType(dart.legacy(mongo_dart.SaslStep), [dart.legacy(mongo_dart.SaslConversation), dart.legacy(core.List$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(mongo_dart.ClientFirst, I[9]);
  dart.setFieldSignature(mongo_dart.ClientFirst, () => ({
    __proto__: dart.getFields(mongo_dart.ClientFirst.__proto__),
    clientFirstMessageBare: dart.fieldType(dart.legacy(core.String)),
    credential: dart.fieldType(dart.legacy(mongo_dart.UsernamePasswordCredential)),
    rPrefix: dart.fieldType(dart.legacy(core.String))
  }));
  var serverSignature64$ = dart.privateName(mongo_dart, "ClientLast.serverSignature64");
  var IterableEquality__elementEquality = dart.privateName(equality, "IterableEquality._elementEquality");
  mongo_dart.ClientLast = class ClientLast extends mongo_dart.SaslStep {
    get serverSignature64() {
      return this[serverSignature64$];
    }
    set serverSignature64(value) {
      this[serverSignature64$] = value;
    }
    transition(conversation, bytesReceivedFromServer) {
      let decodedMessage = mongo_dart.parsePayload(convert.utf8.decode(bytesReceivedFromServer));
      let serverSignature = convert.base64.decode(dart.toString(decodedMessage[$_get]("v")));
      if (!dart.test((C[11] || CT.C11).equals(this.serverSignature64, serverSignature))) {
        dart.throw(new mongo_dart.MongoDartError.new("Server signature was invalid."));
      }
      return new mongo_dart.CompletedStep.new();
    }
  };
  (mongo_dart.ClientLast.new = function(bytesToSendToServer, serverSignature64) {
    this[serverSignature64$] = serverSignature64;
    mongo_dart.ClientLast.__proto__.new.call(this);
    this.bytesToSendToServer = bytesToSendToServer;
    this.isComplete = false;
  }).prototype = mongo_dart.ClientLast.prototype;
  dart.addTypeTests(mongo_dart.ClientLast);
  dart.addTypeCaches(mongo_dart.ClientLast);
  dart.setMethodSignature(mongo_dart.ClientLast, () => ({
    __proto__: dart.getMethods(mongo_dart.ClientLast.__proto__),
    transition: dart.fnType(dart.legacy(mongo_dart.SaslStep), [dart.legacy(mongo_dart.SaslConversation), dart.legacy(core.List$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(mongo_dart.ClientLast, I[9]);
  dart.setFieldSignature(mongo_dart.ClientLast, () => ({
    __proto__: dart.getFields(mongo_dart.ClientLast.__proto__),
    serverSignature64: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  mongo_dart.CompletedStep = class CompletedStep extends mongo_dart.SaslStep {
    transition(conversation, bytesReceivedFromServer) {
      dart.throw(new mongo_dart.MongoDartError.new("Sasl conversation has completed"));
    }
  };
  (mongo_dart.CompletedStep.new = function() {
    mongo_dart.CompletedStep.__proto__.new.call(this);
    this.bytesToSendToServer = _native_typed_data.NativeUint8List.new(0);
    this.isComplete = true;
  }).prototype = mongo_dart.CompletedStep.prototype;
  dart.addTypeTests(mongo_dart.CompletedStep);
  dart.addTypeCaches(mongo_dart.CompletedStep);
  dart.setMethodSignature(mongo_dart.CompletedStep, () => ({
    __proto__: dart.getMethods(mongo_dart.CompletedStep.__proto__),
    transition: dart.fnType(dart.legacy(mongo_dart.SaslStep), [dart.legacy(mongo_dart.SaslConversation), dart.legacy(core.List$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(mongo_dart.CompletedStep, I[9]);
  var credential$0 = dart.privateName(mongo_dart, "ScramSha1Mechanism.credential");
  var randomStringGenerator$ = dart.privateName(mongo_dart, "ScramSha1Mechanism.randomStringGenerator");
  mongo_dart.ScramSha1Mechanism = class ScramSha1Mechanism extends mongo_dart.SaslMechanism {
    get credential() {
      return this[credential$0];
    }
    set credential(value) {
      super.credential = value;
    }
    get randomStringGenerator() {
      return this[randomStringGenerator$];
    }
    set randomStringGenerator(value) {
      super.randomStringGenerator = value;
    }
    initialize(connection) {
      if (connection == null) dart.throw(new core.ArgumentError.new("Connection can't be null"));
      let gs2Header = "n,,";
      let username = "n=" + dart.str(this.prepUsername(this.credential.username));
      let r = this.randomStringGenerator.generate(20);
      let nonce = "r=" + dart.str(r);
      let clientFirstMessageBare = username + "," + nonce;
      let clientFirstMessage = gs2Header + clientFirstMessageBare;
      return new mongo_dart.ClientFirst.new(mongo_dart._coerceUint8List(convert.utf8.encode(clientFirstMessage)), this.credential, clientFirstMessageBare, r);
    }
    prepUsername(username) {
      return username[$replaceAll]("=", "=3D")[$replaceAll](",", "=2C");
    }
    get name() {
      return mongo_dart.ScramSha1Authenticator.name_;
    }
  };
  (mongo_dart.ScramSha1Mechanism.new = function(credential, randomStringGenerator) {
    this[credential$0] = credential;
    this[randomStringGenerator$] = randomStringGenerator;
    ;
  }).prototype = mongo_dart.ScramSha1Mechanism.prototype;
  dart.addTypeTests(mongo_dart.ScramSha1Mechanism);
  dart.addTypeCaches(mongo_dart.ScramSha1Mechanism);
  dart.setMethodSignature(mongo_dart.ScramSha1Mechanism, () => ({
    __proto__: dart.getMethods(mongo_dart.ScramSha1Mechanism.__proto__),
    initialize: dart.fnType(dart.legacy(mongo_dart.SaslStep), [dart.legacy(mongo_dart._Connection)]),
    prepUsername: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(mongo_dart.ScramSha1Mechanism, () => ({
    __proto__: dart.getGetters(mongo_dart.ScramSha1Mechanism.__proto__),
    name: dart.legacy(core.String)
  }));
  dart.setLibraryUri(mongo_dart.ScramSha1Mechanism, I[9]);
  dart.setFieldSignature(mongo_dart.ScramSha1Mechanism, () => ({
    __proto__: dart.getFields(mongo_dart.ScramSha1Mechanism.__proto__),
    credential: dart.finalFieldType(dart.legacy(mongo_dart.UsernamePasswordCredential)),
    randomStringGenerator: dart.finalFieldType(dart.legacy(mongo_dart.RandomStringGenerator))
  }));
  mongo_dart.ScramSha1Authenticator = class ScramSha1Authenticator extends mongo_dart.SaslAuthenticator {};
  (mongo_dart.ScramSha1Authenticator.new = function(credential, db) {
    mongo_dart.ScramSha1Authenticator.__proto__.new.call(this, new mongo_dart.ScramSha1Mechanism.new(credential, new mongo_dart.CryptoStrengthStringGenerator.new()), db);
    this.db = db;
  }).prototype = mongo_dart.ScramSha1Authenticator.prototype;
  dart.addTypeTests(mongo_dart.ScramSha1Authenticator);
  dart.addTypeCaches(mongo_dart.ScramSha1Authenticator);
  dart.setLibraryUri(mongo_dart.ScramSha1Authenticator, I[9]);
  dart.defineLazy(mongo_dart.ScramSha1Authenticator, {
    /*mongo_dart.ScramSha1Authenticator.name_*/get name_() {
      return "SCRAM-SHA-1";
    },
    set name_(_) {}
  }, true);
  var db$2 = dart.privateName(mongo_dart, "MongoDbCRAuthenticator.db");
  var credentials$ = dart.privateName(mongo_dart, "MongoDbCRAuthenticator.credentials");
  mongo_dart.MongoDbCRAuthenticator = class MongoDbCRAuthenticator extends mongo_dart.Authenticator {
    get db() {
      return this[db$2];
    }
    set db(value) {
      super.db = value;
    }
    get credentials() {
      return this[credentials$];
    }
    set credentials(value) {
      super.credentials = value;
    }
    authenticate(connection) {
      return this.db.getNonce({connection: connection}).then(T.MapLOfStringL$dynamic(), dart.fn(msg => {
        let nonce = msg[$_get]("nonce");
        let command = mongo_dart.MongoDbCRAuthenticator.createMongoDbCrAuthenticationCommand(this.db, this.credentials, dart.toString(nonce));
        return this.db.executeDbCommand(command, {connection: connection});
      }, T.MapLOfStringL$dynamicToFutureLOfMapLOfStringL$dynamic())).then(dart.dynamic, dart.fn(res => dart.equals(res[$_get]("ok"), 1), T.MapLOfStringL$dynamicToboolL()));
    }
    static createMongoDbCrAuthenticationCommand(db, credentials, nonce) {
      let t9;
      let hashed_password = dart.toString(md5.md5.convert((dart.str(credentials.username) + ":mongo:" + dart.str(credentials.password))[$codeUnits]));
      let key = dart.toString(md5.md5.convert((dart.str(nonce) + dart.str(credentials.username) + dart.str(hashed_password))[$codeUnits]));
      let selector = new (T.IdentityMapOfStringL$ObjectL()).from(["authenticate", 1, "user", credentials.username, "nonce", nonce, "key", key]);
      return new mongo_dart.DbCommand.new((t9 = db.authSourceDb, t9 == null ? db : t9), mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NONE, 0, -1, selector, null);
    }
  };
  (mongo_dart.MongoDbCRAuthenticator.new = function(db, credentials) {
    this[db$2] = db;
    this[credentials$] = credentials;
    ;
  }).prototype = mongo_dart.MongoDbCRAuthenticator.prototype;
  dart.addTypeTests(mongo_dart.MongoDbCRAuthenticator);
  dart.addTypeCaches(mongo_dart.MongoDbCRAuthenticator);
  dart.setMethodSignature(mongo_dart.MongoDbCRAuthenticator, () => ({
    __proto__: dart.getMethods(mongo_dart.MongoDbCRAuthenticator.__proto__),
    authenticate: dart.fnType(dart.legacy(async.Future), [dart.legacy(mongo_dart._Connection)])
  }));
  dart.setLibraryUri(mongo_dart.MongoDbCRAuthenticator, I[9]);
  dart.setFieldSignature(mongo_dart.MongoDbCRAuthenticator, () => ({
    __proto__: dart.getFields(mongo_dart.MongoDbCRAuthenticator.__proto__),
    db: dart.finalFieldType(dart.legacy(mongo_dart.Db)),
    credentials: dart.finalFieldType(dart.legacy(mongo_dart.UsernamePasswordCredential))
  }));
  dart.defineLazy(mongo_dart.MongoDbCRAuthenticator, {
    /*mongo_dart.MongoDbCRAuthenticator.name_*/get name_() {
      return "MONGODB-CR";
    }
  }, true);
  var state = dart.privateName(mongo_dart, "Cursor.state");
  var cursorId = dart.privateName(mongo_dart, "Cursor.cursorId");
  var db$3 = dart.privateName(mongo_dart, "Cursor.db");
  var items = dart.privateName(mongo_dart, "Cursor.items");
  var collection$2 = dart.privateName(mongo_dart, "Cursor.collection");
  var selector = dart.privateName(mongo_dart, "Cursor.selector");
  var fields = dart.privateName(mongo_dart, "Cursor.fields");
  var skip = dart.privateName(mongo_dart, "Cursor.skip");
  var limit = dart.privateName(mongo_dart, "Cursor.limit");
  var sort = dart.privateName(mongo_dart, "Cursor.sort");
  var hint = dart.privateName(mongo_dart, "Cursor.hint");
  var eachCallback = dart.privateName(mongo_dart, "Cursor.eachCallback");
  var eachComplete = dart.privateName(mongo_dart, "Cursor.eachComplete");
  var explain = dart.privateName(mongo_dart, "Cursor.explain");
  var flags$ = dart.privateName(mongo_dart, "Cursor.flags");
  var tailableRetryInterval = dart.privateName(mongo_dart, "Cursor.tailableRetryInterval");
  var _log = dart.privateName(mongo_dart, "_log");
  var _returnedCount = dart.privateName(mongo_dart, "_returnedCount");
  var _getNextItem = dart.privateName(mongo_dart, "_getNextItem");
  mongo_dart.Cursor = class Cursor extends core.Object {
    get state() {
      return this[state];
    }
    set state(value) {
      this[state] = value;
    }
    get cursorId() {
      return this[cursorId];
    }
    set cursorId(value) {
      this[cursorId] = value;
    }
    get db() {
      return this[db$3];
    }
    set db(value) {
      this[db$3] = value;
    }
    get items() {
      return this[items];
    }
    set items(value) {
      this[items] = value;
    }
    get collection() {
      return this[collection$2];
    }
    set collection(value) {
      this[collection$2] = value;
    }
    get selector() {
      return this[selector];
    }
    set selector(value) {
      this[selector] = value;
    }
    get fields() {
      return this[fields];
    }
    set fields(value) {
      this[fields] = value;
    }
    get skip() {
      return this[skip];
    }
    set skip(value) {
      this[skip] = value;
    }
    get limit() {
      return this[limit];
    }
    set limit(value) {
      this[limit] = value;
    }
    get sort() {
      return this[sort];
    }
    set sort(value) {
      this[sort] = value;
    }
    get hint() {
      return this[hint];
    }
    set hint(value) {
      this[hint] = value;
    }
    get eachCallback() {
      return this[eachCallback];
    }
    set eachCallback(value) {
      this[eachCallback] = value;
    }
    get eachComplete() {
      return this[eachComplete];
    }
    set eachComplete(value) {
      this[eachComplete] = value;
    }
    get explain() {
      return this[explain];
    }
    set explain(value) {
      this[explain] = value;
    }
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      this[flags$] = value;
    }
    get tailableRetryInterval() {
      return this[tailableRetryInterval];
    }
    set tailableRetryInterval(value) {
      this[tailableRetryInterval] = value;
    }
    set tailable(value) {
      return dart.test(value) ? this.flags = (dart.notNull(this.flags) | dart.notNull(mongo_dart.MongoQueryMessage.OPTS_TAILABLE_CURSOR)) >>> 0 : this.flags = (dart.notNull(this.flags) & ~dart.notNull(mongo_dart.MongoQueryMessage.OPTS_TAILABLE_CURSOR) >>> 0) >>> 0;
    }
    get tailable() {
      return (dart.notNull(this.flags) & dart.notNull(mongo_dart.MongoQueryMessage.OPTS_TAILABLE_CURSOR)) !== 0;
    }
    set slaveOk(value) {
      return dart.test(value) ? this.flags = (dart.notNull(this.flags) | dart.notNull(mongo_dart.MongoQueryMessage.OPTS_SLAVE)) >>> 0 : this.flags = (dart.notNull(this.flags) & ~dart.notNull(mongo_dart.MongoQueryMessage.OPTS_SLAVE) >>> 0) >>> 0;
    }
    get slaveOk() {
      return (dart.notNull(this.flags) & dart.notNull(mongo_dart.MongoQueryMessage.OPTS_SLAVE)) !== 0;
    }
    set timeout(value) {
      return !dart.test(value) ? this.flags = (dart.notNull(this.flags) | dart.notNull(mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT)) >>> 0 : this.flags = (dart.notNull(this.flags) & ~dart.notNull(mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT) >>> 0) >>> 0;
    }
    get timeout() {
      return (dart.notNull(this.flags) & dart.notNull(mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT)) === 0;
    }
    set awaitData(value) {
      return dart.test(value) ? this.flags = (dart.notNull(this.flags) | dart.notNull(mongo_dart.MongoQueryMessage.OPTS_AWAIT_DATA)) >>> 0 : this.flags = (dart.notNull(this.flags) & ~dart.notNull(mongo_dart.MongoQueryMessage.OPTS_AWAIT_DATA) >>> 0) >>> 0;
    }
    get awaitData() {
      return (dart.notNull(this.flags) & dart.notNull(mongo_dart.MongoQueryMessage.OPTS_AWAIT_DATA)) !== 0;
    }
    set exhaust(value) {
      return dart.test(value) ? this.flags = (dart.notNull(this.flags) | dart.notNull(mongo_dart.MongoQueryMessage.OPTS_EXHAUST)) >>> 0 : this.flags = (dart.notNull(this.flags) & ~dart.notNull(mongo_dart.MongoQueryMessage.OPTS_EXHAUST) >>> 0) >>> 0;
    }
    get exhaust() {
      return (dart.notNull(this.flags) & dart.notNull(mongo_dart.MongoQueryMessage.OPTS_EXHAUST)) !== 0;
    }
    set partial(value) {
      return dart.test(value) ? this.flags = (dart.notNull(this.flags) | dart.notNull(mongo_dart.MongoQueryMessage.OPTS_PARTIAL)) >>> 0 : this.flags = (dart.notNull(this.flags) & ~dart.notNull(mongo_dart.MongoQueryMessage.OPTS_PARTIAL) >>> 0) >>> 0;
    }
    get partial() {
      return (dart.notNull(this.flags) & dart.notNull(mongo_dart.MongoQueryMessage.OPTS_PARTIAL)) !== 0;
    }
    generateQueryMessage() {
      return new mongo_dart.MongoQueryMessage.new(this.collection.fullName(), this.flags, this.skip, this.limit, this.selector, this.fields);
    }
    generateGetMoreMessage() {
      return new mongo_dart.MongoGetMoreMessage.new(this.collection.fullName(), this.cursorId);
    }
    [_getNextItem]() {
      this[_returnedCount] = dart.notNull(this[_returnedCount]) + 1;
      return this.items.removeFirst();
    }
    getCursorData(replyMessage) {
      this.cursorId = replyMessage.cursorId;
      this.items.addAll(replyMessage.documents);
    }
    nextObject() {
      if (dart.equals(this.state, mongo_dart.State.INIT)) {
        let qm = this.generateQueryMessage();
        return this.db.queryMessage(qm).then(T.MapLOfStringL$dynamic(), dart.fn(replyMessage => {
          this.state = mongo_dart.State.OPEN;
          this.getCursorData(replyMessage);
          if (dart.test(this.items[$isNotEmpty])) {
            return T.FutureOfMapLOfStringL$dynamic().value(this[_getNextItem]());
          } else {
            return T.FutureOfMapLOfStringL$dynamic().value(null);
          }
        }, T.MongoReplyMessageLToFutureLOfMapLOfStringL$dynamic()));
      } else if (dart.equals(this.state, mongo_dart.State.OPEN) && dart.notNull(this.limit) > 0 && this[_returnedCount] == this.limit) {
        return this.close();
      } else if (dart.equals(this.state, mongo_dart.State.OPEN) && dart.test(this.items[$isNotEmpty])) {
        return T.FutureOfMapLOfStringL$dynamic().value(this[_getNextItem]());
      } else if (dart.equals(this.state, mongo_dart.State.OPEN) && dart.notNull(this.cursorId) > 0) {
        let qm = this.generateGetMoreMessage();
        return this.db.queryMessage(qm).then(T.MapLOfStringL$dynamic(), dart.fn(replyMessage => {
          this.state = mongo_dart.State.OPEN;
          this.getCursorData(replyMessage);
          let isDead = replyMessage.responseFlags == mongo_dart.MongoReplyMessage.FLAGS_CURSOR_NOT_FOUND && this.cursorId === 0;
          if (dart.test(this.items[$isNotEmpty])) {
            return T.FutureOfMapLOfStringL$dynamic().value(this[_getNextItem]());
          } else if (dart.test(this.tailable) && !isDead && dart.test(this.awaitData)) {
            return T.FutureOfMapLOfStringL$dynamic().value(null);
          } else if (dart.test(this.tailable) && !isDead) {
            let completer = T.CompleterOfMapLOfStringL$dynamic().new();
            async.Timer.new(new core.Duration.new({milliseconds: this.tailableRetryInterval}), dart.fn(() => completer.complete(null), T.VoidTovoid()));
            return completer.future;
          } else {
            this.state = mongo_dart.State.CLOSED;
            return T.FutureOfMapLOfStringL$dynamic().value(null);
          }
        }, T.MongoReplyMessageLToFutureLOfMapLOfStringL$dynamic()));
      } else {
        this.state = mongo_dart.State.CLOSED;
        return T.FutureOfMapLOfStringL$dynamic().value(null);
      }
    }
    close() {
      this.state = mongo_dart.State.CLOSED;
      if (this.cursorId !== 0) {
        let msg = new mongo_dart.MongoKillCursorsMessage.new(this.cursorId);
        this.cursorId = 0;
        this.db.executeMessage(msg, mongo_dart.WriteConcern.UNACKNOWLEDGED);
      }
      return T.FutureOfNull().value(null);
    }
    get stream() {
      return new (T._AsyncStarImplOfMapLOfStringL$dynamic()).new((function* stream(stream) {
        let doc = (yield this.nextObject());
        while (doc != null) {
          if (stream.add(doc)) return;
          yield;
          doc = (yield this.nextObject());
        }
      }).bind(this)).stream;
    }
  };
  (mongo_dart.Cursor.new = function(db, collection, selectorBuilderOrMap) {
    this[_log] = logger.Logger.new("Cursor");
    this[state] = mongo_dart.State.INIT;
    this[cursorId] = 0;
    this[items] = null;
    this[selector] = null;
    this[fields] = null;
    this[skip] = 0;
    this[limit] = 0;
    this[_returnedCount] = 0;
    this[sort] = null;
    this[hint] = null;
    this[eachCallback] = null;
    this[eachComplete] = null;
    this[explain] = null;
    this[flags$] = 0;
    this[tailableRetryInterval] = 100;
    this[db$3] = db;
    this[collection$2] = collection;
    if (selectorBuilderOrMap == null) {
      this.selector = new (T.IdentityMapOfStringL$dynamic()).new();
    } else if (T.SelectorBuilderL().is(selectorBuilderOrMap)) {
      this.selector = selectorBuilderOrMap.map;
      this.fields = selectorBuilderOrMap.paramFields;
      this.limit = selectorBuilderOrMap.paramLimit;
      this.skip = selectorBuilderOrMap.paramSkip;
    } else if (T.MapL().is(selectorBuilderOrMap)) {
      this.selector = T.MapLOfStringL$dynamic().as(selectorBuilderOrMap);
    } else {
      dart.throw(new core.ArgumentError.new("Expected SelectorBuilder or Map, got " + dart.str(selectorBuilderOrMap)));
    }
    this.items = new (T.ListQueueOfMapLOfStringL$dynamic()).new();
  }).prototype = mongo_dart.Cursor.prototype;
  dart.addTypeTests(mongo_dart.Cursor);
  dart.addTypeCaches(mongo_dart.Cursor);
  dart.setMethodSignature(mongo_dart.Cursor, () => ({
    __proto__: dart.getMethods(mongo_dart.Cursor.__proto__),
    generateQueryMessage: dart.fnType(dart.legacy(mongo_dart.MongoQueryMessage), []),
    generateGetMoreMessage: dart.fnType(dart.legacy(mongo_dart.MongoGetMoreMessage), []),
    [_getNextItem]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    getCursorData: dart.fnType(dart.void, [dart.legacy(mongo_dart.MongoReplyMessage)]),
    nextObject: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), []),
    close: dart.fnType(dart.legacy(async.Future$(core.Null)), [])
  }));
  dart.setGetterSignature(mongo_dart.Cursor, () => ({
    __proto__: dart.getGetters(mongo_dart.Cursor.__proto__),
    tailable: dart.legacy(core.bool),
    slaveOk: dart.legacy(core.bool),
    timeout: dart.legacy(core.bool),
    awaitData: dart.legacy(core.bool),
    exhaust: dart.legacy(core.bool),
    partial: dart.legacy(core.bool),
    stream: dart.legacy(async.Stream$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))))
  }));
  dart.setSetterSignature(mongo_dart.Cursor, () => ({
    __proto__: dart.getSetters(mongo_dart.Cursor.__proto__),
    tailable: dart.legacy(core.bool),
    slaveOk: dart.legacy(core.bool),
    timeout: dart.legacy(core.bool),
    awaitData: dart.legacy(core.bool),
    exhaust: dart.legacy(core.bool),
    partial: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(mongo_dart.Cursor, I[9]);
  dart.setFieldSignature(mongo_dart.Cursor, () => ({
    __proto__: dart.getFields(mongo_dart.Cursor.__proto__),
    [_log]: dart.finalFieldType(dart.legacy(logger.Logger)),
    state: dart.fieldType(dart.legacy(mongo_dart.State)),
    cursorId: dart.fieldType(dart.legacy(core.int)),
    db: dart.fieldType(dart.legacy(mongo_dart.Db)),
    items: dart.fieldType(dart.legacy(collection.Queue$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))))),
    collection: dart.fieldType(dart.legacy(mongo_dart.DbCollection)),
    selector: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    fields: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    skip: dart.fieldType(dart.legacy(core.int)),
    limit: dart.fieldType(dart.legacy(core.int)),
    [_returnedCount]: dart.fieldType(dart.legacy(core.int)),
    sort: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    hint: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    eachCallback: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]))),
    eachComplete: dart.fieldType(dart.dynamic),
    explain: dart.fieldType(dart.legacy(core.bool)),
    flags: dart.fieldType(dart.legacy(core.int)),
    tailableRetryInterval: dart.fieldType(dart.legacy(core.int))
  }));
  var firstBatch = dart.privateName(mongo_dart, "CommandCursor.firstBatch");
  mongo_dart.CommandCursor = class CommandCursor extends mongo_dart.Cursor {
    get firstBatch() {
      return this[firstBatch];
    }
    set firstBatch(value) {
      this[firstBatch] = value;
    }
    generateQueryMessage() {
      dart.throw(new core.UnimplementedError.new());
    }
    getCursorData(replyMessage) {
      if (dart.test(this.firstBatch)) {
        this.firstBatch = false;
        let cursorMap = replyMessage.documents[$first][$_get]("cursor");
        if (cursorMap != null) {
          this.cursorId = T.intL().as(dart.dsend(cursorMap, '_get', ["id"]));
          let firstBatch = T.ListL().as(dart.dsend(cursorMap, '_get', ["firstBatch"]));
          this.items.addAll(T.ListOfMapLOfStringL$dynamic().from(firstBatch));
        }
      } else {
        super.getCursorData(replyMessage);
      }
    }
  };
  (mongo_dart.CommandCursor.new = function(db, collection, selectorBuilderOrMap) {
    this[firstBatch] = true;
    mongo_dart.CommandCursor.__proto__.new.call(this, db, collection, selectorBuilderOrMap);
    ;
  }).prototype = mongo_dart.CommandCursor.prototype;
  dart.addTypeTests(mongo_dart.CommandCursor);
  dart.addTypeCaches(mongo_dart.CommandCursor);
  dart.setLibraryUri(mongo_dart.CommandCursor, I[9]);
  dart.setFieldSignature(mongo_dart.CommandCursor, () => ({
    __proto__: dart.getFields(mongo_dart.CommandCursor.__proto__),
    firstBatch: dart.fieldType(dart.legacy(core.bool))
  }));
  var pipeline$ = dart.privateName(mongo_dart, "AggregateCursor.pipeline");
  var cursorOptions$ = dart.privateName(mongo_dart, "AggregateCursor.cursorOptions");
  var allowDiskUse$ = dart.privateName(mongo_dart, "AggregateCursor.allowDiskUse");
  mongo_dart.AggregateCursor = class AggregateCursor extends mongo_dart.CommandCursor {
    get pipeline() {
      return this[pipeline$];
    }
    set pipeline(value) {
      this[pipeline$] = value;
    }
    get cursorOptions() {
      return this[cursorOptions$];
    }
    set cursorOptions(value) {
      this[cursorOptions$] = value;
    }
    get allowDiskUse() {
      return this[allowDiskUse$];
    }
    set allowDiskUse(value) {
      this[allowDiskUse$] = value;
    }
    generateQueryMessage() {
      return new mongo_dart.DbCommand.new(this.db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, new (T.IdentityMapOfStringL$dynamic()).from(["aggregate", this.collection.collectionName, "pipeline", this.pipeline, "cursor", this.cursorOptions, "allowDiskUse", this.allowDiskUse]), null);
    }
  };
  (mongo_dart.AggregateCursor.new = function(db, collection, pipeline, cursorOptions, allowDiskUse) {
    this[pipeline$] = pipeline;
    this[cursorOptions$] = cursorOptions;
    this[allowDiskUse$] = allowDiskUse;
    mongo_dart.AggregateCursor.__proto__.new.call(this, db, collection, new (T.IdentityMapOfStringL$dynamic()).new());
    ;
  }).prototype = mongo_dart.AggregateCursor.prototype;
  dart.addTypeTests(mongo_dart.AggregateCursor);
  dart.addTypeCaches(mongo_dart.AggregateCursor);
  dart.setLibraryUri(mongo_dart.AggregateCursor, I[9]);
  dart.setFieldSignature(mongo_dart.AggregateCursor, () => ({
    __proto__: dart.getFields(mongo_dart.AggregateCursor.__proto__),
    pipeline: dart.fieldType(dart.legacy(core.List)),
    cursorOptions: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    allowDiskUse: dart.fieldType(dart.legacy(core.bool))
  }));
  mongo_dart.ListCollectionsCursor = class ListCollectionsCursor extends mongo_dart.CommandCursor {
    generateQueryMessage() {
      return new mongo_dart.DbCommand.new(this.db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, new (T.IdentityMapOfStringL$dynamic()).from(["listCollections", 1, "filter", this.selector]), null);
    }
  };
  (mongo_dart.ListCollectionsCursor.new = function(db, selector) {
    mongo_dart.ListCollectionsCursor.__proto__.new.call(this, db, null, selector);
    ;
  }).prototype = mongo_dart.ListCollectionsCursor.prototype;
  dart.addTypeTests(mongo_dart.ListCollectionsCursor);
  dart.addTypeCaches(mongo_dart.ListCollectionsCursor);
  dart.setLibraryUri(mongo_dart.ListCollectionsCursor, I[9]);
  mongo_dart.ListIndexesCursor = class ListIndexesCursor extends mongo_dart.CommandCursor {
    generateQueryMessage() {
      return new mongo_dart.DbCommand.new(this.db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, new (T.IdentityMapOfStringL$dynamic()).from(["listIndexes", this.collection.collectionName]), null);
    }
  };
  (mongo_dart.ListIndexesCursor.new = function(db, collection) {
    mongo_dart.ListIndexesCursor.__proto__.new.call(this, db, collection, new (T.IdentityMapOfStringL$dynamic()).new());
    ;
  }).prototype = mongo_dart.ListIndexesCursor.prototype;
  dart.addTypeTests(mongo_dart.ListIndexesCursor);
  dart.addTypeCaches(mongo_dart.ListIndexesCursor);
  dart.setLibraryUri(mongo_dart.ListIndexesCursor, I[9]);
  var w$ = dart.privateName(mongo_dart, "WriteConcern.w");
  var wtimeout$ = dart.privateName(mongo_dart, "WriteConcern.wtimeout");
  var fsync$ = dart.privateName(mongo_dart, "WriteConcern.fsync");
  var j$ = dart.privateName(mongo_dart, "WriteConcern.j");
  mongo_dart.WriteConcern = class WriteConcern extends core.Object {
    get w() {
      return this[w$];
    }
    set w(value) {
      super.w = value;
    }
    get wtimeout() {
      return this[wtimeout$];
    }
    set wtimeout(value) {
      super.wtimeout = value;
    }
    get fsync() {
      return this[fsync$];
    }
    set fsync(value) {
      super.fsync = value;
    }
    get j() {
      return this[j$];
    }
    set j(value) {
      super.j = value;
    }
    get command() {
      let map = new (T.IdentityMapOfStringL$dynamic()).new();
      map[$_set]("getlasterror", 1);
      if (this.w != null) {
        map[$_set]("w", this.w);
      }
      if (this.wtimeout != null) {
        map[$_set]("wtimeout", this.wtimeout);
      }
      if (this.fsync != null) {
        map[$_set]("fsync", this.fsync);
      }
      if (this.j != null) {
        map[$_set]("j", this.j);
      }
      return map;
    }
    asMap(serverStatus) {
      let ret = new (T.IdentityMapOfStringL$ObjectL()).new();
      if (this.w != null) {
        ret[$_set]("w", this.w);
      }
      if (this.wtimeout != null) {
        ret[$_set]("wtimeout", this.wtimeout);
      }
      if (dart.test(serverStatus.isPersistent)) {
        if (this.j != null) {
          ret[$_set]("j", this.j);
        }
        if (this.fsync != null && this.j !== true) {
          if (dart.test(serverStatus.isJournaled)) {
            ret[$_set]("j", this.fsync);
          } else {
            ret[$_set]("fsync", this.fsync);
          }
        }
      }
      return ret;
    }
  };
  (mongo_dart.WriteConcern.new = function(opts) {
    let w = opts && 'w' in opts ? opts.w : null;
    let wtimeout = opts && 'wtimeout' in opts ? opts.wtimeout : null;
    let fsync = opts && 'fsync' in opts ? opts.fsync : null;
    let j = opts && 'j' in opts ? opts.j : null;
    this[w$] = w;
    this[wtimeout$] = wtimeout;
    this[fsync$] = fsync;
    this[j$] = j;
    ;
  }).prototype = mongo_dart.WriteConcern.prototype;
  dart.addTypeTests(mongo_dart.WriteConcern);
  dart.addTypeCaches(mongo_dart.WriteConcern);
  dart.setMethodSignature(mongo_dart.WriteConcern, () => ({
    __proto__: dart.getMethods(mongo_dart.WriteConcern.__proto__),
    asMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))), [dart.legacy(server_status.ServerStatus)])
  }));
  dart.setGetterSignature(mongo_dart.WriteConcern, () => ({
    __proto__: dart.getGetters(mongo_dart.WriteConcern.__proto__),
    command: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))
  }));
  dart.setLibraryUri(mongo_dart.WriteConcern, I[9]);
  dart.setFieldSignature(mongo_dart.WriteConcern, () => ({
    __proto__: dart.getFields(mongo_dart.WriteConcern.__proto__),
    w: dart.finalFieldType(dart.dynamic),
    wtimeout: dart.finalFieldType(dart.legacy(core.int)),
    fsync: dart.finalFieldType(dart.legacy(core.bool)),
    j: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(mongo_dart.WriteConcern, {
    /*mongo_dart.WriteConcern.ERRORS_IGNORED*/get ERRORS_IGNORED() {
      return C[13] || CT.C13;
    },
    /*mongo_dart.WriteConcern.UNACKNOWLEDGED*/get UNACKNOWLEDGED() {
      return C[14] || CT.C14;
    },
    /*mongo_dart.WriteConcern.ACKNOWLEDGED*/get ACKNOWLEDGED() {
      return C[15] || CT.C15;
    },
    /*mongo_dart.WriteConcern.REPLICA_ACKNOWLEDGED*/get REPLICA_ACKNOWLEDGED() {
      return C[16] || CT.C16;
    },
    /*mongo_dart.WriteConcern.FSYNCED*/get FSYNCED() {
      return C[17] || CT.C17;
    },
    /*mongo_dart.WriteConcern.JOURNALED*/get JOURNALED() {
      return C[18] || CT.C18;
    },
    /*mongo_dart.WriteConcern.MAJORITY*/get MAJORITY() {
      return C[19] || CT.C19;
    }
  }, true);
  mongo_dart._UriParameters = class _UriParameters extends core.Object {};
  (mongo_dart._UriParameters.new = function() {
    ;
  }).prototype = mongo_dart._UriParameters.prototype;
  dart.addTypeTests(mongo_dart._UriParameters);
  dart.addTypeCaches(mongo_dart._UriParameters);
  dart.setLibraryUri(mongo_dart._UriParameters, I[9]);
  dart.defineLazy(mongo_dart._UriParameters, {
    /*mongo_dart._UriParameters.authMechanism*/get authMechanism() {
      return "authMechanism";
    },
    /*mongo_dart._UriParameters.authSource*/get authSource() {
      return "authSource";
    },
    /*mongo_dart._UriParameters.tls*/get tls() {
      return "tls";
    },
    /*mongo_dart._UriParameters.ssl*/get ssl() {
      return "ssl";
    }
  }, true);
  var state$ = dart.privateName(mongo_dart, "Db.state");
  var databaseName$ = dart.privateName(mongo_dart, "Db.databaseName");
  var authSourceDb = dart.privateName(mongo_dart, "Db.authSourceDb");
  var readPreference = dart.privateName(mongo_dart, "Db.readPreference");
  var _uriList = dart.privateName(mongo_dart, "_uriList");
  var _connectionManager = dart.privateName(mongo_dart, "_connectionManager");
  var _writeConcern = dart.privateName(mongo_dart, "_writeConcern");
  var _authenticationScheme = dart.privateName(mongo_dart, "_authenticationScheme");
  var _debugInfo$ = dart.privateName(mongo_dart, "_debugInfo");
  var _masterConnection = dart.privateName(mongo_dart, "_masterConnection");
  var _masterConnectionVerified = dart.privateName(mongo_dart, "_masterConnectionVerified");
  var _parseUri = dart.privateName(mongo_dart, "_parseUri");
  var _getAcknowledgement = dart.privateName(mongo_dart, "_getAcknowledgement");
  var _listCollectionsCursor = dart.privateName(mongo_dart, "_listCollectionsCursor");
  var _collectionsInfoCursor = dart.privateName(mongo_dart, "_collectionsInfoCursor");
  var _createIndexName = dart.privateName(mongo_dart, "_createIndexName");
  var _setKeys = dart.privateName(mongo_dart, "_setKeys");
  mongo_dart.Db = class Db extends core.Object {
    get state() {
      return this[state$];
    }
    set state(value) {
      this[state$] = value;
    }
    get databaseName() {
      return this[databaseName$];
    }
    set databaseName(value) {
      this[databaseName$] = value;
    }
    get authSourceDb() {
      return this[authSourceDb];
    }
    set authSourceDb(value) {
      this[authSourceDb] = value;
    }
    get readPreference() {
      return this[readPreference];
    }
    set readPreference(value) {
      this[readPreference] = value;
    }
    get [_masterConnection]() {
      return this[_connectionManager].masterConnection;
    }
    get [_masterConnectionVerified]() {
      if (!dart.equals(this.state, mongo_dart.State.OPEN)) {
        dart.throw(new mongo_dart.MongoDartError.new("The required operation can be executed only when the db is open"));
      }
      return this[_connectionManager].masterConnectionVerified;
    }
    toString() {
      return "Db(" + dart.str(this.databaseName) + "," + dart.str(this[_debugInfo$]) + ")";
    }
    static create(uriString, _debugInfo = null) {
      return async.async(T.DbL(), function* create() {
        if (uriString[$startsWith]("mongodb://")) {
          return new mongo_dart.Db.new(uriString, _debugInfo);
        } else if (uriString[$startsWith]("mongodb+srv://")) {
          let uriList = (yield dns_lookup.decodeDnsSeedlist(core.Uri.parse(uriString)));
          return new mongo_dart.Db.pool(uriList, _debugInfo);
        } else {
          dart.throw(new mongo_dart.MongoDartError.new("The only valid schemas for Db are: \"mongodb\" and \"mongodb+srv\"."));
        }
      });
    }
    get writeConcern() {
      return this[_writeConcern];
    }
    get masterConnection() {
      return this[_connectionManager].masterConnection;
    }
    get uriList() {
      return this[_uriList][$toList]();
    }
    [_parseUri](uriString, opts) {
      let t9, t9$;
      let isSecure = opts && 'isSecure' in opts ? opts.isSecure : null;
      isSecure == null ? isSecure = false : null;
      let uri = core.Uri.parse(uriString);
      if (uri.scheme !== "mongodb") {
        dart.throw(new mongo_dart.MongoDartError.new("Invalid scheme in uri: " + dart.str(uriString) + " " + dart.str(uri.scheme)));
      }
      uri.queryParameters[$forEach](dart.fn((queryParam, value) => {
        if (queryParam === "authMechanism") {
          this.selectAuthenticationMechanism(value);
        }
        if (queryParam === "authSource") {
          this.authSourceDb = new mongo_dart.Db._authDb(value);
        }
        if ((queryParam === "tls" || queryParam === "ssl") && value === "true") {
          isSecure = true;
        }
      }, T.StringLAndStringLToNull()));
      let serverConfig = new mongo_dart.ServerConfig.new((t9 = uri.host, t9 == null ? "127.0.0.1" : t9), (t9$ = uri.port, t9$ == null ? 27017 : t9$), isSecure);
      if (serverConfig.port === 0) {
        serverConfig.port = 27017;
      }
      if (uri.userInfo[$isNotEmpty]) {
        let userInfo = uri.userInfo[$split](":");
        if (userInfo[$length] !== 2) {
          dart.throw(new mongo_dart.MongoDartError.new("Invalid format of userInfo field: " + dart.str(uri) + ".userInfo"));
        }
        serverConfig.userName = core.Uri.decodeComponent(userInfo[$_get](0));
        serverConfig.password = core.Uri.decodeComponent(userInfo[$_get](1));
      }
      if (uri.path[$isNotEmpty]) {
        this.databaseName = uri.path[$replaceAll]("/", "");
      }
      return serverConfig;
    }
    selectAuthenticationMechanism(authenticationSchemeName) {
      if (authenticationSchemeName == mongo_dart.ScramSha1Authenticator.name_) {
        this[_authenticationScheme] = mongo_dart.AuthenticationScheme.SCRAM_SHA_1;
      } else if (authenticationSchemeName == mongo_dart.MongoDbCRAuthenticator.name_) {
        this[_authenticationScheme] = mongo_dart.AuthenticationScheme.MONGODB_CR;
      } else {
        dart.throw(new mongo_dart.MongoDartError.new("Provided authentication scheme is not supported : " + dart.str(authenticationSchemeName)));
      }
    }
    collection(collectionName) {
      return new mongo_dart.DbCollection.new(this, collectionName);
    }
    queryMessage(queryMessage, opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      return T.FutureOfMongoReplyMessageL().sync(dart.fn(() => {
        if (!dart.equals(this.state, mongo_dart.State.OPEN)) {
          dart.throw(new mongo_dart.MongoDartError.new("Db is in the wrong state: " + dart.str(this.state)));
        }
        connection == null ? connection = this[_masterConnectionVerified] : null;
        return connection.query(queryMessage);
      }, T.VoidToFutureLOfMongoReplyMessageL()));
    }
    executeMessage(message, writeConcern, opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      if (!dart.equals(this.state, mongo_dart.State.OPEN)) {
        dart.throw(new mongo_dart.MongoDartError.new("DB is not open. " + dart.str(this.state)));
      }
      connection == null ? connection = this[_masterConnectionVerified] : null;
      writeConcern == null ? writeConcern = this[_writeConcern] : null;
      connection.execute(message, dart.equals(writeConcern, mongo_dart.WriteConcern.ERRORS_IGNORED));
    }
    executeModernMessage(message, opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      return async.async(T.MapLOfStringL$ObjectL(), (function* executeModernMessage() {
        if (!dart.equals(this.state, mongo_dart.State.OPEN)) {
          dart.throw(new mongo_dart.MongoDartError.new("DB is not open. " + dart.str(this.state)));
        }
        connection == null ? connection = this[_masterConnectionVerified] : null;
        let response = (yield connection.executeModernMessage(message));
        let section = response.sections[$firstWhere](dart.fn(_section => _section.payloadType === 0, T.SectionLToboolL()));
        return section.payload.content;
      }).bind(this));
    }
    open(opts) {
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : C[15] || CT.C15;
      let secure = opts && 'secure' in opts ? opts.secure : false;
      return async.async(dart.dynamic, (function* open() {
        if (dart.equals(this.state, mongo_dart.State.OPENING)) {
          dart.throw(new mongo_dart.MongoDartError.new("Attempt to open db in state " + dart.str(this.state)));
        }
        this.state = mongo_dart.State.OPENING;
        this[_writeConcern] = writeConcern;
        this[_connectionManager] = new mongo_dart._ConnectionManager.new(this);
        for (let uri of this[_uriList]) {
          this[_connectionManager].addConnection(this[_parseUri](uri, {isSecure: secure}));
        }
        try {
          yield this[_connectionManager].open(writeConcern);
        } catch (e$) {
          let e = dart.getThrown(e$);
          this.state = mongo_dart.State.INIT;
          yield this[_connectionManager].close();
          dart.rethrow(e$);
        }
      }).bind(this));
    }
    get isConnected() {
      let t10, t10$;
      return dart.equals(this.state, mongo_dart.State.OPEN) && dart.test((t10$ = (t10 = this[_masterConnection], t10 == null ? null : t10.connected), t10$ == null ? false : t10$));
    }
    executeDbCommand(message, opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      return async.async(T.MapLOfStringL$dynamic(), (function* executeDbCommand() {
        connection == null ? connection = this[_masterConnectionVerified] : null;
        let result = T.CompleterOfMapLOfStringL$dynamic().new();
        let replyMessage = (yield connection.query(message));
        let firstRepliedDocument = replyMessage.documents[$_get](0);
        let errorMessage = "";
        if (dart.test(replyMessage.documents[$isEmpty])) {
          errorMessage = "Error executing Db command, documents are empty " + dart.str(replyMessage);
          core.print("Error: " + errorMessage);
          let m = new (T.IdentityMapOfStringL$dynamic()).new();
          m[$_set]("errmsg", errorMessage);
          result.completeError(m);
        } else if (dart.test(this.documentIsNotAnError(firstRepliedDocument))) {
          result.complete(firstRepliedDocument);
        } else {
          result.completeError(firstRepliedDocument);
        }
        return result.future;
      }).bind(this));
    }
    documentIsNotAnError(firstRepliedDocument) {
      return dart.equals(dart.dsend(firstRepliedDocument, '_get', ["ok"]), 1.0) && dart.dsend(firstRepliedDocument, '_get', ["err"]) == null;
    }
    dropCollection(collectionName) {
      return async.async(T.boolL(), (function* dropCollection() {
        let collectionInfos = (yield this.getCollectionInfos(new (T.IdentityMapOfStringL$dynamic()).from(["name", collectionName])));
        if (collectionInfos[$length] === 1) {
          return this.executeDbCommand(mongo_dart.DbCommand.createDropCollectionCommand(this, collectionName)).then(T.boolL(), dart.fn(_ => true, T.MapLOfStringL$dynamicToboolL()));
        }
        return true;
      }).bind(this));
    }
    drop() {
      return this.executeDbCommand(mongo_dart.DbCommand.createDropDatabaseCommand(this));
    }
    removeFromCollection(collectionName, selector = C[20] || CT.C20, writeConcern = null) {
      return T.FutureOfMapLOfStringL$dynamic().sync(dart.fn(() => {
        this.executeMessage(new mongo_dart.MongoRemoveMessage.new(dart.str(this.databaseName) + "." + dart.str(collectionName), selector), writeConcern);
        return this[_getAcknowledgement]({writeConcern: writeConcern});
      }, T.VoidToFutureLOfMapLOfStringL$dynamic()));
    }
    getLastError(writeConcern = null) {
      writeConcern == null ? writeConcern = this[_writeConcern] : null;
      return this.executeDbCommand(mongo_dart.DbCommand.createGetLastErrorCommand(this, writeConcern));
    }
    getNonce(opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      return this.executeDbCommand(mongo_dart.DbCommand.createGetNonceCommand(this), {connection: connection});
    }
    getBuildInfo(opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      return this.executeDbCommand(mongo_dart.DbCommand.createBuildInfoCommand(this), {connection: connection});
    }
    isMaster(opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      return this.executeDbCommand(mongo_dart.DbCommand.createIsMasterCommand(this), {connection: connection});
    }
    wait() {
      return this.getLastError();
    }
    close() {
      this[_log].fine(dart.fn(() => dart.str(this) + " closed", T.VoidToStringL()));
      this.state = mongo_dart.State.CLOSED;
      let _cm = this[_connectionManager];
      this[_connectionManager] = null;
      return _cm.close();
    }
    listDatabases() {
      return async.async(T.ListL(), (function* listDatabases() {
        let commandResult = (yield this.executeDbCommand(mongo_dart.DbCommand.createQueryAdminCommand(new (T.IdentityMapOfStringL$dynamic()).from(["listDatabases", 1]))));
        let result = [];
        for (let each of T.IterableL().as(commandResult[$_get]("databases"))) {
          result[$add](dart.dsend(each, '_get', ["name"]));
        }
        return result;
      }).bind(this));
    }
    [_listCollectionsCursor](filter = C[20] || CT.C20) {
      if (dart.test(this[_masterConnection].serverCapabilities.listCollections)) {
        return new mongo_dart.ListCollectionsCursor.new(this, filter).stream;
      } else {
        let selector = new (T.IdentityMapOfStringL$dynamic()).new();
        if (dart.test(filter[$containsKey]("name"))) {
          selector[$_set]("name", dart.str(this.databaseName) + "." + dart.str(filter[$_get]("name")));
        }
        return new mongo_dart.Cursor.new(this, new mongo_dart.DbCollection.new(this, mongo_dart.DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector).stream;
      }
    }
    collectionsInfoCursor(collectionName = null) {
      return this[_collectionsInfoCursor](collectionName);
    }
    [_collectionsInfoCursor](collectionName = null) {
      let selector = new (T.IdentityMapOfStringL$dynamic()).new();
      if (collectionName != null) {
        selector[$_set]("name", dart.str(this.databaseName) + "." + dart.str(collectionName));
      }
      return new mongo_dart.Cursor.new(this, new mongo_dart.DbCollection.new(this, mongo_dart.DbCommand.SYSTEM_NAMESPACE_COLLECTION), selector).stream;
    }
    listCollections() {
      return this[_collectionsInfoCursor]().map(T.ListLOfStringL(), dart.fn(map => {
        let t10, t10$;
        t10$ = (t10 = map[$_get]("name"), t10 == null ? null : dart.toString(t10));
        return t10$ == null ? null : t10$[$split](".");
      }, T.MapLOfStringL$dynamicToListLOfStringL())).where(dart.fn(arr => arr[$length] === 2, T.ListLOfStringLToboolL())).map(T.StringL(), dart.fn(arr => arr[$last], T.ListLOfStringLToStringL())).toList();
    }
    getCollectionInfos(filter = C[20] || CT.C20) {
      return this[_listCollectionsCursor](filter).toList();
    }
    getCollectionNames(filter = C[20] || CT.C20) {
      return this[_listCollectionsCursor](filter).map(T.StringL(), dart.fn(map => {
        let t10;
        t10 = map[$_get]("name");
        return t10 == null ? null : dart.toString(t10);
      }, T.MapLOfStringL$dynamicToStringL())).toList();
    }
    authenticate(userName, password, opts) {
      let connection = opts && 'connection' in opts ? opts.connection : null;
      return async.async(T.boolL(), (function* authenticate() {
        let t10, t10$;
        let credential = (t10 = new mongo_dart.UsernamePasswordCredential.new(), (() => {
          t10.username = userName;
          t10.password = password;
          return t10;
        })());
        let authenticator = mongo_dart.createAuthenticator(this[_authenticationScheme], this, credential);
        yield authenticator.authenticate((t10$ = connection, t10$ == null ? this[_masterConnection] : t10$));
        return true;
      }).bind(this));
    }
    indexInformation(collectionName = null) {
      let selector = new _js_helper.LinkedMap.new();
      if (collectionName != null) {
        selector[$_set]("ns", dart.str(this.databaseName) + "." + dart.str(collectionName));
      }
      return new mongo_dart.Cursor.new(this, new mongo_dart.DbCollection.new(this, mongo_dart.DbCommand.SYSTEM_INDEX_COLLECTION), selector).stream.toList();
    }
    [_createIndexName](keys) {
      let name = "";
      keys[$forEach](dart.fn((key, value) => {
        if (name[$isEmpty]) {
          name = dart.str(key) + "_" + dart.str(value);
        } else {
          name = name + "_" + dart.str(key) + "_" + dart.str(value);
        }
      }, T.StringLAnddynamicToNull()));
      return name;
    }
    createIndex(collectionName, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      let unique = opts && 'unique' in opts ? opts.unique : null;
      let sparse = opts && 'sparse' in opts ? opts.sparse : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let dropDups = opts && 'dropDups' in opts ? opts.dropDups : null;
      let partialFilterExpression = opts && 'partialFilterExpression' in opts ? opts.partialFilterExpression : null;
      let name = opts && 'name' in opts ? opts.name : null;
      if (dart.test(this[_masterConnection].serverCapabilities.supportsOpMsg)) {
        return this.collection(collectionName).createIndex({key: key, keys: keys, unique: unique, sparse: sparse, background: background, dropDups: dropDups, partialFilterExpression: partialFilterExpression, name: name, modernReply: false});
      }
      return T.FutureOfMapLOfStringL$dynamic().sync(dart.fn(() => async.async(T.MapLOfStringL$dynamic(), (function*() {
        let selector = new (T.IdentityMapOfStringL$dynamic()).new();
        selector[$_set]("ns", dart.str(this.databaseName) + "." + dart.str(collectionName));
        keys = this[_setKeys](key, keys);
        selector[$_set]("key", keys);
        if (unique === true) {
          selector[$_set]("unique", true);
        } else {
          selector[$_set]("unique", false);
        }
        if (sparse === true) {
          selector[$_set]("sparse", true);
        }
        if (background === true) {
          selector[$_set]("background", true);
        }
        if (dropDups === true) {
          selector[$_set]("dropDups", true);
        }
        if (partialFilterExpression != null) {
          selector[$_set]("partialFilterExpression", partialFilterExpression);
        }
        name == null ? name = this[_createIndexName](keys) : null;
        selector[$_set]("name", name);
        let insertMessage = new mongo_dart.MongoInsertMessage.new(dart.str(this.databaseName) + "." + dart.str(mongo_dart.DbCommand.SYSTEM_INDEX_COLLECTION), T.JSArrayOfMapLOfStringL$dynamic().of([selector]));
        yield this.executeMessage(insertMessage, this[_writeConcern]);
        return this.getLastError();
      }).bind(this)), T.VoidToFutureLOfMapLOfStringL$dynamic()));
    }
    [_setKeys](key, keys) {
      if (key != null && keys != null) {
        dart.throw(new core.ArgumentError.new("Only one parameter must be set: key or keys"));
      }
      if (key != null) {
        keys = new (T.IdentityMapOfStringL$dynamic()).new();
        keys[$_set](dart.str(key), 1);
      }
      if (keys == null) {
        dart.throw(new core.ArgumentError.new("key or keys parameter must be set"));
      }
      return keys;
    }
    ensureIndex(collectionName, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      let unique = opts && 'unique' in opts ? opts.unique : null;
      let sparse = opts && 'sparse' in opts ? opts.sparse : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let dropDups = opts && 'dropDups' in opts ? opts.dropDups : null;
      let partialFilterExpression = opts && 'partialFilterExpression' in opts ? opts.partialFilterExpression : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return async.async(dart.dynamic, (function* ensureIndex() {
        keys = this[_setKeys](key, keys);
        let indexInfos = (yield this.collection(collectionName).getIndexes());
        name == null ? name = this[_createIndexName](keys) : null;
        if (dart.test(indexInfos[$any](dart.fn(info => dart.equals(info[$_get]("name"), name), T.MapLOfStringL$dynamicToboolL()))) || dart.test(indexInfos[$any](dart.fn(info => dart.equals(info[$_get]("name"), "_" + dart.str(name)), T.MapLOfStringL$dynamicToboolL())))) {
          return new (T.IdentityMapOfStringL$ObjectL()).from(["ok", 1.0, "result", "index preexists"]);
        }
        let createdIndex = (yield this.createIndex(collectionName, {keys: keys, unique: unique, sparse: sparse, background: background, dropDups: dropDups, partialFilterExpression: partialFilterExpression, name: name}));
        return createdIndex;
      }).bind(this));
    }
    serverStatus(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(T.MapLOfStringL$ObjectL(), (function* serverStatus() {
        if (!dart.test(this[_masterConnection].serverCapabilities.supportsOpMsg)) {
          return new (T.IdentityMapOfStringL$ObjectL()).new();
        }
        let operation = new server_status_operation.ServerStatusOperation.new(this, {options: options});
        return operation.execute();
      }).bind(this));
    }
    [_getAcknowledgement](opts) {
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
      writeConcern == null ? writeConcern = this[_writeConcern] : null;
      if (dart.equals(writeConcern, mongo_dart.WriteConcern.ERRORS_IGNORED)) {
        return T.FutureOfMapLOfStringL$dynamic().value(new (T.IdentityMapOfStringL$dynamic()).from(["ok", 1.0]));
      } else {
        return this.getLastError(writeConcern);
      }
    }
  };
  (mongo_dart.Db.new = function(uriString, _debugInfo = null) {
    this[_log] = logger.Logger.new("Db");
    this[_uriList] = T.JSArrayOfStringL().of([]);
    this[state$] = mongo_dart.State.INIT;
    this[authSourceDb] = null;
    this[_connectionManager] = null;
    this[_writeConcern] = null;
    this[_authenticationScheme] = null;
    this[readPreference] = read_preference.ReadPreference.primary;
    this[databaseName$] = null;
    this[_debugInfo$] = _debugInfo;
    if (uriString[$contains](",")) {
      this[_uriList][$addAll](split_hosts.splitHosts(uriString));
    } else {
      this[_uriList][$add](uriString);
    }
  }).prototype = mongo_dart.Db.prototype;
  (mongo_dart.Db.pool = function(uriList, _debugInfo = null) {
    this[_log] = logger.Logger.new("Db");
    this[_uriList] = T.JSArrayOfStringL().of([]);
    this[state$] = mongo_dart.State.INIT;
    this[authSourceDb] = null;
    this[_connectionManager] = null;
    this[_writeConcern] = null;
    this[_authenticationScheme] = null;
    this[readPreference] = read_preference.ReadPreference.primary;
    this[databaseName$] = null;
    this[_debugInfo$] = _debugInfo;
    this[_uriList][$addAll](uriList);
  }).prototype = mongo_dart.Db.prototype;
  (mongo_dart.Db._authDb = function(databaseName) {
    this[_log] = logger.Logger.new("Db");
    this[_uriList] = T.JSArrayOfStringL().of([]);
    this[state$] = mongo_dart.State.INIT;
    this[authSourceDb] = null;
    this[_connectionManager] = null;
    this[_writeConcern] = null;
    this[_authenticationScheme] = null;
    this[readPreference] = read_preference.ReadPreference.primary;
    this[_debugInfo$] = null;
    this[databaseName$] = databaseName;
    ;
  }).prototype = mongo_dart.Db.prototype;
  dart.addTypeTests(mongo_dart.Db);
  dart.addTypeCaches(mongo_dart.Db);
  dart.setMethodSignature(mongo_dart.Db, () => ({
    __proto__: dart.getMethods(mongo_dart.Db.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    [_parseUri]: dart.fnType(dart.legacy(mongo_dart.ServerConfig), [dart.legacy(core.String)], {isSecure: dart.legacy(core.bool)}, {}),
    selectAuthenticationMechanism: dart.fnType(dart.void, [dart.legacy(core.String)]),
    collection: dart.fnType(dart.legacy(mongo_dart.DbCollection), [dart.legacy(core.String)]),
    queryMessage: dart.fnType(dart.legacy(async.Future$(dart.legacy(mongo_dart.MongoReplyMessage))), [dart.legacy(mongo_dart.MongoMessage)], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    executeMessage: dart.fnType(dart.void, [dart.legacy(mongo_dart.MongoMessage), dart.legacy(mongo_dart.WriteConcern)], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    executeModernMessage: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))))), [dart.legacy(mongo_modern_message.MongoModernMessage)], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    open: dart.fnType(dart.legacy(async.Future), [], {secure: dart.legacy(core.bool), writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {}),
    executeDbCommand: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(mongo_dart.MongoMessage)], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    documentIsNotAnError: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    dropCollection: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String)]),
    drop: dart.fnType(dart.legacy(async.Future), []),
    removeFromCollection: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.String)], [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), dart.legacy(mongo_dart.WriteConcern)]),
    getLastError: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.legacy(mongo_dart.WriteConcern)]),
    getNonce: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    getBuildInfo: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    isMaster: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    wait: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), []),
    close: dart.fnType(dart.legacy(async.Future), []),
    listDatabases: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), []),
    [_listCollectionsCursor]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    collectionsInfoCursor: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.legacy(core.String)]),
    [_collectionsInfoCursor]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.legacy(core.String)]),
    listCollections: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.String))))), []),
    getCollectionInfos: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))), [], [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    getCollectionNames: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.String))))), [], [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    authenticate: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String), dart.legacy(core.String)], {connection: dart.legacy(mongo_dart._Connection)}, {}),
    indexInformation: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [], [dart.legacy(core.String)]),
    [_createIndexName]: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    createIndex: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.String)], {background: dart.legacy(core.bool), dropDups: dart.legacy(core.bool), key: dart.legacy(core.String), keys: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), name: dart.legacy(core.String), partialFilterExpression: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), sparse: dart.legacy(core.bool), unique: dart.legacy(core.bool)}, {}),
    [_setKeys]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    ensureIndex: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)], {background: dart.legacy(core.bool), dropDups: dart.legacy(core.bool), key: dart.legacy(core.String), keys: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), name: dart.legacy(core.String), partialFilterExpression: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), sparse: dart.legacy(core.bool), unique: dart.legacy(core.bool)}, {}),
    serverStatus: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object))))), [], {options: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))}, {}),
    [_getAcknowledgement]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], {writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {})
  }));
  dart.setGetterSignature(mongo_dart.Db, () => ({
    __proto__: dart.getGetters(mongo_dart.Db.__proto__),
    [_masterConnection]: dart.legacy(mongo_dart._Connection),
    [_masterConnectionVerified]: dart.legacy(mongo_dart._Connection),
    writeConcern: dart.legacy(mongo_dart.WriteConcern),
    masterConnection: dart.legacy(mongo_dart._Connection),
    uriList: dart.legacy(core.List$(dart.legacy(core.String))),
    isConnected: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(mongo_dart.Db, I[9]);
  dart.setFieldSignature(mongo_dart.Db, () => ({
    __proto__: dart.getFields(mongo_dart.Db.__proto__),
    [_log]: dart.finalFieldType(dart.legacy(logger.Logger)),
    [_uriList]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    state: dart.fieldType(dart.legacy(mongo_dart.State)),
    databaseName: dart.fieldType(dart.legacy(core.String)),
    [_debugInfo$]: dart.fieldType(dart.legacy(core.String)),
    authSourceDb: dart.fieldType(dart.legacy(mongo_dart.Db)),
    [_connectionManager]: dart.fieldType(dart.legacy(mongo_dart._ConnectionManager)),
    [_writeConcern]: dart.fieldType(dart.legacy(mongo_dart.WriteConcern)),
    [_authenticationScheme]: dart.fieldType(dart.legacy(mongo_dart.AuthenticationScheme)),
    readPreference: dart.fieldType(dart.legacy(read_preference.ReadPreference))
  }));
  dart.defineExtensionMethods(mongo_dart.Db, ['toString']);
  dart.defineLazy(mongo_dart.Db, {
    /*mongo_dart.Db.mongoDefaultPort*/get mongoDefaultPort() {
      return 27017;
    }
  }, true);
  var db$4 = dart.privateName(mongo_dart, "DbCollection.db");
  var collectionName$ = dart.privateName(mongo_dart, "DbCollection.collectionName");
  var readPreference$ = dart.privateName(mongo_dart, "DbCollection.readPreference");
  var _selectorBuilder2Map = dart.privateName(mongo_dart, "_selectorBuilder2Map");
  var _queryBuilder2Map = dart.privateName(mongo_dart, "_queryBuilder2Map");
  var _sortBuilder2Map = dart.privateName(mongo_dart, "_sortBuilder2Map");
  var _updateBuilder2Map = dart.privateName(mongo_dart, "_updateBuilder2Map");
  var _fieldsBuilder2Map = dart.privateName(mongo_dart, "_fieldsBuilder2Map");
  mongo_dart.DbCollection = class DbCollection extends core.Object {
    get db() {
      return this[db$4];
    }
    set db(value) {
      this[db$4] = value;
    }
    get collectionName() {
      return this[collectionName$];
    }
    set collectionName(value) {
      this[collectionName$] = value;
    }
    get readPreference() {
      return this[readPreference$];
    }
    set readPreference(value) {
      this[readPreference$] = value;
    }
    fullName() {
      return dart.str(this.db.databaseName) + "." + dart.str(this.collectionName);
    }
    save(document, opts) {
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
      let id = null;
      let createId = false;
      if (dart.test(document[$containsKey]("_id"))) {
        id = document[$_get]("_id");
        if (id == null) {
          createId = true;
        }
      }
      if (id != null) {
        return this.update(new (T.IdentityMapOfStringL$dynamic()).from(["_id", id]), document, {upsert: true, writeConcern: writeConcern});
      } else {
        if (createId) {
          document[$_set]("_id", new bson.ObjectId.new());
        }
        return this.insert(document, {writeConcern: writeConcern});
      }
    }
    insertAll(documents, opts) {
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
      return T.FutureOfMapLOfStringL$dynamic().sync(dart.fn(() => {
        let insertMessage = new mongo_dart.MongoInsertMessage.new(this.fullName(), documents);
        this.db.executeMessage(insertMessage, writeConcern);
        return this.db[_getAcknowledgement]({writeConcern: writeConcern});
      }, T.VoidToFutureLOfMapLOfStringL$dynamic()));
    }
    update(selector, document, opts) {
      let upsert = opts && 'upsert' in opts ? opts.upsert : false;
      let multiUpdate = opts && 'multiUpdate' in opts ? opts.multiUpdate : false;
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
      return T.FutureOfMapLOfStringL$dynamic().sync(dart.fn(() => {
        let flags = 0;
        if (dart.test(upsert)) {
          flags = (flags | 1) >>> 0;
        }
        if (dart.test(multiUpdate)) {
          flags = (flags | 2) >>> 0;
        }
        let message = new mongo_dart.MongoUpdateMessage.new(this.fullName(), this[_selectorBuilder2Map](selector), document, flags);
        this.db.executeMessage(message, writeConcern);
        return this.db[_getAcknowledgement]({writeConcern: writeConcern});
      }, T.VoidToFutureLOfMapLOfStringL$dynamic()));
    }
    find(selector = null) {
      return new mongo_dart.Cursor.new(this.db, this, selector).stream;
    }
    createCursor(selector = null) {
      return new mongo_dart.Cursor.new(this.db, this, selector);
    }
    findOne(selector = null) {
      let cursor = new mongo_dart.Cursor.new(this.db, this, selector);
      let result = cursor.nextObject();
      cursor.close();
      return result;
    }
    findAndModify(opts) {
      let query = opts && 'query' in opts ? opts.query : null;
      let sort = opts && 'sort' in opts ? opts.sort : null;
      let remove = opts && 'remove' in opts ? opts.remove : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let returnNew = opts && 'returnNew' in opts ? opts.returnNew : null;
      let fields = opts && 'fields' in opts ? opts.fields : null;
      let upsert = opts && 'upsert' in opts ? opts.upsert : null;
      query = this[_queryBuilder2Map](query);
      sort = this[_sortBuilder2Map](sort);
      update = this[_updateBuilder2Map](update);
      fields = this[_fieldsBuilder2Map](fields);
      return this.db.executeDbCommand(mongo_dart.DbCommand.createFindAndModifyCommand(this.db, this.collectionName, {query: T.MapLOfStringL$dynamic().as(query), sort: T.MapLOfStringL$dynamic().as(sort), remove: remove, update: T.MapLOfStringL$dynamic().as(update), returnNew: returnNew, fields: T.MapLOfStringL$dynamic().as(fields), upsert: upsert})).then(T.MapLOfStringL$dynamic(), dart.fn(reply => T.FutureOfMapLOfStringL$dynamic().value(T.MapLOfStringL$dynamic().as(reply[$_get]("value"))), T.MapLOfStringL$dynamicToFutureLOfMapLOfStringL$dynamic()));
    }
    drop() {
      return this.db.dropCollection(this.collectionName);
    }
    remove(selector, opts) {
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
      return this.db.removeFromCollection(this.collectionName, this[_selectorBuilder2Map](selector), writeConcern);
    }
    count(selector = null) {
      return this.db.executeDbCommand(mongo_dart.DbCommand.createCountCommand(this.db, this.collectionName, this[_selectorBuilder2Map](selector))).then(T.intL(), dart.fn(reply => {
        let t10;
        return T.FutureOfintL().value((t10 = T.numL().as(reply[$_get]("n")), t10 == null ? null : t10[$toInt]()));
      }, T.MapLOfStringL$dynamicToFutureLOfintL()));
    }
    distinct(field, selector = null) {
      return this.db.executeDbCommand(mongo_dart.DbCommand.createDistinctCommand(this.db, this.collectionName, field, this[_selectorBuilder2Map](selector)));
    }
    aggregate(pipeline, opts) {
      let allowDiskUse = opts && 'allowDiskUse' in opts ? opts.allowDiskUse : false;
      let cursor = opts && 'cursor' in opts ? opts.cursor : null;
      let cmd = mongo_dart.DbCommand.createAggregateCommand(this.db, this.collectionName, pipeline, {allowDiskUse: allowDiskUse, cursor: cursor});
      return this.db.executeDbCommand(cmd);
    }
    aggregateToStream(pipeline, opts) {
      let cursorOptions = opts && 'cursorOptions' in opts ? opts.cursorOptions : C[20] || CT.C20;
      let allowDiskUse = opts && 'allowDiskUse' in opts ? opts.allowDiskUse : false;
      return new mongo_dart.AggregateCursor.new(this.db, this, pipeline, cursorOptions, allowDiskUse).stream;
    }
    insert(document, opts) {
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
      return this.insertAll(T.JSArrayOfMapLOfStringL$dynamic().of([document]), {writeConcern: writeConcern});
    }
    getIndexes() {
      if (dart.test(this.db[_masterConnection].serverCapabilities.listIndexes)) {
        return new mongo_dart.ListIndexesCursor.new(this.db, this).stream.toList();
      } else {
        let selector = new (T.IdentityMapOfStringL$dynamic()).new();
        selector[$_set]("ns", this.fullName());
        return new mongo_dart.Cursor.new(this.db, new mongo_dart.DbCollection.new(this.db, mongo_dart.DbCommand.SYSTEM_INDEX_COLLECTION), selector).stream.toList();
      }
    }
    createIndex(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      let unique = opts && 'unique' in opts ? opts.unique : null;
      let sparse = opts && 'sparse' in opts ? opts.sparse : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let dropDups = opts && 'dropDups' in opts ? opts.dropDups : null;
      let partialFilterExpression = opts && 'partialFilterExpression' in opts ? opts.partialFilterExpression : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let modernReply = opts && 'modernReply' in opts ? opts.modernReply : null;
      return async.async(T.MapLOfStringL$dynamic(), (function* createIndex() {
        if (!dart.test(this.db[_masterConnection].serverCapabilities.supportsOpMsg)) {
          dart.throw(new mongo_dart.MongoDartError.new("Use createIndex() method on db (before 3.6)"));
        }
        return T.FutureOfMapLOfStringL$dynamic().sync(dart.fn(() => async.async(T.MapLOfStringL$dynamic(), (function*() {
          modernReply == null ? modernReply = true : null;
          let indexOptions = new create_index_options.CreateIndexOptions.new(this, {uniqueIndex: unique === true, sparseIndex: sparse === true, background: background === true, dropDuplicatedEntries: dropDups === true, partialFilterExpression: partialFilterExpression, indexName: name});
          let indexOperation = new create_index_operation.CreateIndexOperation.new(this.db, this, this[_setKeys](key, keys), indexOptions);
          let res = (yield indexOperation.execute());
          if (dart.test(modernReply)) {
            return res;
          }
          return this.db.getLastError();
        }).bind(this)), T.VoidToFutureLOfMapLOfStringL$dynamic()));
      }).bind(this));
    }
    insertOne(document, opts) {
      let writeConcern = opts && 'writeConcern' in opts ? opts.writeConcern : null;
      return async.async(T.MapLOfStringL$dynamic(), (function* insertOne() {
        if (!dart.test(this.db.masterConnection.serverCapabilities.supportsOpMsg)) {
          dart.throw(new mongo_dart.MongoDartError.new("This method is not available before release 3.6"));
        }
        return T.FutureOfMapLOfStringL$dynamic().sync(dart.fn(() => {
          let insertOneOptions = new insert_one_options.InsertOneOptions.new(this, {writeConcern: writeConcern});
          let insertOneOperation = new insert_one_operation.InsertOneOperation.new(this, document, insertOneOptions);
          return insertOneOperation.execute();
        }, T.VoidToFutureLOfMapLOfStringL$ObjectL()));
      }).bind(this));
    }
    [_setKeys](key, keys) {
      if (key != null && keys != null) {
        dart.throw(new core.ArgumentError.new("Only one parameter must be set: key or keys"));
      }
      if (key != null) {
        keys = new (T.IdentityMapOfStringL$dynamic()).new();
        keys[$_set](dart.str(key), 1);
      }
      if (keys == null) {
        dart.throw(new core.ArgumentError.new("key or keys parameter must be set"));
      }
      return keys;
    }
    [_selectorBuilder2Map](selector) {
      if (selector == null) {
        return new (T.IdentityMapOfStringL$dynamic()).new();
      }
      if (T.SelectorBuilderL().is(selector)) {
        return T.MapLOfStringL$dynamic().as(selector.map[$_get]("$query"));
      }
      return T.MapLOfStringL$dynamic().as(selector);
    }
    [_queryBuilder2Map](query) {
      if (T.SelectorBuilderL().is(query)) {
        query = dart.dsend(dart.dload(query, 'map'), '_get', ["$query"]);
      }
      return T.MapLOfStringL$dynamic().as(query);
    }
    [_sortBuilder2Map](query) {
      if (T.SelectorBuilderL().is(query)) {
        query = dart.dsend(dart.dload(query, 'map'), '_get', ["orderby"]);
      }
      return T.MapLOfStringL$dynamic().as(query);
    }
    [_fieldsBuilder2Map](fields) {
      if (T.SelectorBuilderL().is(fields)) {
        return fields.paramFields;
      }
      return T.MapLOfStringL$dynamic().as(fields);
    }
    [_updateBuilder2Map](update) {
      if (T.ModifierBuilderL().is(update)) {
        update = dart.dload(update, 'map');
      }
      return T.MapLOfStringL$dynamic().as(update);
    }
  };
  (mongo_dart.DbCollection.new = function(db, collectionName) {
    this[readPreference$] = read_preference.ReadPreference.primary;
    this[db$4] = db;
    this[collectionName$] = collectionName;
    ;
  }).prototype = mongo_dart.DbCollection.prototype;
  dart.addTypeTests(mongo_dart.DbCollection);
  dart.addTypeCaches(mongo_dart.DbCollection);
  dart.setMethodSignature(mongo_dart.DbCollection, () => ({
    __proto__: dart.getMethods(mongo_dart.DbCollection.__proto__),
    fullName: dart.fnType(dart.legacy(core.String), []),
    save: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {}),
    insertAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))))], {writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {}),
    update: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.dynamic, dart.dynamic], {multiUpdate: dart.legacy(core.bool), upsert: dart.legacy(core.bool), writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {}),
    find: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.dynamic]),
    createCursor: dart.fnType(dart.legacy(mongo_dart.Cursor), [], [dart.dynamic]),
    findOne: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.dynamic]),
    findAndModify: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], {fields: dart.dynamic, query: dart.dynamic, remove: dart.legacy(core.bool), returnNew: dart.legacy(core.bool), sort: dart.dynamic, update: dart.dynamic, upsert: dart.legacy(core.bool)}, {}),
    drop: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    remove: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.dynamic], {writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {}),
    count: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [], [dart.dynamic]),
    distinct: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.String)], [dart.dynamic]),
    aggregate: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.List)], {allowDiskUse: dart.legacy(core.bool), cursor: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))}, {}),
    aggregateToStream: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.List)], {allowDiskUse: dart.legacy(core.bool), cursorOptions: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))}, {}),
    insert: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {}),
    getIndexes: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))), []),
    createIndex: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], {background: dart.legacy(core.bool), dropDups: dart.legacy(core.bool), key: dart.legacy(core.String), keys: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), modernReply: dart.legacy(core.bool), name: dart.legacy(core.String), partialFilterExpression: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), sparse: dart.legacy(core.bool), unique: dart.legacy(core.bool)}, {}),
    insertOne: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {writeConcern: dart.legacy(mongo_dart.WriteConcern)}, {}),
    [_setKeys]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    [_selectorBuilder2Map]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.dynamic]),
    [_queryBuilder2Map]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.dynamic]),
    [_sortBuilder2Map]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.dynamic]),
    [_fieldsBuilder2Map]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.dynamic]),
    [_updateBuilder2Map]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.dynamic])
  }));
  dart.setLibraryUri(mongo_dart.DbCollection, I[9]);
  dart.setFieldSignature(mongo_dart.DbCollection, () => ({
    __proto__: dart.getFields(mongo_dart.DbCollection.__proto__),
    db: dart.fieldType(dart.legacy(mongo_dart.Db)),
    collectionName: dart.fieldType(dart.legacy(core.String)),
    readPreference: dart.fieldType(dart.legacy(read_preference.ReadPreference))
  }));
  var db$5 = dart.privateName(mongo_dart, "DbCommand.db");
  var _collectionFullName = dart.privateName(mongo_dart, "_collectionFullName");
  var flags$0 = dart.privateName(mongo_dart, "MongoQueryMessage.flags");
  var numberToSkip$ = dart.privateName(mongo_dart, "MongoQueryMessage.numberToSkip");
  var numberToReturn$ = dart.privateName(mongo_dart, "MongoQueryMessage.numberToReturn");
  var _query = dart.privateName(mongo_dart, "_query");
  var _fields = dart.privateName(mongo_dart, "_fields");
  mongo_dart.MongoQueryMessage = class MongoQueryMessage extends mongo_dart.MongoMessage {
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      this[flags$0] = value;
    }
    get numberToSkip() {
      return this[numberToSkip$];
    }
    set numberToSkip(value) {
      this[numberToSkip$] = value;
    }
    get numberToReturn() {
      return this[numberToReturn$];
    }
    set numberToReturn(value) {
      this[numberToReturn$] = value;
    }
    get collectionNameBson() {
      return this[_collectionFullName];
    }
    get messageLength() {
      let result = 16 + 4 + dart.notNull(this[_collectionFullName].byteLength()) + 4 + 4 + dart.notNull(this[_query].byteLength());
      if (this[_fields] != null) {
        result = result + dart.notNull(this[_fields].byteLength());
      }
      return result;
    }
    serialize() {
      let buffer = new bson.BsonBinary.new(this.messageLength);
      this.writeMessageHeaderTo(buffer);
      buffer.writeInt(this.flags);
      this[_collectionFullName].packValue(buffer);
      buffer.writeInt(this.numberToSkip);
      buffer.writeInt(this.numberToReturn);
      this[_query].packValue(buffer);
      if (this[_fields] != null) {
        this[_fields].packValue(buffer);
      }
      buffer.offset = 0;
      return buffer;
    }
    toString() {
      return "MongoQueryMessage(" + dart.str(this.requestId) + ", " + dart.str(this[_collectionFullName].value) + ",numberToReturn:" + dart.str(this.numberToReturn) + ", " + dart.str(this[_query].value) + ")";
    }
  };
  (mongo_dart.MongoQueryMessage.new = function(collectionFullName, flags, numberToSkip, numberToReturn, query, fields) {
    this[_collectionFullName] = null;
    this[_query] = null;
    this[_fields] = null;
    this[flags$0] = flags;
    this[numberToSkip$] = numberToSkip;
    this[numberToReturn$] = numberToReturn;
    mongo_dart.MongoQueryMessage.__proto__.new.call(this);
    this[_collectionFullName] = new bson.BsonCString.new(collectionFullName);
    this[_query] = new bson.BsonMap.new(query);
    if (fields != null) {
      this[_fields] = new bson.BsonMap.new(fields);
    }
    this.opcode = mongo_dart.MongoMessage.Query;
  }).prototype = mongo_dart.MongoQueryMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoQueryMessage);
  dart.addTypeCaches(mongo_dart.MongoQueryMessage);
  dart.setGetterSignature(mongo_dart.MongoQueryMessage, () => ({
    __proto__: dart.getGetters(mongo_dart.MongoQueryMessage.__proto__),
    collectionNameBson: dart.legacy(bson.BsonCString)
  }));
  dart.setLibraryUri(mongo_dart.MongoQueryMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoQueryMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoQueryMessage.__proto__),
    [_collectionFullName]: dart.fieldType(dart.legacy(bson.BsonCString)),
    flags: dart.fieldType(dart.legacy(core.int)),
    numberToSkip: dart.fieldType(dart.legacy(core.int)),
    numberToReturn: dart.fieldType(dart.legacy(core.int)),
    [_query]: dart.fieldType(dart.legacy(bson.BsonMap)),
    [_fields]: dart.fieldType(dart.legacy(bson.BsonMap))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoQueryMessage, ['toString']);
  dart.defineLazy(mongo_dart.MongoQueryMessage, {
    /*mongo_dart.MongoQueryMessage.OPTS_NONE*/get OPTS_NONE() {
      return 0;
    },
    /*mongo_dart.MongoQueryMessage.OPTS_TAILABLE_CURSOR*/get OPTS_TAILABLE_CURSOR() {
      return 2;
    },
    /*mongo_dart.MongoQueryMessage.OPTS_SLAVE*/get OPTS_SLAVE() {
      return 4;
    },
    /*mongo_dart.MongoQueryMessage.OPTS_OPLOG_REPLY*/get OPTS_OPLOG_REPLY() {
      return 8;
    },
    /*mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT*/get OPTS_NO_CURSOR_TIMEOUT() {
      return 16;
    },
    /*mongo_dart.MongoQueryMessage.OPTS_AWAIT_DATA*/get OPTS_AWAIT_DATA() {
      return 32;
    },
    /*mongo_dart.MongoQueryMessage.OPTS_EXHAUST*/get OPTS_EXHAUST() {
      return 64;
    },
    /*mongo_dart.MongoQueryMessage.OPTS_PARTIAL*/get OPTS_PARTIAL() {
      return 128;
    }
  }, true);
  mongo_dart.DbCommand = class DbCommand extends mongo_dart.MongoQueryMessage {
    get db() {
      return this[db$5];
    }
    set db(value) {
      this[db$5] = value;
    }
    static createFindAndModifyCommand(db, collectionName, opts) {
      let query = opts && 'query' in opts ? opts.query : null;
      let sort = opts && 'sort' in opts ? opts.sort : null;
      let remove = opts && 'remove' in opts ? opts.remove : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let returnNew = opts && 'returnNew' in opts ? opts.returnNew : null;
      let fields = opts && 'fields' in opts ? opts.fields : null;
      let upsert = opts && 'upsert' in opts ? opts.upsert : null;
      let command = new (T.IdentityMapOfStringL$dynamic()).from(["findandmodify", collectionName]);
      if (query != null) {
        command[$_set]("query", query);
      }
      if (sort != null) {
        command[$_set]("sort", sort);
      }
      if (remove != null) {
        command[$_set]("remove", remove);
      }
      if (update != null) {
        command[$_set]("update", update);
      }
      if (returnNew != null) {
        command[$_set]("new", returnNew);
      }
      if (fields != null) {
        command[$_set]("fields", fields);
      }
      if (upsert != null) {
        command[$_set]("upsert", upsert);
      }
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, T.MapLOfStringL$dynamic().as(command), null);
    }
    static createDropCollectionCommand(db, collectionName) {
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, new (T.IdentityMapOfStringL$dynamic()).from(["drop", collectionName]), null);
    }
    static createDropDatabaseCommand(db) {
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, new (T.IdentityMapOfStringL$dynamic()).from(["dropDatabase", 1]), null);
    }
    static createQueryDbCommand(db, command) {
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, 1, command, null);
    }
    static createQueryAdminCommand(command) {
      return new mongo_dart.MongoQueryMessage.new("admin." + dart.str(mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION), mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, 1, command, null);
    }
    static createDBSlaveOKCommand(db, command) {
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, (dart.notNull(mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT) | dart.notNull(mongo_dart.MongoQueryMessage.OPTS_SLAVE)) >>> 0, 0, -1, command, null);
    }
    static createPingCommand(db) {
      return mongo_dart.DbCommand.createQueryDbCommand(db, new (T.IdentityMapOfStringL$dynamic()).from(["ping", 1]));
    }
    static createGetNonceCommand(db) {
      return mongo_dart.DbCommand.createQueryDbCommand(db, new (T.IdentityMapOfStringL$dynamic()).from(["getnonce", 1]));
    }
    static createBuildInfoCommand(db) {
      return mongo_dart.DbCommand.createQueryDbCommand(db, new (T.IdentityMapOfStringL$dynamic()).from(["buildInfo", 1]));
    }
    static createGetLastErrorCommand(db, concern) {
      return mongo_dart.DbCommand.createQueryDbCommand(db, concern.command);
    }
    static createCountCommand(db, collectionName, selector = C[20] || CT.C20) {
      let finalQuery = new (T.IdentityMapOfStringL$dynamic()).new();
      finalQuery[$_set]("count", collectionName);
      finalQuery[$_set]("query", selector);
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, finalQuery, null);
    }
    static createSaslStartCommand(db, mechanismName, bytesToSendToServer) {
      let command = new (T.IdentityMapOfStringL$ObjectL()).from(["saslStart", 1, "mechanism", mechanismName, "payload", convert.base64.encode(bytesToSendToServer)]);
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NONE, 0, -1, command, null);
    }
    static createSaslContinueCommand(db, conversationId, bytesToSendToServer) {
      let command = new (T.IdentityMapOfStringL$ObjectL()).from(["saslContinue", 1, "conversationId", conversationId, "payload", convert.base64.encode(bytesToSendToServer)]);
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NONE, 0, -1, command, null);
    }
    static createDistinctCommand(db, collectionName, field, selector = C[20] || CT.C20) {
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, new (T.IdentityMapOfStringL$dynamic()).from(["distinct", collectionName, "key", field, "query", selector]), null);
    }
    static createAggregateCommand(db, collectionName, pipeline, opts) {
      let allowDiskUse = opts && 'allowDiskUse' in opts ? opts.allowDiskUse : false;
      let cursor = opts && 'cursor' in opts ? opts.cursor : null;
      let query = new (T.IdentityMapOfStringL$ObjectL()).from(["aggregate", collectionName, "pipeline", pipeline]);
      if (cursor != null) query[$_set]("cursor", cursor);
      if (dart.test(db[_masterConnection].serverCapabilities.aggregationCursor)) {
        query[$_set]("allowDiskUse", allowDiskUse);
      }
      return new mongo_dart.DbCommand.new(db, mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION, mongo_dart.MongoQueryMessage.OPTS_NO_CURSOR_TIMEOUT, 0, -1, query, null);
    }
    static createIsMasterCommand(db) {
      return mongo_dart.DbCommand.createQueryDbCommand(db, new (T.IdentityMapOfStringL$dynamic()).from(["ismaster", 1]));
    }
  };
  (mongo_dart.DbCommand.new = function(db, collectionName, flags, numberToSkip, numberToReturn, query, fields) {
    this[db$5] = db;
    mongo_dart.DbCommand.__proto__.new.call(this, collectionName, flags, numberToSkip, numberToReturn, query, fields);
    this[_collectionFullName] = new bson.BsonCString.new(dart.str(this.db.databaseName) + "." + dart.str(collectionName));
  }).prototype = mongo_dart.DbCommand.prototype;
  dart.addTypeTests(mongo_dart.DbCommand);
  dart.addTypeCaches(mongo_dart.DbCommand);
  dart.setLibraryUri(mongo_dart.DbCommand, I[9]);
  dart.setFieldSignature(mongo_dart.DbCommand, () => ({
    __proto__: dart.getFields(mongo_dart.DbCommand.__proto__),
    db: dart.fieldType(dart.legacy(mongo_dart.Db))
  }));
  dart.defineLazy(mongo_dart.DbCommand, {
    /*mongo_dart.DbCommand.SYSTEM_NAMESPACE_COLLECTION*/get SYSTEM_NAMESPACE_COLLECTION() {
      return "system.namespaces";
    },
    /*mongo_dart.DbCommand.SYSTEM_INDEX_COLLECTION*/get SYSTEM_INDEX_COLLECTION() {
      return "system.indexes";
    },
    /*mongo_dart.DbCommand.SYSTEM_PROFILE_COLLECTION*/get SYSTEM_PROFILE_COLLECTION() {
      return "system.profile";
    },
    /*mongo_dart.DbCommand.SYSTEM_USER_COLLECTION*/get SYSTEM_USER_COLLECTION() {
      return "system.users";
    },
    /*mongo_dart.DbCommand.SYSTEM_COMMAND_COLLECTION*/get SYSTEM_COMMAND_COLLECTION() {
      return "$cmd";
    }
  }, true);
  var message$ = dart.privateName(mongo_dart, "MongoDartError.message");
  mongo_dart.MongoDartError = class MongoDartError extends core.Error {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MongoDart Error: " + dart.str(this.message);
    }
  };
  (mongo_dart.MongoDartError.new = function(message) {
    this[message$] = message;
    mongo_dart.MongoDartError.__proto__.new.call(this);
    ;
  }).prototype = mongo_dart.MongoDartError.prototype;
  dart.addTypeTests(mongo_dart.MongoDartError);
  dart.addTypeCaches(mongo_dart.MongoDartError);
  dart.setMethodSignature(mongo_dart.MongoDartError, () => ({
    __proto__: dart.getMethods(mongo_dart.MongoDartError.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mongo_dart.MongoDartError, I[9]);
  dart.setFieldSignature(mongo_dart.MongoDartError, () => ({
    __proto__: dart.getFields(mongo_dart.MongoDartError.__proto__),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoDartError, ['toString']);
  var cursorId$ = dart.privateName(mongo_dart, "MongoGetMoreMessage.cursorId");
  var numberToReturn$0 = dart.privateName(mongo_dart, "MongoGetMoreMessage.numberToReturn");
  mongo_dart.MongoGetMoreMessage = class MongoGetMoreMessage extends mongo_dart.MongoMessage {
    get cursorId() {
      return this[cursorId$];
    }
    set cursorId(value) {
      this[cursorId$] = value;
    }
    get numberToReturn() {
      return this[numberToReturn$0];
    }
    set numberToReturn(value) {
      this[numberToReturn$0] = value;
    }
    get messageLength() {
      return 16 + 4 + dart.notNull(this[_collectionFullName].byteLength()) + 4 + 8;
    }
    serialize() {
      let buffer = new bson.BsonBinary.new(this.messageLength);
      this.writeMessageHeaderTo(buffer);
      buffer.writeInt(0);
      this[_collectionFullName].packValue(buffer);
      buffer.writeInt(this.numberToReturn);
      buffer.writeInt64(this.cursorId);
      buffer.offset = 0;
      return buffer;
    }
    toString() {
      return "MongoGetMoreMessage(" + dart.str(this.requestId) + ", " + dart.str(this[_collectionFullName].value) + ", " + dart.str(this.cursorId) + ")";
    }
  };
  (mongo_dart.MongoGetMoreMessage.new = function(collectionFullName, cursorId, numberToReturn = 20) {
    this[_collectionFullName] = null;
    this[cursorId$] = cursorId;
    this[numberToReturn$0] = numberToReturn;
    mongo_dart.MongoGetMoreMessage.__proto__.new.call(this);
    this[_collectionFullName] = new bson.BsonCString.new(collectionFullName);
    this.opcode = mongo_dart.MongoMessage.GetMore;
  }).prototype = mongo_dart.MongoGetMoreMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoGetMoreMessage);
  dart.addTypeCaches(mongo_dart.MongoGetMoreMessage);
  dart.setLibraryUri(mongo_dart.MongoGetMoreMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoGetMoreMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoGetMoreMessage.__proto__),
    [_collectionFullName]: dart.fieldType(dart.legacy(bson.BsonCString)),
    cursorId: dart.fieldType(dart.legacy(core.int)),
    numberToReturn: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoGetMoreMessage, ['toString']);
  var flags$1 = dart.privateName(mongo_dart, "MongoInsertMessage.flags");
  var _documents = dart.privateName(mongo_dart, "_documents");
  mongo_dart.MongoInsertMessage = class MongoInsertMessage extends mongo_dart.MongoMessage {
    get flags() {
      return this[flags$1];
    }
    set flags(value) {
      this[flags$1] = value;
    }
    get messageLength() {
      let docsSize = 0;
      for (let _doc of this[_documents]) {
        docsSize = docsSize + dart.notNull(_doc.byteLength());
      }
      let result = 16 + 4 + dart.notNull(this[_collectionFullName].byteLength()) + docsSize;
      return result;
    }
    serialize() {
      let buffer = new bson.BsonBinary.new(this.messageLength);
      this.writeMessageHeaderTo(buffer);
      buffer.writeInt(this.flags);
      this[_collectionFullName].packValue(buffer);
      for (let _doc of this[_documents]) {
        _doc.packValue(buffer);
      }
      buffer.offset = 0;
      return buffer;
    }
    toString() {
      if (this[_documents][$length] === 1) {
        return "MongoInserMessage(" + dart.str(this.requestId) + ", " + dart.str(this[_collectionFullName].value) + ", " + dart.str(this[_documents][$_get](0).value) + ")";
      }
      return "MongoInserMessage(" + dart.str(this.requestId) + ", " + dart.str(this[_collectionFullName].value) + ", " + dart.str(this[_documents][$length]) + " documents)";
    }
  };
  (mongo_dart.MongoInsertMessage.new = function(collectionFullName, documents, flags = 0) {
    this[_collectionFullName] = null;
    this[_documents] = null;
    this[flags$1] = flags;
    mongo_dart.MongoInsertMessage.__proto__.new.call(this);
    this[_collectionFullName] = new bson.BsonCString.new(collectionFullName);
    this[_documents] = T.JSArrayOfBsonMapL().of([]);
    for (let document of documents) {
      this[_documents][$add](new bson.BsonMap.new(document));
    }
    this.opcode = mongo_dart.MongoMessage.Insert;
  }).prototype = mongo_dart.MongoInsertMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoInsertMessage);
  dart.addTypeCaches(mongo_dart.MongoInsertMessage);
  dart.setLibraryUri(mongo_dart.MongoInsertMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoInsertMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoInsertMessage.__proto__),
    [_collectionFullName]: dart.fieldType(dart.legacy(bson.BsonCString)),
    flags: dart.fieldType(dart.legacy(core.int)),
    [_documents]: dart.fieldType(dart.legacy(core.List$(dart.legacy(bson.BsonMap))))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoInsertMessage, ['toString']);
  var cursorId$0 = dart.privateName(mongo_dart, "MongoKillCursorsMessage.cursorId");
  mongo_dart.MongoKillCursorsMessage = class MongoKillCursorsMessage extends mongo_dart.MongoMessage {
    get cursorId() {
      return this[cursorId$0];
    }
    set cursorId(value) {
      this[cursorId$0] = value;
    }
    get messageLength() {
      return 16 + 4 + 4 + 8;
    }
    serialize() {
      let buffer = new bson.BsonBinary.new(this.messageLength);
      this.writeMessageHeaderTo(buffer);
      buffer.writeInt(0);
      buffer.writeInt(1);
      buffer.writeInt64(this.cursorId);
      buffer.offset = 0;
      return buffer;
    }
    toString() {
      return "MongoKillCursorsMessage(" + dart.str(this.requestId) + ", " + dart.str(this.cursorId) + ")";
    }
  };
  (mongo_dart.MongoKillCursorsMessage.new = function(cursorId) {
    this[cursorId$0] = cursorId;
    mongo_dart.MongoKillCursorsMessage.__proto__.new.call(this);
    this.opcode = mongo_dart.MongoMessage.KillCursors;
  }).prototype = mongo_dart.MongoKillCursorsMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoKillCursorsMessage);
  dart.addTypeCaches(mongo_dart.MongoKillCursorsMessage);
  dart.setLibraryUri(mongo_dart.MongoKillCursorsMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoKillCursorsMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoKillCursorsMessage.__proto__),
    cursorId: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoKillCursorsMessage, ['toString']);
  mongo_dart._Statics = class _Statics extends core.Object {
    static get nextRequestId() {
      mongo_dart._Statics._requestId == null ? mongo_dart._Statics._requestId = 1 : null;
      return mongo_dart._Statics._requestId = dart.notNull(mongo_dart._Statics._requestId) + 1;
    }
  };
  (mongo_dart._Statics.new = function() {
    ;
  }).prototype = mongo_dart._Statics.prototype;
  dart.addTypeTests(mongo_dart._Statics);
  dart.addTypeCaches(mongo_dart._Statics);
  dart.setLibraryUri(mongo_dart._Statics, I[9]);
  dart.defineLazy(mongo_dart._Statics, {
    /*mongo_dart._Statics._requestId*/get _requestId() {
      return null;
    },
    set _requestId(_) {}
  }, true);
  var flags$2 = dart.privateName(mongo_dart, "MongoRemoveMessage.flags");
  var _selector = dart.privateName(mongo_dart, "_selector");
  mongo_dart.MongoRemoveMessage = class MongoRemoveMessage extends mongo_dart.MongoMessage {
    get flags() {
      return this[flags$2];
    }
    set flags(value) {
      this[flags$2] = value;
    }
    get messageLength() {
      return 16 + 4 + dart.notNull(this[_collectionFullName].byteLength()) + 4 + dart.notNull(this[_selector].byteLength());
    }
    serialize() {
      let buffer = new bson.BsonBinary.new(this.messageLength);
      this.writeMessageHeaderTo(buffer);
      buffer.writeInt(0);
      this[_collectionFullName].packValue(buffer);
      buffer.writeInt(this.flags);
      this[_selector].packValue(buffer);
      buffer.offset = 0;
      return buffer;
    }
    toString() {
      return "MongoRemoveMessage(" + dart.str(this.requestId) + ", " + dart.str(this[_collectionFullName].value) + ", " + dart.str(this[_selector].value) + ")";
    }
  };
  (mongo_dart.MongoRemoveMessage.new = function(collectionFullName, selector = C[20] || CT.C20, flags = 0) {
    this[_collectionFullName] = null;
    this[_selector] = null;
    this[flags$2] = flags;
    mongo_dart.MongoRemoveMessage.__proto__.new.call(this);
    this[_collectionFullName] = new bson.BsonCString.new(collectionFullName);
    this[_selector] = new bson.BsonMap.new(selector);
    this.opcode = mongo_dart.MongoMessage.Delete;
  }).prototype = mongo_dart.MongoRemoveMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoRemoveMessage);
  dart.addTypeCaches(mongo_dart.MongoRemoveMessage);
  dart.setLibraryUri(mongo_dart.MongoRemoveMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoRemoveMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoRemoveMessage.__proto__),
    [_collectionFullName]: dart.fieldType(dart.legacy(bson.BsonCString)),
    flags: dart.fieldType(dart.legacy(core.int)),
    [_selector]: dart.fieldType(dart.legacy(bson.BsonMap))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoRemoveMessage, ['toString']);
  var responseFlags$ = dart.privateName(mongo_dart, "MongoReplyMessage.responseFlags");
  var cursorId$1 = dart.privateName(mongo_dart, "MongoReplyMessage.cursorId");
  var startingFrom = dart.privateName(mongo_dart, "MongoReplyMessage.startingFrom");
  var numberReturned = dart.privateName(mongo_dart, "MongoReplyMessage.numberReturned");
  var documents = dart.privateName(mongo_dart, "MongoReplyMessage.documents");
  mongo_dart.MongoReplyMessage = class MongoReplyMessage extends mongo_response_message.MongoResponseMessage {
    get responseFlags() {
      return this[responseFlags$];
    }
    set responseFlags(value) {
      this[responseFlags$] = value;
    }
    get cursorId() {
      return this[cursorId$1];
    }
    set cursorId(value) {
      this[cursorId$1] = value;
    }
    get startingFrom() {
      return this[startingFrom];
    }
    set startingFrom(value) {
      this[startingFrom] = value;
    }
    get numberReturned() {
      return this[numberReturned];
    }
    set numberReturned(value) {
      this[numberReturned] = value;
    }
    get documents() {
      return this[documents];
    }
    set documents(value) {
      this[documents] = value;
    }
    deserialize(buffer) {
      this.readMessageHeaderFrom(buffer);
      this.responseFlags = buffer.readInt32();
      this.cursorId = buffer.readInt64();
      this.startingFrom = buffer.readInt32();
      this.numberReturned = buffer.readInt32();
      this.documents = T.ListOfMapLOfStringL$dynamic().new(this.numberReturned);
      for (let n = 0; n < dart.notNull(this.numberReturned); n = n + 1) {
        let doc = new bson.BsonMap.new(new (T.IdentityMapOfStringL$dynamic()).new());
        doc.unpackValue(buffer);
        this.documents[$_set](n, T.MapLOfStringL$dynamic().as(doc.value));
      }
      return this;
    }
    toString() {
      if (this.documents[$length] === 1) {
        return "MongoReplyMessage(ResponseTo:" + dart.str(this.responseTo) + ", cursorId: " + dart.str(this.cursorId) + ", " + "numberReturned:" + dart.str(this.numberReturned) + ", responseFlags:" + dart.str(this.responseFlags) + ", " + dart.str(this.documents[$_get](0)) + ")";
      }
      return "MongoReplyMessage(ResponseTo:" + dart.str(this.responseTo) + ", cursorId: " + dart.str(this.cursorId) + ", " + "numberReturned:" + dart.str(this.numberReturned) + ", responseFlags:" + dart.str(this.responseFlags) + ", " + dart.str(this.documents) + ")";
    }
  };
  (mongo_dart.MongoReplyMessage.new = function() {
    this[responseFlags$] = null;
    this[cursorId$1] = -1;
    this[startingFrom] = null;
    this[numberReturned] = -1;
    this[documents] = null;
    mongo_dart.MongoReplyMessage.__proto__.new.call(this);
    ;
  }).prototype = mongo_dart.MongoReplyMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoReplyMessage);
  dart.addTypeCaches(mongo_dart.MongoReplyMessage);
  dart.setLibraryUri(mongo_dart.MongoReplyMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoReplyMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoReplyMessage.__proto__),
    responseFlags: dart.fieldType(dart.legacy(core.int)),
    cursorId: dart.fieldType(dart.legacy(core.int)),
    startingFrom: dart.fieldType(dart.legacy(core.int)),
    numberReturned: dart.fieldType(dart.legacy(core.int)),
    documents: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoReplyMessage, ['toString']);
  dart.defineLazy(mongo_dart.MongoReplyMessage, {
    /*mongo_dart.MongoReplyMessage.FLAGS_CURSOR_NONE*/get FLAGS_CURSOR_NONE() {
      return 0;
    },
    /*mongo_dart.MongoReplyMessage.FLAGS_CURSOR_NOT_FOUND*/get FLAGS_CURSOR_NOT_FOUND() {
      return 1;
    },
    /*mongo_dart.MongoReplyMessage.FLAGS_QUERY_FAILURE*/get FLAGS_QUERY_FAILURE() {
      return 2;
    },
    /*mongo_dart.MongoReplyMessage.FLAGS_SHARD_CONFIGSTALE*/get FLAGS_SHARD_CONFIGSTALE() {
      return 4;
    },
    /*mongo_dart.MongoReplyMessage.FLAGS_AWAIT_CAPABLE*/get FLAGS_AWAIT_CAPABLE() {
      return 8;
    }
  }, true);
  var flags$3 = dart.privateName(mongo_dart, "MongoUpdateMessage.flags");
  var numberToSkip = dart.privateName(mongo_dart, "MongoUpdateMessage.numberToSkip");
  var numberToReturn = dart.privateName(mongo_dart, "MongoUpdateMessage.numberToReturn");
  var _document = dart.privateName(mongo_dart, "_document");
  mongo_dart.MongoUpdateMessage = class MongoUpdateMessage extends mongo_dart.MongoMessage {
    get flags() {
      return this[flags$3];
    }
    set flags(value) {
      this[flags$3] = value;
    }
    get numberToSkip() {
      return this[numberToSkip];
    }
    set numberToSkip(value) {
      this[numberToSkip] = value;
    }
    get numberToReturn() {
      return this[numberToReturn];
    }
    set numberToReturn(value) {
      this[numberToReturn] = value;
    }
    get messageLength() {
      return 16 + 4 + dart.notNull(this[_collectionFullName].byteLength()) + 4 + dart.notNull(this[_selector].byteLength()) + dart.notNull(this[_document].byteLength());
    }
    serialize() {
      let buffer = new bson.BsonBinary.new(this.messageLength);
      this.writeMessageHeaderTo(buffer);
      buffer.writeInt(0);
      this[_collectionFullName].packValue(buffer);
      buffer.writeInt(this.flags);
      this[_selector].packValue(buffer);
      this[_document].packValue(buffer);
      buffer.offset = 0;
      return buffer;
    }
    toString() {
      return "MongoUpdateMessage(" + dart.str(this.requestId) + ", " + dart.str(this[_collectionFullName].value) + ", " + dart.str(this[_selector].value) + ", " + dart.str(this[_document].value) + ")";
    }
  };
  (mongo_dart.MongoUpdateMessage.new = function(collectionFullName, selector, document, flags) {
    this[_collectionFullName] = null;
    this[numberToSkip] = null;
    this[numberToReturn] = null;
    this[_selector] = null;
    this[_document] = null;
    this[flags$3] = flags;
    mongo_dart.MongoUpdateMessage.__proto__.new.call(this);
    this[_collectionFullName] = new bson.BsonCString.new(collectionFullName);
    this[_selector] = new bson.BsonMap.new(selector);
    if (T.ModifierBuilderL().is(document)) {
      document = dart.dload(document, 'map');
    }
    this[_document] = new bson.BsonMap.new(T.MapLOfStringL$dynamic().as(document));
    this.opcode = mongo_dart.MongoMessage.Update;
  }).prototype = mongo_dart.MongoUpdateMessage.prototype;
  dart.addTypeTests(mongo_dart.MongoUpdateMessage);
  dart.addTypeCaches(mongo_dart.MongoUpdateMessage);
  dart.setLibraryUri(mongo_dart.MongoUpdateMessage, I[9]);
  dart.setFieldSignature(mongo_dart.MongoUpdateMessage, () => ({
    __proto__: dart.getFields(mongo_dart.MongoUpdateMessage.__proto__),
    [_collectionFullName]: dart.fieldType(dart.legacy(bson.BsonCString)),
    flags: dart.fieldType(dart.legacy(core.int)),
    numberToSkip: dart.fieldType(dart.legacy(core.int)),
    numberToReturn: dart.fieldType(dart.legacy(core.int)),
    [_selector]: dart.fieldType(dart.legacy(bson.BsonMap)),
    [_document]: dart.fieldType(dart.legacy(bson.BsonMap))
  }));
  dart.defineExtensionMethods(mongo_dart.MongoUpdateMessage, ['toString']);
  var host$ = dart.privateName(mongo_dart, "ServerConfig.host");
  var port$ = dart.privateName(mongo_dart, "ServerConfig.port");
  var isSecure$ = dart.privateName(mongo_dart, "ServerConfig.isSecure");
  var userName = dart.privateName(mongo_dart, "ServerConfig.userName");
  var password$ = dart.privateName(mongo_dart, "ServerConfig.password");
  mongo_dart.ServerConfig = class ServerConfig extends core.Object {
    get host() {
      return this[host$];
    }
    set host(value) {
      this[host$] = value;
    }
    get port() {
      return this[port$];
    }
    set port(value) {
      this[port$] = value;
    }
    get isSecure() {
      return this[isSecure$];
    }
    set isSecure(value) {
      this[isSecure$] = value;
    }
    get userName() {
      return this[userName];
    }
    set userName(value) {
      this[userName] = value;
    }
    get password() {
      return this[password$];
    }
    set password(value) {
      this[password$] = value;
    }
    get hostUrl() {
      return dart.str(this.host) + ":" + dart.toString(this.port);
    }
  };
  (mongo_dart.ServerConfig.new = function(host = "127.0.0.1", port = 27017, isSecure = false) {
    this[userName] = null;
    this[password$] = null;
    this[host$] = host;
    this[port$] = port;
    this[isSecure$] = isSecure;
    ;
  }).prototype = mongo_dart.ServerConfig.prototype;
  dart.addTypeTests(mongo_dart.ServerConfig);
  dart.addTypeCaches(mongo_dart.ServerConfig);
  dart.setGetterSignature(mongo_dart.ServerConfig, () => ({
    __proto__: dart.getGetters(mongo_dart.ServerConfig.__proto__),
    hostUrl: dart.legacy(core.String)
  }));
  dart.setLibraryUri(mongo_dart.ServerConfig, I[9]);
  dart.setFieldSignature(mongo_dart.ServerConfig, () => ({
    __proto__: dart.getFields(mongo_dart.ServerConfig.__proto__),
    host: dart.fieldType(dart.legacy(core.String)),
    port: dart.fieldType(dart.legacy(core.int)),
    isSecure: dart.fieldType(dart.legacy(core.bool)),
    userName: dart.fieldType(dart.legacy(core.String)),
    password: dart.fieldType(dart.legacy(core.String))
  }));
  var _value$ = dart.privateName(mongo_dart, "State._value");
  var _value = dart.privateName(mongo_dart, "_value");
  mongo_dart.State = class State extends core.Object {
    get [_value]() {
      return this[_value$];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toString() {
      return "State." + dart.str(this[_value]);
    }
  };
  (mongo_dart.State._internal = function(_value) {
    this[_value$] = _value;
    ;
  }).prototype = mongo_dart.State.prototype;
  dart.addTypeTests(mongo_dart.State);
  dart.addTypeCaches(mongo_dart.State);
  dart.setMethodSignature(mongo_dart.State, () => ({
    __proto__: dart.getMethods(mongo_dart.State.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mongo_dart.State, I[9]);
  dart.setFieldSignature(mongo_dart.State, () => ({
    __proto__: dart.getFields(mongo_dart.State.__proto__),
    [_value]: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(mongo_dart.State, ['toString']);
  dart.defineLazy(mongo_dart.State, {
    /*mongo_dart.State.INIT*/get INIT() {
      return C[21] || CT.C21;
    },
    /*mongo_dart.State.OPENING*/get OPENING() {
      return C[22] || CT.C22;
    },
    /*mongo_dart.State.OPEN*/get OPEN() {
      return C[23] || CT.C23;
    },
    /*mongo_dart.State.CLOSING*/get CLOSING() {
      return C[24] || CT.C24;
    },
    /*mongo_dart.State.CLOSED*/get CLOSED() {
      return C[25] || CT.C25;
    }
  }, true);
  var fs = dart.privateName(mongo_dart, "GridFSFile.fs");
  var id = dart.privateName(mongo_dart, "GridFSFile.id");
  var filename = dart.privateName(mongo_dart, "GridFSFile.filename");
  var contentType = dart.privateName(mongo_dart, "GridFSFile.contentType");
  var length = dart.privateName(mongo_dart, "GridFSFile.length");
  var chunkSize = dart.privateName(mongo_dart, "GridFSFile.chunkSize");
  var uploadDate = dart.privateName(mongo_dart, "GridFSFile.uploadDate");
  var extraData = dart.privateName(mongo_dart, "GridFSFile.extraData");
  var fullContent = dart.privateName(mongo_dart, "GridFSFile.fullContent");
  var md5$ = dart.privateName(mongo_dart, "GridFSFile.md5");
  mongo_dart.GridFSFile = class GridFSFile extends core.Object {
    get fs() {
      return this[fs];
    }
    set fs(value) {
      this[fs] = value;
    }
    get id() {
      return this[id];
    }
    set id(value) {
      this[id] = value;
    }
    get filename() {
      return this[filename];
    }
    set filename(value) {
      this[filename] = value;
    }
    get contentType() {
      return this[contentType];
    }
    set contentType(value) {
      this[contentType] = value;
    }
    get length() {
      return this[length];
    }
    set length(value) {
      this[length] = value;
    }
    get chunkSize() {
      return this[chunkSize];
    }
    set chunkSize(value) {
      this[chunkSize] = value;
    }
    get uploadDate() {
      return this[uploadDate];
    }
    set uploadDate(value) {
      this[uploadDate] = value;
    }
    get extraData() {
      return this[extraData];
    }
    set extraData(value) {
      this[extraData] = value;
    }
    get fullContent() {
      return this[fullContent];
    }
    set fullContent(value) {
      this[fullContent] = value;
    }
    get md5() {
      return this[md5$];
    }
    set md5(value) {
      this[md5$] = value;
    }
    save() {
      if (this.fs == null) {
        dart.throw(new mongo_dart.MongoDartError.new("Need fs"));
      }
      let tempData = this.data;
      return this.fs.files.insert(tempData);
    }
    validate() {
      if (this.fs == null) {
        dart.throw(new mongo_dart.MongoDartError.new("no fs"));
      }
      if (this.md5 == null) {
        dart.throw(new mongo_dart.MongoDartError.new("no md5 stored"));
      }
      let completer = T.CompleterOfboolL().new();
      let dbCommand = new mongo_dart.DbCommand.new(this.fs.database, this.fs.bucketName, 0, 0, 1, new (T.IdentityMapOfStringL$dynamic()).from(["filemd5", this.id]), new (T.IdentityMapOfStringL$dynamic()).from(["md5", 1]));
      this.fs.database.executeDbCommand(dbCommand).then(core.Null, dart.fn(data => {
        if (data != null && dart.test(data[$containsKey]("md5"))) {
          completer.complete(core.identical(this.md5, data[$_get]("md5")));
        } else {
          completer.complete(false);
        }
      }, T.MapLOfStringL$dynamicToNull()));
      return completer.future;
    }
    numChunks() {
      return (this.length[$toDouble]() / dart.notNull(this.chunkSize))[$ceil]()[$toInt]();
    }
    get aliases() {
      return T.ListLOfStringL().as(this.extraData[$_get]("aliases"));
    }
    get metaData() {
      return T.MapLOfStringL$dynamic().as(this.extraData[$_get]("metadata"));
    }
    set metaData(metaData) {
      this.extraData[$_set]("metadata", metaData);
    }
    get data() {
      let result = new (T.IdentityMapOfStringL$dynamic()).from(["_id", this.id, "filename", this.filename, "contentType", this.contentType, "length", this.length, "chunkSize", this.chunkSize, "uploadDate", this.uploadDate, "md5", this.md5]);
      this.extraData[$forEach](dart.fn((key, value) => {
        result[$_set](key, value);
      }, T.StringLAndObjectLToNull()));
      return result;
    }
    set data(input) {
      let t10, t10$, t10$0;
      this.extraData = T.LinkedHashMapOfStringL$ObjectL().from(input);
      this.id = this.extraData[$remove]("_id");
      this.filename = (t10 = this.extraData[$remove]("filename"), t10 == null ? null : dart.toString(t10));
      this.contentType = (t10$ = this.extraData[$remove]("contentType"), t10$ == null ? null : dart.toString(t10$));
      this.length = T.intL().as(this.extraData[$remove]("length"));
      this.chunkSize = T.intL().as(this.extraData[$remove]("chunkSize"));
      this.uploadDate = T.DateTimeL().as(this.extraData[$remove]("uploadDate"));
      this.md5 = (t10$0 = this.extraData[$remove]("md5"), t10$0 == null ? null : dart.toString(t10$0));
    }
    setGridFS(fs) {
      this.fs = fs;
    }
  };
  (mongo_dart.GridFSFile.new = function(data = C[20] || CT.C20) {
    this[fs] = null;
    this[id] = null;
    this[filename] = null;
    this[contentType] = null;
    this[length] = null;
    this[chunkSize] = null;
    this[uploadDate] = null;
    this[extraData] = null;
    this[fullContent] = null;
    this[md5$] = null;
    this.data = data;
  }).prototype = mongo_dart.GridFSFile.prototype;
  dart.addTypeTests(mongo_dart.GridFSFile);
  dart.addTypeCaches(mongo_dart.GridFSFile);
  dart.setMethodSignature(mongo_dart.GridFSFile, () => ({
    __proto__: dart.getMethods(mongo_dart.GridFSFile.__proto__),
    save: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), []),
    validate: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    numChunks: dart.fnType(dart.legacy(core.int), []),
    setGridFS: dart.fnType(dart.void, [dart.legacy(mongo_dart.GridFS)])
  }));
  dart.setGetterSignature(mongo_dart.GridFSFile, () => ({
    __proto__: dart.getGetters(mongo_dart.GridFSFile.__proto__),
    aliases: dart.legacy(core.List$(dart.legacy(core.String))),
    metaData: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)),
    data: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))
  }));
  dart.setSetterSignature(mongo_dart.GridFSFile, () => ({
    __proto__: dart.getSetters(mongo_dart.GridFSFile.__proto__),
    metaData: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)),
    data: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))
  }));
  dart.setLibraryUri(mongo_dart.GridFSFile, I[9]);
  dart.setFieldSignature(mongo_dart.GridFSFile, () => ({
    __proto__: dart.getFields(mongo_dart.GridFSFile.__proto__),
    fs: dart.fieldType(dart.legacy(mongo_dart.GridFS)),
    id: dart.fieldType(dart.dynamic),
    filename: dart.fieldType(dart.legacy(core.String)),
    contentType: dart.fieldType(dart.legacy(core.String)),
    length: dart.fieldType(dart.legacy(core.int)),
    chunkSize: dart.fieldType(dart.legacy(core.int)),
    uploadDate: dart.fieldType(dart.legacy(core.DateTime)),
    extraData: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.Object)))),
    fullContent: dart.fieldType(dart.legacy(core.StringBuffer)),
    md5: dart.fieldType(dart.legacy(core.String))
  }));
  var input = dart.privateName(mongo_dart, "GridIn.input");
  var savedChunks = dart.privateName(mongo_dart, "GridIn.savedChunks");
  var currentChunkNumber = dart.privateName(mongo_dart, "GridIn.currentChunkNumber");
  var currentBufferPosition = dart.privateName(mongo_dart, "GridIn.currentBufferPosition");
  var totalBytes = dart.privateName(mongo_dart, "GridIn.totalBytes");
  var fs$ = dart.privateName(mongo_dart, "GridIn.fs");
  var filename$ = dart.privateName(mongo_dart, "GridIn.filename");
  var contentToDigest = dart.privateName(mongo_dart, "GridIn.contentToDigest");
  mongo_dart.GridIn = class GridIn extends mongo_dart.GridFSFile {
    get input() {
      return this[input];
    }
    set input(value) {
      this[input] = value;
    }
    get savedChunks() {
      return this[savedChunks];
    }
    set savedChunks(value) {
      this[savedChunks] = value;
    }
    get currentChunkNumber() {
      return this[currentChunkNumber];
    }
    set currentChunkNumber(value) {
      this[currentChunkNumber] = value;
    }
    get currentBufferPosition() {
      return this[currentBufferPosition];
    }
    set currentBufferPosition(value) {
      this[currentBufferPosition] = value;
    }
    get totalBytes() {
      return this[totalBytes];
    }
    set totalBytes(value) {
      this[totalBytes] = value;
    }
    get fs() {
      return this[fs$];
    }
    set fs(value) {
      this[fs$] = value;
    }
    get filename() {
      return this[filename$];
    }
    set filename(value) {
      this[filename$] = value;
    }
    get contentToDigest() {
      return this[contentToDigest];
    }
    set contentToDigest(value) {
      this[contentToDigest] = value;
    }
    save(chunkSize = null) {
      chunkSize == null ? chunkSize = this.chunkSize : null;
      let result = null;
      if (!dart.test(this.savedChunks)) {
        result = this.saveChunks(chunkSize);
      } else {
        result = T.FutureOfMapLOfStringL$dynamic().value(new (T.IdentityMapOfStringL$dynamic()).from(["ok", 1.0]));
      }
      return result;
    }
    saveChunks(chunkSize = 0) {
      let futures = T.JSArrayOfFutureL().of([]);
      let completer = T.CompleterOfMapLOfStringL$dynamic().new();
      const _onDone = () => {
        async.Future.wait(dart.dynamic, futures).then(dart.dynamic, dart.fn(list => this.finishData(), T.ListLToFutureL())).then(core.Null, dart.fn(map => {
          completer.complete(new (T.IdentityMapOfStringL$dynamic()).new());
        }, T.dynamicToNull()));
      };
      dart.fn(_onDone, T.VoidTovoid());
      chunkSize == null ? chunkSize = this.chunkSize : null;
      if (dart.test(this.savedChunks)) {
        dart.throw(new mongo_dart.MongoDartError.new("chunks already saved!"));
      }
      if (dart.notNull(chunkSize) <= 0 || dart.notNull(chunkSize) > dart.notNull(mongo_dart.GridFS.MAX_CHUNKSIZE)) {
        dart.throw(new mongo_dart.MongoDartError.new("chunkSize must be greater than zero and less than or equal to GridFS.MAX_CHUNKSIZE"));
      }
      this.input.listen(dart.fn(data => {
        futures[$add](this.dumpBuffer(data));
      }, T.ListLOfintLToNull()), {onDone: _onDone});
      return completer.future;
    }
    dumpBuffer(writeBuffer) {
      this.contentToDigest[$addAll](writeBuffer);
      if (dart.test(writeBuffer[$isEmpty])) {
        return T.FutureOfMapLOfStringL$dynamic().value(new (T.IdentityMapOfStringL$dynamic()).new());
      }
      let chunk = new (T.IdentityMapOfStringL$dynamic()).from(["files_id", this.id, "n", this.currentChunkNumber, "data", new bson.BsonBinary.from(writeBuffer)]);
      this.currentChunkNumber = dart.notNull(this.currentChunkNumber) + 1;
      this.totalBytes = dart.notNull(this.totalBytes) + dart.notNull(writeBuffer[$length]);
      this.contentToDigest[$addAll](writeBuffer);
      this.currentBufferPosition = 0;
      return this.fs.chunks.insert(chunk);
    }
    finishData() {
      if (!dart.test(this.savedChunks)) {
        this.md5 = dart.toString(md5.md5.convert(this.contentToDigest));
        this.length = this.totalBytes;
        this.savedChunks = true;
      }
      return super.save();
    }
  };
  (mongo_dart.GridIn.new = function(fs, filename = null, inputStream = null) {
    this[input] = null;
    this[savedChunks] = false;
    this[currentChunkNumber] = 0;
    this[currentBufferPosition] = 0;
    this[totalBytes] = 0;
    this[filename$] = null;
    this[contentToDigest] = T.JSArrayOfintL().of([]);
    this[fs$] = fs;
    mongo_dart.GridIn.__proto__.new.call(this);
    this.id = new bson.ObjectId.new();
    this.chunkSize = mongo_dart.GridFS.DEFAULT_CHUNKSIZE;
    this.input = new mongo_dart.ChunkHandler.new(this.chunkSize).transformer.bind(inputStream);
    this.uploadDate = new core.DateTime.now();
    this.filename = filename;
  }).prototype = mongo_dart.GridIn.prototype;
  dart.addTypeTests(mongo_dart.GridIn);
  dart.addTypeCaches(mongo_dart.GridIn);
  dart.setMethodSignature(mongo_dart.GridIn, () => ({
    __proto__: dart.getMethods(mongo_dart.GridIn.__proto__),
    save: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.legacy(core.int)]),
    saveChunks: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [], [dart.legacy(core.int)]),
    dumpBuffer: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    finishData: dart.fnType(dart.legacy(async.Future), [])
  }));
  dart.setLibraryUri(mongo_dart.GridIn, I[9]);
  dart.setFieldSignature(mongo_dart.GridIn, () => ({
    __proto__: dart.getFields(mongo_dart.GridIn.__proto__),
    input: dart.fieldType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(core.int)))))),
    savedChunks: dart.fieldType(dart.legacy(core.bool)),
    currentChunkNumber: dart.fieldType(dart.legacy(core.int)),
    currentBufferPosition: dart.fieldType(dart.legacy(core.int)),
    totalBytes: dart.fieldType(dart.legacy(core.int)),
    fs: dart.fieldType(dart.legacy(mongo_dart.GridFS)),
    filename: dart.fieldType(dart.legacy(core.String)),
    contentToDigest: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  mongo_dart.GridOut = class GridOut extends mongo_dart.GridFSFile {
    writeToFilename(filename) {
      return this.writeToFile(io.File.new(filename));
    }
    writeToFile(file) {
      let sink = file.openWrite({mode: io.FileMode.write});
      this.writeTo(sink).then(core.Null, dart.fn(length => {
        sink.close();
      }, T.intLToNull()));
      return sink.done;
    }
    writeTo(out) {
      let length = 0;
      let completer = T.CompleterOfintL().new();
      function addToSink(chunk) {
        let data = T.BsonBinaryL().as(chunk[$_get]("data"));
        out.add(data.byteList);
        length = length + dart.notNull(data.byteList[$length]);
      }
      dart.fn(addToSink, T.MapLOfStringL$dynamicTovoid());
      this.fs.chunks.find(mongo_dart_query.where.eq("files_id", this.id).sortBy("n")).forEach(addToSink).then(dart.void, dart.fn(_ => completer.complete(length), T.dynamicTovoid()));
      return completer.future;
    }
  };
  (mongo_dart.GridOut.new = function(data = null) {
    mongo_dart.GridOut.__proto__.new.call(this, data);
    ;
  }).prototype = mongo_dart.GridOut.prototype;
  dart.addTypeTests(mongo_dart.GridOut);
  dart.addTypeCaches(mongo_dart.GridOut);
  dart.setMethodSignature(mongo_dart.GridOut, () => ({
    __proto__: dart.getMethods(mongo_dart.GridOut.__proto__),
    writeToFilename: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)]),
    writeToFile: dart.fnType(dart.legacy(async.Future), [dart.legacy(io.File)]),
    writeTo: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(io.IOSink)])
  }));
  dart.setLibraryUri(mongo_dart.GridOut, I[9]);
  var database$ = dart.privateName(mongo_dart, "GridFS.database");
  var files = dart.privateName(mongo_dart, "GridFS.files");
  var chunks = dart.privateName(mongo_dart, "GridFS.chunks");
  var bucketName = dart.privateName(mongo_dart, "GridFS.bucketName");
  mongo_dart.GridFS = class GridFS extends core.Object {
    get database() {
      return this[database$];
    }
    set database(value) {
      this[database$] = value;
    }
    get files() {
      return this[files];
    }
    set files(value) {
      this[files] = value;
    }
    get chunks() {
      return this[chunks];
    }
    set chunks(value) {
      this[chunks] = value;
    }
    get bucketName() {
      return this[bucketName];
    }
    set bucketName(value) {
      this[bucketName] = value;
    }
    getFileList(selectorBuilder) {
      return this.files.find(selectorBuilder.sortBy("filename", {descending: true}));
    }
    findOne(selector) {
      let completer = T.CompleterOfGridOutL().new();
      this.files.findOne(selector).then(core.Null, dart.fn(file => {
        let result = null;
        if (file != null) {
          result = new mongo_dart.GridOut.new(file);
          result.setGridFS(this);
        }
        completer.complete(result);
      }, T.MapLOfStringL$dynamicToNull()));
      return completer.future;
    }
    getFile(fileName) {
      return this.findOne(mongo_dart_query.where.eq("filename", fileName));
    }
    createFile(input, filename) {
      return new mongo_dart.GridIn.new(this, filename, input);
    }
  };
  (mongo_dart.GridFS.new = function(database, collection = "fs") {
    this[files] = null;
    this[chunks] = null;
    this[bucketName] = null;
    this[database$] = database;
    this.files = this.database.collection(dart.str(collection) + ".files");
    this.chunks = this.database.collection(dart.str(collection) + ".chunks");
    this.bucketName = collection;
  }).prototype = mongo_dart.GridFS.prototype;
  dart.addTypeTests(mongo_dart.GridFS);
  dart.addTypeCaches(mongo_dart.GridFS);
  dart.setMethodSignature(mongo_dart.GridFS, () => ({
    __proto__: dart.getMethods(mongo_dart.GridFS.__proto__),
    getFileList: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), [dart.legacy(mongo_dart_query.SelectorBuilder)]),
    findOne: dart.fnType(dart.legacy(async.Future$(dart.legacy(mongo_dart.GridOut))), [dart.dynamic]),
    getFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(mongo_dart.GridOut))), [dart.legacy(core.String)]),
    createFile: dart.fnType(dart.legacy(mongo_dart.GridIn), [dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(core.int))))), dart.legacy(core.String)])
  }));
  dart.setLibraryUri(mongo_dart.GridFS, I[9]);
  dart.setFieldSignature(mongo_dart.GridFS, () => ({
    __proto__: dart.getFields(mongo_dart.GridFS.__proto__),
    database: dart.fieldType(dart.legacy(mongo_dart.Db)),
    files: dart.fieldType(dart.legacy(mongo_dart.DbCollection)),
    chunks: dart.fieldType(dart.legacy(mongo_dart.DbCollection)),
    bucketName: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(mongo_dart.GridFS, {
    /*mongo_dart.GridFS.DEFAULT_CHUNKSIZE*/get DEFAULT_CHUNKSIZE() {
      return 256 * 1024;
    },
    set DEFAULT_CHUNKSIZE(_) {},
    /*mongo_dart.GridFS.MAX_CHUNKSIZE*/get MAX_CHUNKSIZE() {
      return (3.5 * 1000 * 1000)[$toInt]();
    },
    set MAX_CHUNKSIZE(_) {}
  }, true);
  var chunkSize$ = dart.privateName(mongo_dart, "ChunkHandler.chunkSize");
  var carry = dart.privateName(mongo_dart, "ChunkHandler.carry");
  var _handle = dart.privateName(mongo_dart, "_handle");
  mongo_dart.ChunkHandler = class ChunkHandler extends core.Object {
    get chunkSize() {
      return this[chunkSize$];
    }
    set chunkSize(value) {
      this[chunkSize$] = value;
    }
    get carry() {
      return this[carry];
    }
    set carry(value) {
      this[carry] = value;
    }
    [_handle](data, sink, isClosing) {
      if (this.carry != null) {
        this.carry[$addAll](data);
        data = this.carry;
        this.carry = null;
      }
      let pos = 0;
      while (pos + dart.notNull(this.chunkSize) < dart.notNull(data[$length])) {
        sink.add(data[$sublist](pos, pos + dart.notNull(this.chunkSize)));
        pos = pos + dart.notNull(this.chunkSize);
      }
      if (dart.notNull(data[$length]) > pos) {
        this.carry = T.JSArrayOfintL().of([]);
        this.carry[$addAll](data[$sublist](pos));
        if (dart.test(isClosing)) {
          sink.add(this.carry);
        }
      }
    }
    handleData(data, sink) {
      this[_handle](data, sink, false);
    }
    handleError(error, stackTrace, sink) {
      core.print(error);
      core.print(stackTrace);
    }
    handleDone(sink) {
      this[_handle](T.JSArrayOfintL().of([]), sink, true);
      sink.close();
    }
    get transformer() {
      return new (T._StreamHandlerTransformerOfListLOfintL$ListLOfintL()).new({handleData: dart.bind(this, 'handleData'), handleDone: dart.bind(this, 'handleDone')});
    }
  };
  (mongo_dart.ChunkHandler.new = function(chunkSize = 262144) {
    this[carry] = null;
    this[chunkSize$] = chunkSize;
    ;
  }).prototype = mongo_dart.ChunkHandler.prototype;
  dart.addTypeTests(mongo_dart.ChunkHandler);
  dart.addTypeCaches(mongo_dart.ChunkHandler);
  dart.setMethodSignature(mongo_dart.ChunkHandler, () => ({
    __proto__: dart.getMethods(mongo_dart.ChunkHandler.__proto__),
    [_handle]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(async.EventSink$(dart.legacy(core.List$(dart.legacy(core.int))))), dart.legacy(core.bool)]),
    handleData: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(async.EventSink$(dart.legacy(core.List$(dart.legacy(core.int)))))]),
    handleError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.StackTrace), dart.legacy(async.EventSink$(dart.legacy(core.List$(dart.legacy(core.int)))))]),
    handleDone: dart.fnType(dart.void, [dart.legacy(async.EventSink$(dart.legacy(core.List$(dart.legacy(core.int)))))])
  }));
  dart.setGetterSignature(mongo_dart.ChunkHandler, () => ({
    __proto__: dart.getGetters(mongo_dart.ChunkHandler.__proto__),
    transformer: dart.legacy(async.StreamTransformer$(dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.List$(dart.legacy(core.int)))))
  }));
  dart.setLibraryUri(mongo_dart.ChunkHandler, I[9]);
  dart.setFieldSignature(mongo_dart.ChunkHandler, () => ({
    __proto__: dart.getFields(mongo_dart.ChunkHandler.__proto__),
    chunkSize: dart.fieldType(dart.legacy(core.int)),
    carry: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  mongo_dart._ServerCapabilities = class _ServerCapabilities extends core.Object {
    getParamsFromIstMaster(isMaster) {
      if (dart.test(isMaster[$containsKey]("maxWireVersion"))) {
        this.maxWireVersion = T.intL().as(isMaster[$_get]("maxWireVersion"));
      }
      if (dart.notNull(this.maxWireVersion) >= 1) {
        this.aggregationCursor = true;
        this.authCommands = true;
      }
      if (dart.notNull(this.maxWireVersion) >= 2) {
        this.writeCommands = true;
      }
      if (dart.notNull(this.maxWireVersion) >= 3) {
        this.listCollections = true;
        this.listIndexes = true;
      }
      if (dart.notNull(this.maxWireVersion) >= 6) {
        this.supportsOpMsg = true;
      }
    }
  };
  (mongo_dart._ServerCapabilities.new = function() {
    this.maxWireVersion = 0;
    this.aggregationCursor = false;
    this.writeCommands = false;
    this.authCommands = false;
    this.listCollections = false;
    this.listIndexes = false;
    this.maxNumberOfDocsInBatch = 1000;
    this.supportsOpMsg = false;
    ;
  }).prototype = mongo_dart._ServerCapabilities.prototype;
  dart.addTypeTests(mongo_dart._ServerCapabilities);
  dart.addTypeCaches(mongo_dart._ServerCapabilities);
  dart.setMethodSignature(mongo_dart._ServerCapabilities, () => ({
    __proto__: dart.getMethods(mongo_dart._ServerCapabilities.__proto__),
    getParamsFromIstMaster: dart.fnType(dart.void, [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))])
  }));
  dart.setLibraryUri(mongo_dart._ServerCapabilities, I[9]);
  dart.setFieldSignature(mongo_dart._ServerCapabilities, () => ({
    __proto__: dart.getFields(mongo_dart._ServerCapabilities.__proto__),
    maxWireVersion: dart.fieldType(dart.legacy(core.int)),
    aggregationCursor: dart.fieldType(dart.legacy(core.bool)),
    writeCommands: dart.fieldType(dart.legacy(core.bool)),
    authCommands: dart.fieldType(dart.legacy(core.bool)),
    listCollections: dart.fieldType(dart.legacy(core.bool)),
    listIndexes: dart.fieldType(dart.legacy(core.bool)),
    maxNumberOfDocsInBatch: dart.fieldType(dart.legacy(core.int)),
    supportsOpMsg: dart.fieldType(dart.legacy(core.bool))
  }));
  var _pendingQueries = dart.privateName(mongo_dart, "_pendingQueries");
  var _repliesSubscription = dart.privateName(mongo_dart, "_repliesSubscription");
  var _closed = dart.privateName(mongo_dart, "_closed");
  var _manager$ = dart.privateName(mongo_dart, "_manager");
  var _replyCompleters = dart.privateName(mongo_dart, "_replyCompleters");
  var _sendQueue = dart.privateName(mongo_dart, "_sendQueue");
  var _receiveReply = dart.privateName(mongo_dart, "_receiveReply");
  var _closeSocketOnError = dart.privateName(mongo_dart, "_closeSocketOnError");
  var _sendBuffer = dart.privateName(mongo_dart, "_sendBuffer");
  var ConnectionException_message = dart.privateName(mongo_dart, "ConnectionException.message");
  mongo_dart._Connection = class _Connection extends core.Object {
    get [_replyCompleters]() {
      return this[_manager$].replyCompleters;
    }
    get [_sendQueue]() {
      return this[_manager$].sendQueue;
    }
    get repliesSubscription() {
      return this[_repliesSubscription];
    }
    connect() {
      return async.async(T.boolL(), (function* connect() {
        let _socket = null;
        try {
          if (dart.test(this.serverConfig.isSecure)) {
            _socket = (yield io.SecureSocket.connect(this.serverConfig.host, this.serverConfig.port));
          } else {
            _socket = (yield io.Socket.connect(this.serverConfig.host, this.serverConfig.port));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          this[_closed] = true;
          this.connected = false;
          let ex = new mongo_dart.ConnectionException.new("Could not connect to " + dart.str(this.serverConfig.hostUrl));
          dart.throw(ex);
        }
        _socket.done.catchError(dart.fn(error => this[_log].info("Socket error " + dart.str(error)), T.dynamicTovoid()));
        this.socket = _socket;
        this[_repliesSubscription] = this.socket.transform(T.MongoResponseMessageL(), new mongo_dart.MongoMessageHandler.new().transformer).listen(dart.bind(this, _receiveReply), {onError: dart.fn((e, st) => async.async(core.Null, (function*() {
            this[_log].severe("Socket error " + dart.str(e) + " " + dart.str(st));
            if (!dart.test(this[_closed])) {
              yield this[_closeSocketOnError]({socketError: e});
            }
          }).bind(this)), T.dynamicAnddynamicToFutureLOfNull()), cancelOnError: true, onDone: dart.fn(() => async.async(core.Null, (function*() {
            if (!dart.test(this[_closed])) {
              yield this[_closeSocketOnError]({socketError: mongo_dart.noSecureRequestError});
            }
          }).bind(this)), T.VoidToFutureLOfNull())});
        this.connected = true;
        return true;
      }).bind(this));
    }
    close() {
      let t11;
      this[_closed] = true;
      this.connected = false;
      t11 = this.socket;
      return t11 == null ? null : t11.close();
    }
    [_sendBuffer]() {
      this[_log].fine(dart.fn(() => "_sendBuffer " + dart.str(this[_sendQueue][$isNotEmpty]), T.VoidToStringL()));
      let message = T.JSArrayOfintL().of([]);
      while (dart.test(this[_sendQueue][$isNotEmpty])) {
        let mongoMessage = this[_sendQueue].removeFirst();
        message[$addAll](mongoMessage.serialize().byteList);
      }
      this.socket.add(message);
    }
    query(queryMessage) {
      let completer = T.CompleterOfMongoReplyMessageL().new();
      if (!dart.test(this[_closed])) {
        this[_replyCompleters][$_set](queryMessage.requestId, completer);
        this[_pendingQueries].add(queryMessage.requestId);
        this[_log].fine(dart.fn(() => "Query " + dart.str(queryMessage), T.VoidToStringL()));
        this[_sendQueue].addLast(queryMessage);
        this[_sendBuffer]();
      } else {
        completer.completeError(C[26] || CT.C26);
      }
      return completer.future;
    }
    execute(mongoMessage, runImmediately) {
      if (dart.test(this[_closed])) {
        dart.throw(C[26] || CT.C26);
      }
      this[_log].fine(dart.fn(() => "Execute " + dart.str(mongoMessage), T.VoidToStringL()));
      this[_sendQueue].addLast(mongoMessage);
      if (dart.test(runImmediately)) {
        this[_sendBuffer]();
      }
    }
    executeModernMessage(modernMessage) {
      let completer = T.CompleterOfMongoModernMessageL().new();
      if (!dart.test(this[_closed])) {
        this[_replyCompleters][$_set](modernMessage.requestId, T.CompleterLOfMongoResponseMessageL().as(completer));
        this[_pendingQueries].add(modernMessage.requestId);
        this[_log].fine(dart.fn(() => "Message " + dart.str(modernMessage), T.VoidToStringL()));
        this[_sendQueue].addLast(modernMessage);
        this[_sendBuffer]();
      } else {
        completer.completeError(C[26] || CT.C26);
      }
      return T.FutureLOfMongoModernMessageL().as(completer.future);
    }
    [_receiveReply](reply) {
      this[_log].fine(dart.fn(() => dart.toString(reply), T.VoidToStringL()));
      let completer = this[_replyCompleters][$remove](reply.responseTo);
      this[_pendingQueries].remove(reply.responseTo);
      if (completer != null) {
        this[_log].fine(dart.fn(() => "Completing " + dart.str(reply), T.VoidToStringL()));
        completer.complete(reply);
      } else {
        if (!dart.test(this[_closed])) {
          this[_log].info(dart.fn(() => "Unexpected respondTo: " + dart.str(reply.responseTo) + " " + dart.str(reply), T.VoidToStringL()));
        }
      }
    }
    [_closeSocketOnError](opts) {
      let socketError = opts && 'socketError' in opts ? opts.socketError : null;
      return async.async(dart.void, (function* _closeSocketOnError() {
        this[_closed] = true;
        this.connected = false;
        let ex = new mongo_dart.ConnectionException.new("connection closed" + (socketError == null ? "." : ": " + dart.str(socketError)));
        for (let id of this[_pendingQueries]) {
          let completer = this[_replyCompleters][$remove](id);
          completer.completeError(ex);
        }
        this[_pendingQueries].clear();
        if (dart.test(this.isMaster)) {
          yield this[_manager$].close();
        }
      }).bind(this));
    }
  };
  (mongo_dart._Connection.new = function(_manager, serverConfig = null) {
    this[_log] = logger.Logger.new("Connection");
    this.socket = null;
    this[_pendingQueries] = T.LinkedHashSetOfintL().new();
    this[_repliesSubscription] = null;
    this.connected = false;
    this[_closed] = false;
    this.isMaster = false;
    this.serverCapabilities = new mongo_dart._ServerCapabilities.new();
    this.serverStatus = new server_status.ServerStatus.new();
    this[_manager$] = _manager;
    this.serverConfig = serverConfig;
    this.serverConfig == null ? this.serverConfig = new mongo_dart.ServerConfig.new() : null;
  }).prototype = mongo_dart._Connection.prototype;
  dart.addTypeTests(mongo_dart._Connection);
  dart.addTypeCaches(mongo_dart._Connection);
  dart.setMethodSignature(mongo_dart._Connection, () => ({
    __proto__: dart.getMethods(mongo_dart._Connection.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    close: dart.fnType(dart.legacy(async.Future), []),
    [_sendBuffer]: dart.fnType(dart.void, []),
    query: dart.fnType(dart.legacy(async.Future$(dart.legacy(mongo_dart.MongoReplyMessage))), [dart.legacy(mongo_dart.MongoMessage)]),
    execute: dart.fnType(dart.void, [dart.legacy(mongo_dart.MongoMessage), dart.legacy(core.bool)]),
    executeModernMessage: dart.fnType(dart.legacy(async.Future$(dart.legacy(mongo_modern_message.MongoModernMessage))), [dart.legacy(mongo_modern_message.MongoModernMessage)]),
    [_receiveReply]: dart.fnType(dart.void, [dart.legacy(mongo_response_message.MongoResponseMessage)]),
    [_closeSocketOnError]: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {socketError: dart.dynamic}, {})
  }));
  dart.setGetterSignature(mongo_dart._Connection, () => ({
    __proto__: dart.getGetters(mongo_dart._Connection.__proto__),
    [_replyCompleters]: dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(async.Completer$(dart.legacy(mongo_response_message.MongoResponseMessage))))),
    [_sendQueue]: dart.legacy(collection.Queue$(dart.legacy(mongo_dart.MongoMessage))),
    repliesSubscription: dart.legacy(async.StreamSubscription$(dart.legacy(mongo_response_message.MongoResponseMessage)))
  }));
  dart.setLibraryUri(mongo_dart._Connection, I[9]);
  dart.setFieldSignature(mongo_dart._Connection, () => ({
    __proto__: dart.getFields(mongo_dart._Connection.__proto__),
    [_log]: dart.finalFieldType(dart.legacy(logger.Logger)),
    [_manager$]: dart.finalFieldType(dart.legacy(mongo_dart._ConnectionManager)),
    serverConfig: dart.fieldType(dart.legacy(mongo_dart.ServerConfig)),
    socket: dart.fieldType(dart.legacy(io.Socket)),
    [_pendingQueries]: dart.finalFieldType(dart.legacy(core.Set)),
    [_repliesSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(mongo_response_message.MongoResponseMessage)))),
    connected: dart.fieldType(dart.legacy(core.bool)),
    [_closed]: dart.fieldType(dart.legacy(core.bool)),
    isMaster: dart.fieldType(dart.legacy(core.bool)),
    serverCapabilities: dart.finalFieldType(dart.legacy(mongo_dart._ServerCapabilities)),
    serverStatus: dart.finalFieldType(dart.legacy(server_status.ServerStatus))
  }));
  const message$0 = ConnectionException_message;
  mongo_dart.ConnectionException = class ConnectionException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MongoDB ConnectionException: " + dart.str(this.message);
    }
  };
  (mongo_dart.ConnectionException.new = function(message = "") {
    this[message$0] = message;
    ;
  }).prototype = mongo_dart.ConnectionException.prototype;
  dart.addTypeTests(mongo_dart.ConnectionException);
  dart.addTypeCaches(mongo_dart.ConnectionException);
  mongo_dart.ConnectionException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mongo_dart.ConnectionException, () => ({
    __proto__: dart.getMethods(mongo_dart.ConnectionException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mongo_dart.ConnectionException, I[9]);
  dart.setFieldSignature(mongo_dart.ConnectionException, () => ({
    __proto__: dart.getFields(mongo_dart.ConnectionException.__proto__),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mongo_dart.ConnectionException, ['toString']);
  var _connectionPool = dart.privateName(mongo_dart, "_connectionPool");
  var _connect = dart.privateName(mongo_dart, "_connect");
  mongo_dart._ConnectionManager = class _ConnectionManager extends core.Object {
    get masterConnection() {
      return this[_masterConnection];
    }
    get masterConnectionVerified() {
      if (this[_masterConnection] != null && !dart.test(this[_masterConnection][_closed])) {
        return this[_masterConnection];
      } else {
        dart.throw(new mongo_dart.MongoDartError.new("No master connection"));
      }
    }
    [_connect](connection) {
      return async.async(dart.dynamic, (function* _connect() {
        yield connection.connect();
        let isMasterCommand = mongo_dart.DbCommand.createIsMasterCommand(this.db);
        let replyMessage = (yield connection.query(isMasterCommand));
        this[_log].fine(dart.fn(() => dart.toString(replyMessage.documents[$_get](0)), T.VoidToStringL()));
        let master = dart.equals(replyMessage.documents[$_get](0)[$_get]("ismaster"), true);
        connection.isMaster = master;
        if (master) {
          this[_masterConnection] = connection;
        }
        connection.serverCapabilities.getParamsFromIstMaster(replyMessage.documents[$_get](0));
        if (this.db[_authenticationScheme] == null) {
          if (dart.notNull(connection.serverCapabilities.maxWireVersion) >= 3) {
            this.db[_authenticationScheme] = mongo_dart.AuthenticationScheme.SCRAM_SHA_1;
          } else {
            this.db[_authenticationScheme] = mongo_dart.AuthenticationScheme.MONGODB_CR;
          }
        }
        if (connection.serverConfig.userName == null) {
          this[_log].fine(dart.fn(() => dart.str(this.db) + ": " + dart.str(connection.serverConfig.hostUrl) + " connected", T.VoidToStringL()));
        } else {
          try {
            yield this.db.authenticate(connection.serverConfig.userName, connection.serverConfig.password, {connection: connection});
            this[_log].fine(dart.fn(() => dart.str(this.db) + ": " + dart.str(connection.serverConfig.hostUrl) + " connected", T.VoidToStringL()));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (dart.equals(connection, this[_masterConnection])) {
              this[_masterConnection] = null;
            }
            yield connection.close();
            dart.rethrow(e$);
          }
        }
        return true;
      }).bind(this));
    }
    open(writeConcern) {
      return async.async(dart.void, (function* open() {
        let connectionErrors = [];
        for (let hostUrl of this[_connectionPool][$keys]) {
          let connection = this[_connectionPool][$_get](hostUrl);
          try {
            yield this[_connect](connection);
          } catch (e$) {
            let e = dart.getThrown(e$);
            connectionErrors[$add](e);
          }
        }
        if (dart.test(connectionErrors[$isNotEmpty])) {
          if (this[_masterConnection] == null) {
            for (let error of connectionErrors) {
              this[_log].severe(dart.str(error));
            }
            dart.throw(connectionErrors[$first]);
          } else {
            for (let error of connectionErrors) {
              this[_log].warning(dart.str(error));
            }
          }
        }
        this.db.state = mongo_dart.State.OPEN;
        this.db.masterConnection.serverStatus.processServerStatus(yield this.db.serverStatus());
      }).bind(this));
    }
    close() {
      return async.async(dart.dynamic, (function* close() {
        while (dart.test(this.sendQueue[$isNotEmpty])) {
          this.masterConnection[_sendBuffer]();
        }
        this.sendQueue.clear();
        this[_masterConnection] == null;
        for (let hostUrl of this[_connectionPool][$keys]) {
          let connection = this[_connectionPool][$_get](hostUrl);
          this[_log].fine(dart.fn(() => dart.str(this.db) + ": " + dart.str(connection.serverConfig.hostUrl) + " closed", T.VoidToStringL()));
          yield connection.close();
        }
        this.replyCompleters[$clear]();
      }).bind(this));
    }
    addConnection(serverConfig) {
      let connection = new mongo_dart._Connection.new(this, serverConfig);
      this[_connectionPool][$_set](serverConfig.hostUrl, connection);
    }
    removeConnection(connection) {
      connection.close();
      if (dart.test(connection.isMaster)) {
        this[_masterConnection] = null;
      }
      return this[_connectionPool][$remove](connection.serverConfig.hostUrl);
    }
  };
  (mongo_dart._ConnectionManager.new = function(db) {
    this[_log] = logger.Logger.new("ConnectionManager");
    this[_connectionPool] = new (T.IdentityMapOfStringL$_ConnectionL()).new();
    this.replyCompleters = new (T.IdentityMapOfintL$CompleterLOfMongoResponseMessageL()).new();
    this.sendQueue = new (T.ListQueueOfMongoMessageL()).new();
    this[_masterConnection] = null;
    this.db = db;
    ;
  }).prototype = mongo_dart._ConnectionManager.prototype;
  dart.addTypeTests(mongo_dart._ConnectionManager);
  dart.addTypeCaches(mongo_dart._ConnectionManager);
  dart.setMethodSignature(mongo_dart._ConnectionManager, () => ({
    __proto__: dart.getMethods(mongo_dart._ConnectionManager.__proto__),
    [_connect]: dart.fnType(dart.legacy(async.Future), [dart.legacy(mongo_dart._Connection)]),
    open: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(mongo_dart.WriteConcern)]),
    close: dart.fnType(dart.legacy(async.Future), []),
    addConnection: dart.fnType(dart.void, [dart.legacy(mongo_dart.ServerConfig)]),
    removeConnection: dart.fnType(dart.legacy(mongo_dart._Connection), [dart.legacy(mongo_dart._Connection)])
  }));
  dart.setGetterSignature(mongo_dart._ConnectionManager, () => ({
    __proto__: dart.getGetters(mongo_dart._ConnectionManager.__proto__),
    masterConnection: dart.legacy(mongo_dart._Connection),
    masterConnectionVerified: dart.legacy(mongo_dart._Connection)
  }));
  dart.setLibraryUri(mongo_dart._ConnectionManager, I[9]);
  dart.setFieldSignature(mongo_dart._ConnectionManager, () => ({
    __proto__: dart.getFields(mongo_dart._ConnectionManager.__proto__),
    [_log]: dart.finalFieldType(dart.legacy(logger.Logger)),
    db: dart.finalFieldType(dart.legacy(mongo_dart.Db)),
    [_connectionPool]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(mongo_dart._Connection)))),
    replyCompleters: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(async.Completer$(dart.legacy(mongo_response_message.MongoResponseMessage)))))),
    sendQueue: dart.finalFieldType(dart.legacy(collection.Queue$(dart.legacy(mongo_dart.MongoMessage)))),
    [_masterConnection]: dart.fieldType(dart.legacy(mongo_dart._Connection))
  }));
  var converter = dart.privateName(mongo_dart, "MongoMessageHandler.converter");
  mongo_dart.MongoMessageHandler = class MongoMessageHandler extends core.Object {
    get converter() {
      return this[converter];
    }
    set converter(value) {
      super.converter = value;
    }
    handleData(data, sink) {
      let t13;
      this.converter.addPacket(data);
      while (!dart.test(this.converter.messages.isEmpty)) {
        let buffer = new bson.BsonBinary.from(this.converter.messages.removeFirst());
        let opcodeFromWire = mongo_response_message.MongoResponseMessage.extractOpcode(buffer);
        let reply = null;
        if (opcodeFromWire == mongo_dart.MongoMessage.Reply) {
          reply = (t13 = new mongo_dart.MongoReplyMessage.new(), (() => {
            t13.deserialize(buffer);
            return t13;
          })());
        } else {
          reply = new mongo_modern_message.MongoModernMessage.fromBuffer(buffer);
        }
        this[_log].fine(dart.fn(() => dart.toString(reply), T.VoidToStringL()));
        sink.add(reply);
      }
    }
    handleDone(sink) {
      if (!dart.test(this.converter.isClear)) {
        this[_log].warning("Invalid state of PacketConverter in handleDone: " + dart.str(this.converter));
      }
      sink.close();
    }
    get transformer() {
      return new (T._StreamHandlerTransformerOfUint8ListL$MongoResponseMessageL()).new({handleData: dart.bind(this, 'handleData'), handleDone: dart.bind(this, 'handleDone')});
    }
  };
  (mongo_dart.MongoMessageHandler.new = function() {
    this[_log] = logger.Logger.new("MongoMessageTransformer");
    this[converter] = new mongo_dart.PacketConverter.new();
    ;
  }).prototype = mongo_dart.MongoMessageHandler.prototype;
  dart.addTypeTests(mongo_dart.MongoMessageHandler);
  dart.addTypeCaches(mongo_dart.MongoMessageHandler);
  dart.setMethodSignature(mongo_dart.MongoMessageHandler, () => ({
    __proto__: dart.getMethods(mongo_dart.MongoMessageHandler.__proto__),
    handleData: dart.fnType(dart.void, [dart.legacy(typed_data.Uint8List), dart.legacy(async.EventSink$(dart.legacy(mongo_response_message.MongoResponseMessage)))]),
    handleDone: dart.fnType(dart.void, [dart.legacy(async.EventSink$(dart.legacy(mongo_response_message.MongoResponseMessage)))])
  }));
  dart.setGetterSignature(mongo_dart.MongoMessageHandler, () => ({
    __proto__: dart.getGetters(mongo_dart.MongoMessageHandler.__proto__),
    transformer: dart.legacy(async.StreamTransformer$(dart.legacy(typed_data.Uint8List), dart.legacy(mongo_response_message.MongoResponseMessage)))
  }));
  dart.setLibraryUri(mongo_dart.MongoMessageHandler, I[9]);
  dart.setFieldSignature(mongo_dart.MongoMessageHandler, () => ({
    __proto__: dart.getFields(mongo_dart.MongoMessageHandler.__proto__),
    [_log]: dart.finalFieldType(dart.legacy(logger.Logger)),
    converter: dart.finalFieldType(dart.legacy(mongo_dart.PacketConverter))
  }));
  var packets = dart.privateName(mongo_dart, "PacketConverter.packets");
  var messages = dart.privateName(mongo_dart, "PacketConverter.messages");
  var MAX_DOC_SIZE = dart.privateName(mongo_dart, "PacketConverter.MAX_DOC_SIZE");
  var headerMode = dart.privateName(mongo_dart, "PacketConverter.headerMode");
  var bytesToRead = dart.privateName(mongo_dart, "PacketConverter.bytesToRead");
  var buffer = dart.privateName(mongo_dart, "PacketConverter.buffer");
  var readPos = dart.privateName(mongo_dart, "PacketConverter.readPos");
  var messageBuffer = dart.privateName(mongo_dart, "PacketConverter.messageBuffer");
  var messagesConverted = dart.privateName(mongo_dart, "PacketConverter.messagesConverted");
  var lengthBuffer = dart.privateName(mongo_dart, "PacketConverter.lengthBuffer");
  var _readPacketIntoBuffer = dart.privateName(mongo_dart, "_readPacketIntoBuffer");
  mongo_dart.PacketConverter = class PacketConverter extends core.Object {
    get packets() {
      return this[packets];
    }
    set packets(value) {
      super.packets = value;
    }
    get messages() {
      return this[messages];
    }
    set messages(value) {
      super.messages = value;
    }
    get MAX_DOC_SIZE() {
      return this[MAX_DOC_SIZE];
    }
    set MAX_DOC_SIZE(value) {
      super.MAX_DOC_SIZE = value;
    }
    get headerMode() {
      return this[headerMode];
    }
    set headerMode(value) {
      this[headerMode] = value;
    }
    get bytesToRead() {
      return this[bytesToRead];
    }
    set bytesToRead(value) {
      this[bytesToRead] = value;
    }
    get buffer() {
      return this[buffer];
    }
    set buffer(value) {
      this[buffer] = value;
    }
    get readPos() {
      return this[readPos];
    }
    set readPos(value) {
      this[readPos] = value;
    }
    get messageBuffer() {
      return this[messageBuffer];
    }
    set messageBuffer(value) {
      this[messageBuffer] = value;
    }
    get messagesConverted() {
      return this[messagesConverted];
    }
    set messagesConverted(value) {
      this[messagesConverted] = value;
    }
    get lengthBuffer() {
      return this[lengthBuffer];
    }
    set lengthBuffer(value) {
      super.lengthBuffer = value;
    }
    addPacket(packet) {
      this.packets.addLast(packet);
      this.handleHeaderAndBody();
    }
    handleHeaderAndBody() {
      let hasMoreData = true;
      while (hasMoreData) {
        hasMoreData = false;
        if (dart.test(this.headerMode)) {
          if (dart.notNull(this.bytesAvailable()) >= 4) {
            this.handleHeader();
          }
        }
        if (!dart.test(this.headerMode)) {
          if (dart.notNull(this.bytesAvailable()) >= dart.notNull(this.messageBuffer[$length]) - 4) {
            this.handleBody();
            if (dart.notNull(this.bytesAvailable()) >= 4) {
              hasMoreData = true;
            }
          }
        }
      }
    }
    handleHeader() {
      this.headerMode = false;
      this.lengthBuffer.rewind();
      this.readIntoBuffer(this.lengthBuffer.byteList, 0);
      let len = this.lengthBuffer.readInt32();
      if (dart.notNull(len) > dart.notNull(this.MAX_DOC_SIZE)) {
        dart.throw(new mongo_dart.MongoDartError.new("Message length " + dart.str(len) + " over maximum document size"));
      }
      this.messageBuffer = T.ListOfintL().new(len);
    }
    handleBody() {
      this.headerMode = true;
      this.messageBuffer[$setRange](0, 4, this.lengthBuffer.byteList);
      this.readIntoBuffer(this.messageBuffer, 4);
      this.messagesConverted = dart.notNull(this.messagesConverted) + 1;
      this.messages.addLast(this.messageBuffer);
    }
    bytesAvailable() {
      return this.packets.fold(T.intL(), -dart.notNull(this.readPos), dart.fn((value, element) => dart.notNull(value) + dart.notNull(element[$length]), T.intLAndListLOfintLTointL()));
    }
    readIntoBuffer(buffer, pos) {
      if (dart.notNull(buffer[$length]) - dart.notNull(pos) > dart.notNull(this.bytesAvailable())) {
        dart.throw(new mongo_dart.MongoDartError.new("Bad state. Read buffer too big"));
      }
      let writePos = pos;
      while (dart.notNull(writePos) < dart.notNull(buffer[$length])) {
        writePos = dart.notNull(writePos) + dart.notNull(this[_readPacketIntoBuffer](buffer, writePos));
      }
      if (dart.notNull(writePos) < dart.notNull(buffer[$length])) {
        dart.throw(new mongo_dart.MongoDartError.new("Bad state. Buffer was not written fully"));
      }
    }
    [_readPacketIntoBuffer](buffer, pos) {
      let bytesRead = math.min(T.intL(), dart.notNull(buffer[$length]) - dart.notNull(pos), dart.notNull(this.packets.first[$length]) - dart.notNull(this.readPos));
      buffer[$setRange](pos, dart.notNull(pos) + bytesRead, this.packets.first, this.readPos);
      if (dart.notNull(this.readPos) + bytesRead === this.packets.first[$length]) {
        this.readPos = 0;
        this.packets.removeFirst();
      } else {
        this.readPos = dart.notNull(this.readPos) + bytesRead;
      }
      return bytesRead;
    }
    toString() {
      return "PacketConverter(readPos: " + dart.str(this.readPos) + ", headerMode: " + dart.str(this.headerMode) + ", packets: " + dart.str(this.packets) + ")";
    }
    get isClear() {
      return dart.test(this.packets.isEmpty) && dart.test(this.messages.isEmpty) && dart.test(this.headerMode);
    }
  };
  (mongo_dart.PacketConverter.new = function() {
    this[_log] = logger.Logger.new("PacketConverter");
    this[packets] = new (T.ListQueueOfListLOfintL()).new();
    this[messages] = new (T.ListQueueOfListLOfintL()).new();
    this[MAX_DOC_SIZE] = 32 * 1024 * 1024;
    this[headerMode] = true;
    this[bytesToRead] = 4;
    this[buffer] = null;
    this[readPos] = 0;
    this[messageBuffer] = null;
    this[messagesConverted] = 0;
    this[lengthBuffer] = new bson.BsonBinary.new(4);
    ;
  }).prototype = mongo_dart.PacketConverter.prototype;
  dart.addTypeTests(mongo_dart.PacketConverter);
  dart.addTypeCaches(mongo_dart.PacketConverter);
  dart.setMethodSignature(mongo_dart.PacketConverter, () => ({
    __proto__: dart.getMethods(mongo_dart.PacketConverter.__proto__),
    addPacket: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int)))]),
    handleHeaderAndBody: dart.fnType(dart.void, []),
    handleHeader: dart.fnType(dart.void, []),
    handleBody: dart.fnType(dart.void, []),
    bytesAvailable: dart.fnType(dart.legacy(core.int), []),
    readIntoBuffer: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.int)]),
    [_readPacketIntoBuffer]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.int)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(mongo_dart.PacketConverter, () => ({
    __proto__: dart.getGetters(mongo_dart.PacketConverter.__proto__),
    isClear: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(mongo_dart.PacketConverter, I[9]);
  dart.setFieldSignature(mongo_dart.PacketConverter, () => ({
    __proto__: dart.getFields(mongo_dart.PacketConverter.__proto__),
    [_log]: dart.finalFieldType(dart.legacy(logger.Logger)),
    packets: dart.finalFieldType(dart.legacy(collection.ListQueue$(dart.legacy(core.List$(dart.legacy(core.int)))))),
    messages: dart.finalFieldType(dart.legacy(collection.ListQueue$(dart.legacy(core.List$(dart.legacy(core.int)))))),
    MAX_DOC_SIZE: dart.finalFieldType(dart.legacy(core.int)),
    headerMode: dart.fieldType(dart.legacy(core.bool)),
    bytesToRead: dart.fieldType(dart.legacy(core.int)),
    buffer: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    readPos: dart.fieldType(dart.legacy(core.int)),
    messageBuffer: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    messagesConverted: dart.fieldType(dart.legacy(core.int)),
    lengthBuffer: dart.finalFieldType(dart.legacy(bson.BsonBinary))
  }));
  dart.defineExtensionMethods(mongo_dart.PacketConverter, ['toString']);
  mongo_dart.createAuthenticator = function createAuthenticator(authenticationScheme, db, credentials) {
    switch (authenticationScheme) {
      case C[8] || CT.C8:
      {
        return new mongo_dart.MongoDbCRAuthenticator.new(db, credentials);
      }
      case C[9] || CT.C9:
      {
        return new mongo_dart.ScramSha1Authenticator.new(credentials, db);
      }
      default:
      {
        dart.throw(new mongo_dart.MongoDartError.new("Authenticator wasn't specified"));
      }
    }
  };
  mongo_dart.parsePayload = function parsePayload(payload) {
    let dict = new (T.IdentityMapOfStringL$StringL()).new();
    let parts = payload[$split](",");
    for (let i = 0; i < dart.notNull(parts[$length]); i = i + 1) {
      let key = parts[$_get](i)[$_get](0);
      let value = parts[$_get](i)[$substring](2);
      dict[$_set](key, value);
    }
    return dict;
  };
  mongo_dart._coerceUint8List = function _coerceUint8List(list) {
    return T.Uint8ListL().is(list) ? list : _native_typed_data.NativeUint8List.fromList(list);
  };
  dart.defineLazy(mongo_dart, {
    /*mongo_dart.noSecureRequestError*/get noSecureRequestError() {
      return "The socket connection has been reset by peer.\nPossible causes:\n- Trying to connect to an ssl/tls encrypted database without specifiyng\n  either the query parm tls=true or the secure=true parameter in db.open()\n- Others";
    }
  }, true);
  dart.trackLibraries("packages/mongo_dart/src/database/utils/split_hosts.dart", {
    "package:mongo_dart/src/database/utils/split_hosts.dart": split_hosts,
    "package:mongo_dart/src/database/utils/check_same_domain.dart": check_same_domain,
    "package:mongo_dart/src/database/utils/dns_lookup.dart": dns_lookup,
    "package:mongo_dart/src/database/operation/db_admin_command_operation.dart": db_admin_command_operation,
    "package:mongo_dart/src/database/operation/server_status_operation.dart": server_status_operation,
    "package:mongo_dart/src/database/operation/options/insert_one_options.dart": insert_one_options,
    "package:mongo_dart/src/database/operation/insert_one_operation.dart": insert_one_operation,
    "package:mongo_dart/src/database/operation/options/create_index_options.dart": create_index_options,
    "package:mongo_dart/src/database/operation/command_operation.dart": command_operation,
    "package:mongo_dart/src/database/operation/create_index_operation.dart": create_index_operation,
    "package:mongo_dart/src/database/operation/parameters/read_preference.dart": read_preference,
    "package:mongo_dart/src/database/message/mongo_response_message.dart": mongo_response_message,
    "package:mongo_dart/src/database/message/mongo_modern_message.dart": mongo_modern_message,
    "package:mongo_dart/src/database/message/additional/section.dart": section,
    "package:mongo_dart/mongo_dart.dart": mongo_dart
  }, {
    "package:mongo_dart/mongo_dart.dart": ["src/connection_pool.dart", "src/auth/auth.dart", "src/auth/sasl_authenticator.dart", "src/auth/scram_sha1_authenticator.dart", "src/auth/mongodb_cr_authenticator.dart", "src/database/cursor.dart", "src/database/db.dart", "src/database/dbcollection.dart", "src/database/dbcommand.dart", "src/database/error.dart", "src/database/mongo_getmore_message.dart", "src/database/mongo_insert_message.dart", "src/database/mongo_kill_cursors_message.dart", "src/database/mongo_message.dart", "src/database/mongo_query_message.dart", "src/database/mongo_remove_message.dart", "src/database/mongo_reply_message.dart", "src/database/mongo_update_message.dart", "src/database/server_config.dart", "src/database/state.dart", "src/gridfs/grid_file.dart", "src/gridfs/grid_in.dart", "src/gridfs/grid_out.dart", "src/gridfs/gridfs.dart", "src/gridfs/chunk_handler.dart", "src/network/connection.dart", "src/network/connection_manager.dart", "src/network/mongo_message_transformer.dart", "src/network/packet_converter.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["split_hosts.dart","check_same_domain.dart","dns_lookup.dart","../operation/db_admin_command_operation.dart","../operation/server_status_operation.dart","../operation/options/insert_one_options.dart","../operation/command_operation.dart","../operation/insert_one_operation.dart","../operation/options/create_index_options.dart","../operation/create_index_operation.dart","../operation/parameters/read_preference.dart","../mongo_message.dart","../message/mongo_response_message.dart","../message/mongo_modern_message.dart","../message/additional/section.dart","../../connection_pool.dart","../../auth/auth.dart","../../auth/sasl_authenticator.dart","../../auth/scram_sha1_authenticator.dart","../../auth/mongodb_cr_authenticator.dart","../cursor.dart","../db.dart","../dbcollection.dart","../mongo_query_message.dart","../dbcommand.dart","../error.dart","../mongo_getmore_message.dart","../mongo_insert_message.dart","../mongo_kill_cursors_message.dart","../mongo_remove_message.dart","../mongo_reply_message.dart","../mongo_update_message.dart","../server_config.dart","../state.dart","../../gridfs/grid_file.dart","../../gridfs/grid_in.dart","../../gridfs/grid_out.dart","../../gridfs/gridfs.dart","../../gridfs/chunk_handler.dart","../../network/connection.dart","../../network/connection_manager.dart","../../network/mongo_message_transformer.dart","../../network/packet_converter.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/mongo_dart/src/database/utils/split_hosts.dart.lib.js"}');
  // Exports:
  return {
    src__database__utils__split_hosts: split_hosts,
    src__database__utils__check_same_domain: check_same_domain,
    src__database__utils__dns_lookup: dns_lookup,
    src__database__operation__db_admin_command_operation: db_admin_command_operation,
    src__database__operation__server_status_operation: server_status_operation,
    src__database__operation__options__insert_one_options: insert_one_options,
    src__database__operation__insert_one_operation: insert_one_operation,
    src__database__operation__options__create_index_options: create_index_options,
    src__database__operation__command_operation: command_operation,
    src__database__operation__create_index_operation: create_index_operation,
    src__database__operation__parameters__read_preference: read_preference,
    src__database__message__mongo_response_message: mongo_response_message,
    src__database__message__mongo_modern_message: mongo_modern_message,
    src__database__message__additional__section: section,
    mongo_dart: mongo_dart
  };
}));

//# sourceMappingURL=split_hosts.dart.lib.js.map
