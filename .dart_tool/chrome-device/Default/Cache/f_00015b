define(['dart_sdk', 'packages/pointycastle/asn1/asn1_utils.dart', 'packages/pointycastle/asn1/asn1_encoding_rule.dart', 'packages/pointycastle/asn1/unsupported_asn1_encoding_rule_exception.dart', 'packages/pointycastle/asn1/object_identifiers.dart', 'packages/pointycastle/asn1/unsupported_object_identifier_exception.dart', 'packages/pointycastle/src/utils.dart', 'packages/pointycastle/asn1/unsupported_asn1_tag_exception.dart'], (function load__packages__pointycastle__asn1__primitives__asn1_utf8_string_dart(dart_sdk, packages__pointycastle__asn1__asn1_utils$46dart, packages__pointycastle__asn1__asn1_encoding_rule$46dart, packages__pointycastle__asn1__unsupported_asn1_encoding_rule_exception$46dart, packages__pointycastle__asn1__object_identifiers$46dart, packages__pointycastle__asn1__unsupported_object_identifier_exception$46dart, packages__pointycastle__src__utils$46dart, packages__pointycastle__asn1__unsupported_asn1_tag_exception$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const convert = dart_sdk.convert;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const asn1_utils = packages__pointycastle__asn1__asn1_utils$46dart.asn1__asn1_utils;
  const asn1_encoding_rule = packages__pointycastle__asn1__asn1_encoding_rule$46dart.asn1__asn1_encoding_rule;
  const unsupported_asn1_encoding_rule_exception = packages__pointycastle__asn1__unsupported_asn1_encoding_rule_exception$46dart.asn1__unsupported_asn1_encoding_rule_exception;
  const object_identifiers = packages__pointycastle__asn1__object_identifiers$46dart.asn1__object_identifiers;
  const unsupported_object_identifier_exception = packages__pointycastle__asn1__unsupported_object_identifier_exception$46dart.asn1__unsupported_object_identifier_exception;
  const utils = packages__pointycastle__src__utils$46dart.src__utils;
  const unsupported_asn1_tag_exception = packages__pointycastle__asn1__unsupported_asn1_tag_exception$46dart.asn1__unsupported_asn1_tag_exception;
  var asn1_utf8_string = Object.create(dart.library);
  var asn1_utc_time = Object.create(dart.library);
  var asn1_teletext_string = Object.create(dart.library);
  var asn1_set = Object.create(dart.library);
  var asn1_sequence = Object.create(dart.library);
  var asn1_printable_string = Object.create(dart.library);
  var asn1_octet_string = Object.create(dart.library);
  var asn1_object_identifier = Object.create(dart.library);
  var asn1_null = Object.create(dart.library);
  var asn1_integer = Object.create(dart.library);
  var asn1_ia5_string = Object.create(dart.library);
  var asn1_generalized_time = Object.create(dart.library);
  var asn1_boolean = Object.create(dart.library);
  var asn1_bit_string = Object.create(dart.library);
  var asn1_parser = Object.create(dart.library);
  var asn1_object = Object.create(dart.library);
  var $elementAt = dartx.elementAt;
  var $add = dartx.add;
  var $length = dartx.length;
  var $setRange = dartx.setRange;
  var $forEach = dartx.forEach;
  var $_get = dartx._get;
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $_set = dartx._set;
  var $toString = dartx.toString;
  var $substring = dartx.substring;
  var $padLeft = dartx.padLeft;
  var $addAll = dartx.addAll;
  var $join = dartx.join;
  var $truncate = dartx.truncate;
  var $rightShift = dartx['>>'];
  var $insert = dartx.insert;
  var $toUpperCase = dartx.toUpperCase;
  var $sublist = dartx.sublist;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ASN1ObjectL: () => (T.ASN1ObjectL = dart.constFn(dart.legacy(asn1_object.ASN1Object)))(),
    JSArrayOfASN1ObjectL: () => (T.JSArrayOfASN1ObjectL = dart.constFn(_interceptors.JSArray$(T.ASN1ObjectL())))(),
    ASN1UTF8StringL: () => (T.ASN1UTF8StringL = dart.constFn(dart.legacy(asn1_utf8_string.ASN1UTF8String)))(),
    ASN1ObjectLToNull: () => (T.ASN1ObjectLToNull = dart.constFn(dart.fnType(core.Null, [T.ASN1ObjectL()])))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    ASN1TeletextStringL: () => (T.ASN1TeletextStringL = dart.constFn(dart.legacy(asn1_teletext_string.ASN1TeletextString)))(),
    ASN1PrintableStringL: () => (T.ASN1PrintableStringL = dart.constFn(dart.legacy(asn1_printable_string.ASN1PrintableString)))(),
    ASN1OctetStringL: () => (T.ASN1OctetStringL = dart.constFn(dart.legacy(asn1_octet_string.ASN1OctetString)))(),
    intLToNull: () => (T.intLToNull = dart.constFn(dart.fnType(core.Null, [T.intL()])))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    ASN1IA5StringL: () => (T.ASN1IA5StringL = dart.constFn(dart.legacy(asn1_ia5_string.ASN1IA5String)))(),
    ASN1BitStringL: () => (T.ASN1BitStringL = dart.constFn(dart.legacy(asn1_bit_string.ASN1BitString)))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: asn1_encoding_rule.ASN1EncodingRule.prototype,
        [_name]: "ASN1EncodingRule.ENCODING_DER",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: asn1_encoding_rule.ASN1EncodingRule.prototype,
        [_name]: "ASN1EncodingRule.ENCODING_BER_LONG_LENGTH_FORM",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: asn1_encoding_rule.ASN1EncodingRule.prototype,
        [_name]: "ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH",
        index: 4
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: asn1_encoding_rule.ASN1EncodingRule.prototype,
        [_name]: "ASN1EncodingRule.ENCODING_BER_CONSTRUCTED",
        index: 2
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: asn1_encoding_rule.ASN1EncodingRule.prototype,
        [_name]: "ASN1EncodingRule.ENCODING_BER_PADDED",
        index: 3
      });
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "package:pointycastle/asn1/asn1_object.dart",
    "package:pointycastle/asn1/primitives/asn1_utf8_string.dart",
    "package:pointycastle/asn1/primitives/asn1_utc_time.dart",
    "package:pointycastle/asn1/primitives/asn1_teletext_string.dart",
    "package:pointycastle/asn1/primitives/asn1_set.dart",
    "package:pointycastle/asn1/primitives/asn1_sequence.dart",
    "package:pointycastle/asn1/primitives/asn1_printable_string.dart",
    "package:pointycastle/asn1/primitives/asn1_octet_string.dart",
    "file:///C:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/pointycastle-2.0.1/lib/asn1/primitives/asn1_object_identifier.dart",
    "package:pointycastle/asn1/primitives/asn1_object_identifier.dart",
    "package:pointycastle/asn1/primitives/asn1_null.dart",
    "package:pointycastle/asn1/primitives/asn1_integer.dart",
    "package:pointycastle/asn1/primitives/asn1_ia5_string.dart",
    "package:pointycastle/asn1/primitives/asn1_generalized_time.dart",
    "package:pointycastle/asn1/primitives/asn1_boolean.dart",
    "package:pointycastle/asn1/primitives/asn1_bit_string.dart",
    "package:pointycastle/asn1/asn1_parser.dart"
  ];
  var utf8StringValue$ = dart.privateName(asn1_utf8_string, "ASN1UTF8String.utf8StringValue");
  var elements$ = dart.privateName(asn1_utf8_string, "ASN1UTF8String.elements");
  var _name = dart.privateName(asn1_encoding_rule, "_name");
  var _childLength = dart.privateName(asn1_utf8_string, "_childLength");
  var tag$ = dart.privateName(asn1_object, "ASN1Object.tag");
  var encodedBytes$ = dart.privateName(asn1_object, "ASN1Object.encodedBytes");
  var valueBytes = dart.privateName(asn1_object, "ASN1Object.valueBytes");
  var valueStartPosition = dart.privateName(asn1_object, "ASN1Object.valueStartPosition");
  var valueByteLength = dart.privateName(asn1_object, "ASN1Object.valueByteLength");
  var isConstructed = dart.privateName(asn1_object, "ASN1Object.isConstructed");
  var dumpIndent = dart.privateName(asn1_object, "ASN1Object.dumpIndent");
  asn1_object.ASN1Object = class ASN1Object extends core.Object {
    get tag() {
      return this[tag$];
    }
    set tag(value) {
      this[tag$] = value;
    }
    get encodedBytes() {
      return this[encodedBytes$];
    }
    set encodedBytes(value) {
      this[encodedBytes$] = value;
    }
    get valueBytes() {
      return this[valueBytes];
    }
    set valueBytes(value) {
      this[valueBytes] = value;
    }
    get valueStartPosition() {
      return this[valueStartPosition];
    }
    set valueStartPosition(value) {
      this[valueStartPosition] = value;
    }
    get valueByteLength() {
      return this[valueByteLength];
    }
    set valueByteLength(value) {
      this[valueByteLength] = value;
    }
    get isConstructed() {
      return this[isConstructed];
    }
    set isConstructed(value) {
      this[isConstructed] = value;
    }
    get dumpIndent() {
      return this[dumpIndent];
    }
    set dumpIndent(value) {
      this[dumpIndent] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (this.encodedBytes == null) {
        let lengthAsBytes = null;
        this.valueByteLength == null ? this.valueByteLength = this.valueBytes[$length] : null;
        if (encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH) {
          lengthAsBytes = _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([128]));
        } else {
          lengthAsBytes = asn1_utils.ASN1Utils.encodeLength(this.valueByteLength, {longform: encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_LONG_LENGTH_FORM});
        }
        this.encodedBytes = _native_typed_data.NativeUint8List.new(1 + dart.notNull(lengthAsBytes[$length]) + dart.notNull(this.valueByteLength));
        this.encodedBytes[$_set](0, this.tag);
        this.encodedBytes[$setRange](1, 1 + dart.notNull(lengthAsBytes[$length]), lengthAsBytes, 0);
        this.encodedBytes[$setRange](1 + dart.notNull(lengthAsBytes[$length]), this.encodedBytes[$length], this.valueBytes, 0);
      }
      return this.encodedBytes;
    }
    get totalEncodedByteLength() {
      return dart.notNull(this.valueStartPosition) + dart.notNull(this.valueByteLength);
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      if (this.tag === 160 || this.tag === 163) {
        sb.write("[" + dart.str(this.tag) + "]");
        let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
        let next = parser.nextObject();
        let dump = next.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
        sb.write("\n" + dart.str(dump));
      }
      sb.write("UNKNOWN");
      return sb.toString();
    }
  };
  (asn1_object.ASN1Object.new = function(opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    this[valueBytes] = null;
    this[valueStartPosition] = 2;
    this[valueByteLength] = null;
    this[isConstructed] = null;
    this[dumpIndent] = 2;
    this[encodedBytes$] = null;
    this[tag$] = tag;
    if (this.tag != null) {
      this.isConstructed = asn1_utils.ASN1Utils.isConstructed(this.tag);
    }
  }).prototype = asn1_object.ASN1Object.prototype;
  (asn1_object.ASN1Object.fromBytes = function(encodedBytes) {
    this[valueBytes] = null;
    this[valueStartPosition] = 2;
    this[valueByteLength] = null;
    this[isConstructed] = null;
    this[dumpIndent] = 2;
    this[tag$] = null;
    this[encodedBytes$] = encodedBytes;
    this.tag = this.encodedBytes[$_get](0);
    this.isConstructed = asn1_utils.ASN1Utils.isConstructed(this.tag);
    this.valueByteLength = asn1_utils.ASN1Utils.decodeLength(this.encodedBytes);
    this.valueStartPosition = asn1_utils.ASN1Utils.calculateValueStartPosition(this.encodedBytes);
    if (this.valueByteLength === -1) {
      if (dart.test(asn1_utils.ASN1Utils.hasIndefiniteLengthEnding(this.encodedBytes))) {
        this.valueByteLength = dart.notNull(this.encodedBytes[$length]) - 4;
      }
    }
    this.valueBytes = typed_data.Uint8List.view(this.encodedBytes[$buffer], dart.notNull(this.valueStartPosition) + dart.notNull(this.encodedBytes[$offsetInBytes]), this.valueByteLength);
  }).prototype = asn1_object.ASN1Object.prototype;
  dart.addTypeTests(asn1_object.ASN1Object);
  dart.addTypeCaches(asn1_object.ASN1Object);
  dart.setMethodSignature(asn1_object.ASN1Object, () => ({
    __proto__: dart.getMethods(asn1_object.ASN1Object.__proto__),
    encode: dart.fnType(dart.legacy(typed_data.Uint8List), [], {encodingRule: dart.legacy(asn1_encoding_rule.ASN1EncodingRule)}, {}),
    dump: dart.fnType(dart.legacy(core.String), [], {spaces: dart.legacy(core.int)}, {})
  }));
  dart.setGetterSignature(asn1_object.ASN1Object, () => ({
    __proto__: dart.getGetters(asn1_object.ASN1Object.__proto__),
    totalEncodedByteLength: dart.legacy(core.int)
  }));
  dart.setLibraryUri(asn1_object.ASN1Object, I[0]);
  dart.setFieldSignature(asn1_object.ASN1Object, () => ({
    __proto__: dart.getFields(asn1_object.ASN1Object.__proto__),
    tag: dart.fieldType(dart.legacy(core.int)),
    encodedBytes: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    valueBytes: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    valueStartPosition: dart.fieldType(dart.legacy(core.int)),
    valueByteLength: dart.fieldType(dart.legacy(core.int)),
    isConstructed: dart.fieldType(dart.legacy(core.bool)),
    dumpIndent: dart.fieldType(dart.legacy(core.int))
  }));
  asn1_utf8_string.ASN1UTF8String = class ASN1UTF8String extends asn1_object.ASN1Object {
    get utf8StringValue() {
      return this[utf8StringValue$];
    }
    set utf8StringValue(value) {
      this[utf8StringValue$] = value;
    }
    get elements() {
      return this[elements$];
    }
    set elements(value) {
      this[elements$] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      switch (encodingRule) {
        case C[0] || CT.C0:
        case C[1] || CT.C1:
        {
          let octets = convert.utf8.encode(this.utf8StringValue);
          this.valueByteLength = octets[$length];
          this.valueBytes = _native_typed_data.NativeUint8List.fromList(octets);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          this.valueByteLength = 0;
          if (this.elements == null) {
            this.elements[$add](new asn1_utf8_string.ASN1UTF8String.new({utf8StringValue: this.utf8StringValue}));
          }
          this.valueByteLength = this[_childLength]({isIndefinite: encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH});
          this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
          let i = 0;
          this.elements[$forEach](dart.fn(obj => {
            let b = obj.encode();
            this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
            i = i + dart.notNull(b[$length]);
          }, T.ASN1ObjectLToNull()));
          break;
        }
        case C[4] || CT.C4:
        {
          dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
        }
      }
      return super.encode({encodingRule: encodingRule});
    }
    [_childLength](opts) {
      let isIndefinite = opts && 'isIndefinite' in opts ? opts.isIndefinite : false;
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      if (dart.test(isIndefinite)) {
        return l + 2;
      }
      return l;
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      if (dart.test(this.isConstructed)) {
        sb.write("UTF8String (" + dart.str(this.elements[$length]) + " elem)");
        for (let e of this.elements) {
          let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("\n" + dart.str(dump));
        }
      } else {
        sb.write("UTF8String " + dart.str(this.utf8StringValue));
      }
      return sb.toString();
    }
  };
  (asn1_utf8_string.ASN1UTF8String.new = function(opts) {
    let utf8StringValue = opts && 'utf8StringValue' in opts ? opts.utf8StringValue : null;
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 12;
    this[utf8StringValue$] = utf8StringValue;
    this[elements$] = elements;
    asn1_utf8_string.ASN1UTF8String.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_utf8_string.ASN1UTF8String.prototype;
  (asn1_utf8_string.ASN1UTF8String.fromBytes = function(encodedBytes) {
    this[elements$] = null;
    this[utf8StringValue$] = null;
    asn1_utf8_string.ASN1UTF8String.__proto__.fromBytes.call(this, encodedBytes);
    if (dart.test(asn1_utils.ASN1Utils.isConstructed(encodedBytes[$elementAt](0)))) {
      this.elements = T.JSArrayOfASN1ObjectL().of([]);
      let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
      let sb = new core.StringBuffer.new();
      while (dart.test(parser.hasNext())) {
        let utf8String = T.ASN1UTF8StringL().as(parser.nextObject());
        sb.write(utf8String.utf8StringValue);
        this.elements[$add](utf8String);
      }
      this.utf8StringValue = sb.toString();
    } else {
      this.utf8StringValue = convert.utf8.decode(this.valueBytes);
    }
  }).prototype = asn1_utf8_string.ASN1UTF8String.prototype;
  dart.addTypeTests(asn1_utf8_string.ASN1UTF8String);
  dart.addTypeCaches(asn1_utf8_string.ASN1UTF8String);
  dart.setMethodSignature(asn1_utf8_string.ASN1UTF8String, () => ({
    __proto__: dart.getMethods(asn1_utf8_string.ASN1UTF8String.__proto__),
    [_childLength]: dart.fnType(dart.legacy(core.int), [], {isIndefinite: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(asn1_utf8_string.ASN1UTF8String, I[1]);
  dart.setFieldSignature(asn1_utf8_string.ASN1UTF8String, () => ({
    __proto__: dart.getFields(asn1_utf8_string.ASN1UTF8String.__proto__),
    utf8StringValue: dart.fieldType(dart.legacy(core.String)),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var time$ = dart.privateName(asn1_utc_time, "ASN1UtcTime.time");
  var _format = dart.privateName(asn1_utc_time, "_format");
  asn1_utc_time.ASN1UtcTime = class ASN1UtcTime extends asn1_object.ASN1Object {
    get time() {
      return this[time$];
    }
    set time(value) {
      this[time$] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (encodingRule != asn1_encoding_rule.ASN1EncodingRule.ENCODING_DER) {
        dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
      }
      let utc = this.time.toUtc();
      let year = dart.toString(utc.year)[$substring](2)[$padLeft](2, "0");
      let month = dart.toString(utc.month)[$padLeft](2, "0");
      let day = dart.toString(utc.day)[$padLeft](2, "0");
      let hour = dart.toString(utc.hour)[$padLeft](2, "0");
      let minute = dart.toString(utc.minute)[$padLeft](2, "0");
      let second = dart.toString(utc.second)[$padLeft](2, "0");
      let utcString = year + month + day + hour + minute + second + "Z";
      this.valueBytes = convert.ascii.encode(utcString);
      this.valueByteLength = this.valueBytes[$length];
      return super.encode();
    }
    [_format](stringValue) {
      let y2 = core.int.parse(stringValue[$substring](0, 2));
      if (dart.notNull(y2) > 75) {
        stringValue = "19" + dart.notNull(stringValue);
      } else {
        stringValue = "20" + dart.notNull(stringValue);
      }
      return stringValue[$substring](0, 8) + "T" + stringValue[$substring](8);
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("UTCTime " + dart.str(this.time.toIso8601String()));
      return sb.toString();
    }
  };
  (asn1_utc_time.ASN1UtcTime.new = function(time, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 23;
    this[time$] = time;
    asn1_utc_time.ASN1UtcTime.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_utc_time.ASN1UtcTime.prototype;
  (asn1_utc_time.ASN1UtcTime.fromBytes = function(encodedBytes) {
    this[time$] = null;
    asn1_utc_time.ASN1UtcTime.__proto__.fromBytes.call(this, encodedBytes);
    let stringValue = convert.ascii.decode(this.valueBytes);
    let formatedStringValue = this[_format](stringValue);
    this.time = core.DateTime.parse(formatedStringValue);
  }).prototype = asn1_utc_time.ASN1UtcTime.prototype;
  dart.addTypeTests(asn1_utc_time.ASN1UtcTime);
  dart.addTypeCaches(asn1_utc_time.ASN1UtcTime);
  dart.setMethodSignature(asn1_utc_time.ASN1UtcTime, () => ({
    __proto__: dart.getMethods(asn1_utc_time.ASN1UtcTime.__proto__),
    [_format]: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(asn1_utc_time.ASN1UtcTime, I[2]);
  dart.setFieldSignature(asn1_utc_time.ASN1UtcTime, () => ({
    __proto__: dart.getFields(asn1_utc_time.ASN1UtcTime.__proto__),
    time: dart.fieldType(dart.legacy(core.DateTime))
  }));
  var stringValue$ = dart.privateName(asn1_teletext_string, "ASN1TeletextString.stringValue");
  var elements$0 = dart.privateName(asn1_teletext_string, "ASN1TeletextString.elements");
  var _childLength$ = dart.privateName(asn1_teletext_string, "_childLength");
  asn1_teletext_string.ASN1TeletextString = class ASN1TeletextString extends asn1_object.ASN1Object {
    get stringValue() {
      return this[stringValue$];
    }
    set stringValue(value) {
      this[stringValue$] = value;
    }
    get elements() {
      return this[elements$0];
    }
    set elements(value) {
      this[elements$0] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      switch (encodingRule) {
        case C[0] || CT.C0:
        case C[1] || CT.C1:
        {
          let octets = convert.ascii.encode(this.stringValue);
          this.valueByteLength = octets[$length];
          this.valueBytes = _native_typed_data.NativeUint8List.fromList(octets);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          this.valueByteLength = 0;
          if (this.elements == null) {
            this.elements[$add](new asn1_teletext_string.ASN1TeletextString.new({stringValue: this.stringValue}));
          }
          this.valueByteLength = this[_childLength$]({isIndefinite: encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH});
          this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
          let i = 0;
          this.elements[$forEach](dart.fn(obj => {
            let b = obj.encode();
            this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
            i = i + dart.notNull(b[$length]);
          }, T.ASN1ObjectLToNull()));
          break;
        }
        case C[4] || CT.C4:
        {
          dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
        }
      }
      return super.encode({encodingRule: encodingRule});
    }
    [_childLength$](opts) {
      let isIndefinite = opts && 'isIndefinite' in opts ? opts.isIndefinite : false;
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      if (dart.test(isIndefinite)) {
        return l + 2;
      }
      return l;
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      if (dart.test(this.isConstructed)) {
        sb.write("T61String (" + dart.str(this.elements[$length]) + " elem)");
        for (let e of this.elements) {
          let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("\n " + dart.str(dump));
        }
      } else {
        sb.write("T61String " + dart.str(this.stringValue));
      }
      return sb.toString();
    }
  };
  (asn1_teletext_string.ASN1TeletextString.new = function(opts) {
    let stringValue = opts && 'stringValue' in opts ? opts.stringValue : null;
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 20;
    this[stringValue$] = stringValue;
    this[elements$0] = elements;
    asn1_teletext_string.ASN1TeletextString.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_teletext_string.ASN1TeletextString.prototype;
  (asn1_teletext_string.ASN1TeletextString.fromBytes = function(encodedBytes) {
    this[elements$0] = null;
    this[stringValue$] = null;
    asn1_teletext_string.ASN1TeletextString.__proto__.fromBytes.call(this, encodedBytes);
    if (dart.test(asn1_utils.ASN1Utils.isConstructed(encodedBytes[$elementAt](0)))) {
      this.elements = T.JSArrayOfASN1ObjectL().of([]);
      let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
      let sb = new core.StringBuffer.new();
      while (dart.test(parser.hasNext())) {
        let printableString = T.ASN1TeletextStringL().as(parser.nextObject());
        sb.write(printableString.stringValue);
        this.elements[$add](printableString);
      }
      this.stringValue = sb.toString();
    } else {
      this.stringValue = convert.ascii.decode(this.valueBytes);
    }
  }).prototype = asn1_teletext_string.ASN1TeletextString.prototype;
  dart.addTypeTests(asn1_teletext_string.ASN1TeletextString);
  dart.addTypeCaches(asn1_teletext_string.ASN1TeletextString);
  dart.setMethodSignature(asn1_teletext_string.ASN1TeletextString, () => ({
    __proto__: dart.getMethods(asn1_teletext_string.ASN1TeletextString.__proto__),
    [_childLength$]: dart.fnType(dart.legacy(core.int), [], {isIndefinite: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(asn1_teletext_string.ASN1TeletextString, I[3]);
  dart.setFieldSignature(asn1_teletext_string.ASN1TeletextString, () => ({
    __proto__: dart.getFields(asn1_teletext_string.ASN1TeletextString.__proto__),
    stringValue: dart.fieldType(dart.legacy(core.String)),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var elements$1 = dart.privateName(asn1_set, "ASN1Set.elements");
  var _childLength$0 = dart.privateName(asn1_set, "_childLength");
  asn1_set.ASN1Set = class ASN1Set extends asn1_object.ASN1Object {
    get elements() {
      return this[elements$1];
    }
    set elements(value) {
      this[elements$1] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (encodingRule != asn1_encoding_rule.ASN1EncodingRule.ENCODING_DER) {
        dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
      }
      this.valueBytes = _native_typed_data.NativeUint8List.new(0);
      this.valueByteLength = 0;
      if (this.elements != null) {
        this.valueByteLength = this[_childLength$0]();
        this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
        let i = 0;
        this.elements[$forEach](dart.fn(obj => {
          let b = obj.encode();
          this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
          i = i + dart.notNull(b[$length]);
        }, T.ASN1ObjectLToNull()));
      }
      return super.encode();
    }
    [_childLength$0]() {
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      return l;
    }
    add(obj) {
      this.elements == null ? this.elements = T.JSArrayOfASN1ObjectL().of([]) : null;
      this.elements[$add](obj);
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("SEQUENCE (" + dart.str(this.elements[$length]) + " elem)");
      for (let e of this.elements) {
        let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
        sb.write("\n" + dart.str(dump));
      }
      return sb.toString();
    }
  };
  (asn1_set.ASN1Set.new = function(opts) {
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 49;
    this[elements$1] = elements;
    asn1_set.ASN1Set.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_set.ASN1Set.prototype;
  (asn1_set.ASN1Set.fromBytes = function(encodedBytes) {
    this[elements$1] = null;
    asn1_set.ASN1Set.__proto__.fromBytes.call(this, encodedBytes);
    this.elements = T.JSArrayOfASN1ObjectL().of([]);
    let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
    while (dart.test(parser.hasNext())) {
      this.elements[$add](parser.nextObject());
    }
  }).prototype = asn1_set.ASN1Set.prototype;
  dart.addTypeTests(asn1_set.ASN1Set);
  dart.addTypeCaches(asn1_set.ASN1Set);
  dart.setMethodSignature(asn1_set.ASN1Set, () => ({
    __proto__: dart.getMethods(asn1_set.ASN1Set.__proto__),
    [_childLength$0]: dart.fnType(dart.legacy(core.int), []),
    add: dart.fnType(dart.void, [dart.legacy(asn1_object.ASN1Object)])
  }));
  dart.setLibraryUri(asn1_set.ASN1Set, I[4]);
  dart.setFieldSignature(asn1_set.ASN1Set, () => ({
    __proto__: dart.getFields(asn1_set.ASN1Set.__proto__),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var elements$2 = dart.privateName(asn1_sequence, "ASN1Sequence.elements");
  var _childLength$1 = dart.privateName(asn1_sequence, "_childLength");
  asn1_sequence.ASN1Sequence = class ASN1Sequence extends asn1_object.ASN1Object {
    get elements() {
      return this[elements$2];
    }
    set elements(value) {
      this[elements$2] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (encodingRule != asn1_encoding_rule.ASN1EncodingRule.ENCODING_DER) {
        dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
      }
      this.valueBytes = _native_typed_data.NativeUint8List.new(0);
      this.valueByteLength = 0;
      if (this.elements != null) {
        this.valueByteLength = this[_childLength$1]();
        this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
        let i = 0;
        this.elements[$forEach](dart.fn(obj => {
          let b = obj.encode();
          this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
          i = i + dart.notNull(b[$length]);
        }, T.ASN1ObjectLToNull()));
      }
      return super.encode();
    }
    [_childLength$1]() {
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      return l;
    }
    add(obj) {
      this.elements == null ? this.elements = T.JSArrayOfASN1ObjectL().of([]) : null;
      this.elements[$add](obj);
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("SEQUENCE (" + dart.str(this.elements[$length]) + " elem)");
      for (let e of this.elements) {
        let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
        sb.write("\n" + dart.str(dump));
      }
      return sb.toString();
    }
  };
  (asn1_sequence.ASN1Sequence.new = function(opts) {
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 48;
    this[elements$2] = T.JSArrayOfASN1ObjectL().of([]);
    this[elements$2] = elements;
    asn1_sequence.ASN1Sequence.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_sequence.ASN1Sequence.prototype;
  (asn1_sequence.ASN1Sequence.fromBytes = function(encodedBytes) {
    this[elements$2] = T.JSArrayOfASN1ObjectL().of([]);
    asn1_sequence.ASN1Sequence.__proto__.fromBytes.call(this, encodedBytes);
    this.elements = T.JSArrayOfASN1ObjectL().of([]);
    let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
    while (dart.test(parser.hasNext())) {
      this.elements[$add](parser.nextObject());
    }
  }).prototype = asn1_sequence.ASN1Sequence.prototype;
  dart.addTypeTests(asn1_sequence.ASN1Sequence);
  dart.addTypeCaches(asn1_sequence.ASN1Sequence);
  dart.setMethodSignature(asn1_sequence.ASN1Sequence, () => ({
    __proto__: dart.getMethods(asn1_sequence.ASN1Sequence.__proto__),
    [_childLength$1]: dart.fnType(dart.legacy(core.int), []),
    add: dart.fnType(dart.void, [dart.legacy(asn1_object.ASN1Object)])
  }));
  dart.setLibraryUri(asn1_sequence.ASN1Sequence, I[5]);
  dart.setFieldSignature(asn1_sequence.ASN1Sequence, () => ({
    __proto__: dart.getFields(asn1_sequence.ASN1Sequence.__proto__),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var stringValue$0 = dart.privateName(asn1_printable_string, "ASN1PrintableString.stringValue");
  var elements$3 = dart.privateName(asn1_printable_string, "ASN1PrintableString.elements");
  var _childLength$2 = dart.privateName(asn1_printable_string, "_childLength");
  asn1_printable_string.ASN1PrintableString = class ASN1PrintableString extends asn1_object.ASN1Object {
    get stringValue() {
      return this[stringValue$0];
    }
    set stringValue(value) {
      this[stringValue$0] = value;
    }
    get elements() {
      return this[elements$3];
    }
    set elements(value) {
      this[elements$3] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      switch (encodingRule) {
        case C[0] || CT.C0:
        case C[1] || CT.C1:
        {
          let octets = convert.ascii.encode(this.stringValue);
          this.valueByteLength = octets[$length];
          this.valueBytes = _native_typed_data.NativeUint8List.fromList(octets);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          this.valueByteLength = 0;
          if (this.elements == null) {
            this.elements[$add](new asn1_printable_string.ASN1PrintableString.new({stringValue: this.stringValue}));
          }
          this.valueByteLength = this[_childLength$2]({isIndefinite: encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH});
          this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
          let i = 0;
          this.elements[$forEach](dart.fn(obj => {
            let b = obj.encode();
            this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
            i = i + dart.notNull(b[$length]);
          }, T.ASN1ObjectLToNull()));
          break;
        }
        case C[4] || CT.C4:
        {
          dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
        }
      }
      return super.encode({encodingRule: encodingRule});
    }
    [_childLength$2](opts) {
      let isIndefinite = opts && 'isIndefinite' in opts ? opts.isIndefinite : false;
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      if (dart.test(isIndefinite)) {
        return l + 2;
      }
      return l;
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      if (dart.test(this.isConstructed)) {
        sb.write("PrintableString (" + dart.str(this.elements[$length]) + " elem)");
        for (let e of this.elements) {
          let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("\n" + dart.str(dump));
        }
      } else {
        sb.write("PrintableString " + dart.str(this.stringValue));
      }
      return sb.toString();
    }
  };
  (asn1_printable_string.ASN1PrintableString.new = function(opts) {
    let stringValue = opts && 'stringValue' in opts ? opts.stringValue : null;
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 19;
    this[stringValue$0] = stringValue;
    this[elements$3] = elements;
    asn1_printable_string.ASN1PrintableString.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_printable_string.ASN1PrintableString.prototype;
  (asn1_printable_string.ASN1PrintableString.fromBytes = function(encodedBytes) {
    this[elements$3] = null;
    this[stringValue$0] = null;
    asn1_printable_string.ASN1PrintableString.__proto__.fromBytes.call(this, encodedBytes);
    if (dart.test(asn1_utils.ASN1Utils.isConstructed(encodedBytes[$elementAt](0)))) {
      this.elements = T.JSArrayOfASN1ObjectL().of([]);
      let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
      let sb = new core.StringBuffer.new();
      while (dart.test(parser.hasNext())) {
        let printableString = T.ASN1PrintableStringL().as(parser.nextObject());
        sb.write(printableString.stringValue);
        this.elements[$add](printableString);
      }
      this.stringValue = sb.toString();
    } else {
      this.stringValue = convert.ascii.decode(this.valueBytes);
    }
  }).prototype = asn1_printable_string.ASN1PrintableString.prototype;
  dart.addTypeTests(asn1_printable_string.ASN1PrintableString);
  dart.addTypeCaches(asn1_printable_string.ASN1PrintableString);
  dart.setMethodSignature(asn1_printable_string.ASN1PrintableString, () => ({
    __proto__: dart.getMethods(asn1_printable_string.ASN1PrintableString.__proto__),
    [_childLength$2]: dart.fnType(dart.legacy(core.int), [], {isIndefinite: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(asn1_printable_string.ASN1PrintableString, I[6]);
  dart.setFieldSignature(asn1_printable_string.ASN1PrintableString, () => ({
    __proto__: dart.getFields(asn1_printable_string.ASN1PrintableString.__proto__),
    stringValue: dart.fieldType(dart.legacy(core.String)),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var octets$ = dart.privateName(asn1_octet_string, "ASN1OctetString.octets");
  var elements$4 = dart.privateName(asn1_octet_string, "ASN1OctetString.elements");
  var _childLength$3 = dart.privateName(asn1_octet_string, "_childLength");
  asn1_octet_string.ASN1OctetString = class ASN1OctetString extends asn1_object.ASN1Object {
    get octets() {
      return this[octets$];
    }
    set octets(value) {
      this[octets$] = value;
    }
    get elements() {
      return this[elements$4];
    }
    set elements(value) {
      this[elements$4] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      switch (encodingRule) {
        case C[0] || CT.C0:
        case C[1] || CT.C1:
        {
          this.valueByteLength = this.octets[$length];
          this.valueBytes = this.octets;
          break;
        }
        case C[3] || CT.C3:
        case C[2] || CT.C2:
        {
          this.valueByteLength = 0;
          if (this.elements == null) {
            this.elements[$add](new asn1_octet_string.ASN1OctetString.new({octets: this.octets}));
          }
          this.valueByteLength = this[_childLength$3]({isIndefinite: encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH});
          this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
          let i = 0;
          this.elements[$forEach](dart.fn(obj => {
            let b = obj.encode();
            this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
            i = i + dart.notNull(b[$length]);
          }, T.ASN1ObjectLToNull()));
          break;
          break;
        }
        case C[4] || CT.C4:
        {
          dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
        }
      }
      return super.encode({encodingRule: encodingRule});
    }
    [_childLength$3](opts) {
      let isIndefinite = opts && 'isIndefinite' in opts ? opts.isIndefinite : false;
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      if (dart.test(isIndefinite)) {
        return l + 2;
      }
      return l;
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      if (dart.test(this.isConstructed)) {
        sb.write("OCTET STRING (" + dart.str(this.elements[$length]) + " elem)");
        for (let e of this.elements) {
          let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("\n " + dart.str(dump));
        }
      } else {
        if (dart.test(asn1_utils.ASN1Utils.isASN1Tag(this.octets[$elementAt](0)))) {
          let parser = new asn1_parser.ASN1Parser.new(this.octets);
          let next = parser.nextObject();
          let dump = next.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("OCTET STRING\n" + dart.str(dump));
        } else {
          sb.write("OCTET STRING " + dart.str(convert.ascii.decode(this.octets, {allowInvalid: true})));
        }
      }
      return sb.toString();
    }
  };
  (asn1_octet_string.ASN1OctetString.new = function(opts) {
    let octets = opts && 'octets' in opts ? opts.octets : null;
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 4;
    this[octets$] = octets;
    this[elements$4] = elements;
    asn1_octet_string.ASN1OctetString.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_octet_string.ASN1OctetString.prototype;
  (asn1_octet_string.ASN1OctetString.fromBytes = function(encodedBytes) {
    this[elements$4] = null;
    this[octets$] = null;
    asn1_octet_string.ASN1OctetString.__proto__.fromBytes.call(this, encodedBytes);
    if (dart.test(asn1_utils.ASN1Utils.isConstructed(encodedBytes[$elementAt](0)))) {
      this.elements = T.JSArrayOfASN1ObjectL().of([]);
      let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
      let bytes = T.JSArrayOfintL().of([]);
      while (dart.test(parser.hasNext())) {
        let octetString = T.ASN1OctetStringL().as(parser.nextObject());
        bytes[$addAll](octetString.octets);
        this.elements[$add](octetString);
      }
      this.octets = _native_typed_data.NativeUint8List.fromList(bytes);
    } else {
      this.octets = this.valueBytes;
    }
  }).prototype = asn1_octet_string.ASN1OctetString.prototype;
  dart.addTypeTests(asn1_octet_string.ASN1OctetString);
  dart.addTypeCaches(asn1_octet_string.ASN1OctetString);
  dart.setMethodSignature(asn1_octet_string.ASN1OctetString, () => ({
    __proto__: dart.getMethods(asn1_octet_string.ASN1OctetString.__proto__),
    [_childLength$3]: dart.fnType(dart.legacy(core.int), [], {isIndefinite: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(asn1_octet_string.ASN1OctetString, I[7]);
  dart.setFieldSignature(asn1_octet_string.ASN1OctetString, () => ({
    __proto__: dart.getFields(asn1_octet_string.ASN1OctetString.__proto__),
    octets: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var objectIdentifier$ = dart.privateName(asn1_object_identifier, "ASN1ObjectIdentifier.objectIdentifier");
  var objectIdentifierAsString$ = dart.privateName(asn1_object_identifier, "ASN1ObjectIdentifier.objectIdentifierAsString");
  var readableName = dart.privateName(asn1_object_identifier, "ASN1ObjectIdentifier.readableName");
  asn1_object_identifier.ASN1ObjectIdentifier = class ASN1ObjectIdentifier extends asn1_object.ASN1Object {
    get objectIdentifier() {
      return this[objectIdentifier$];
    }
    set objectIdentifier(value) {
      this[objectIdentifier$] = value;
    }
    get objectIdentifierAsString() {
      return this[objectIdentifierAsString$];
    }
    set objectIdentifierAsString(value) {
      this[objectIdentifierAsString$] = value;
    }
    get readableName() {
      return this[readableName];
    }
    set readableName(value) {
      this[readableName] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (encodingRule != asn1_encoding_rule.ASN1EncodingRule.ENCODING_DER) {
        dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
      }
      let oi = T.JSArrayOfintL().of([]);
      oi[$add](dart.notNull(this.objectIdentifier[$_get](0)) * 40 + dart.notNull(this.objectIdentifier[$_get](1)));
      for (let ci = 2; ci < dart.notNull(this.objectIdentifier[$length]); ci = ci + 1) {
        let position = oi[$length];
        let v = this.objectIdentifier[$_get](ci);
        if (!(dart.notNull(v) > 0)) dart.assertFailed(null, I[8], 153, 14, "v > 0");
        let first = true;
        do {
          let remainder = dart.notNull(v) & 127;
          v = v[$rightShift](7);
          if (first) {
            first = false;
          } else {
            remainder = (remainder | 128) >>> 0;
          }
          oi[$insert](position, remainder);
        } while (dart.notNull(v) > 0);
      }
      this.valueBytes = _native_typed_data.NativeUint8List.fromList(oi);
      this.valueByteLength = oi[$length];
      return super.encode();
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("OBJECT IDENTIFIER " + dart.str(this.objectIdentifierAsString) + " " + dart.str(this.readableName));
      return sb.toString();
    }
  };
  (asn1_object_identifier.ASN1ObjectIdentifier.new = function(objectIdentifier, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 6;
    this[readableName] = null;
    this[objectIdentifierAsString$] = null;
    this[objectIdentifier$] = objectIdentifier;
    asn1_object_identifier.ASN1ObjectIdentifier.__proto__.new.call(this, {tag: tag});
    this.objectIdentifierAsString = this.objectIdentifier[$join](".");
  }).prototype = asn1_object_identifier.ASN1ObjectIdentifier.prototype;
  (asn1_object_identifier.ASN1ObjectIdentifier.fromBytes = function(encodedBytes) {
    this[readableName] = null;
    this[objectIdentifierAsString$] = null;
    this[objectIdentifier$] = null;
    asn1_object_identifier.ASN1ObjectIdentifier.__proto__.fromBytes.call(this, encodedBytes);
    let value = 0;
    let first = true;
    let bigValue = null;
    let list = T.JSArrayOfintL().of([]);
    let sb = new core.StringBuffer.new();
    this.valueBytes[$forEach](dart.fn(element => {
      let b = dart.notNull(element) & 255;
      if (value < 36028797018963968) {
        value = value * 128 + (b & 127);
        if ((b & 128) === 0) {
          if (first) {
            let truncated = (value / 40)[$truncate]();
            if (truncated < 2) {
              list[$add](truncated);
              sb.write(truncated);
              value = value - truncated * 40;
            } else {
              list[$add](2);
              sb.write("2");
              value = value - 80;
            }
            first = false;
          }
          list[$add](value);
          sb.write("." + dart.str(value));
          value = 0;
        }
      } else {
        bigValue == null ? bigValue = core._BigIntImpl.from(value) : null;
        bigValue = bigValue['<<'](7);
        bigValue = bigValue['|'](core._BigIntImpl.from(b & 127));
        if ((b & 128) === 0) {
          sb.write("." + dart.str(bigValue));
          bigValue = null;
          value = 0;
        }
      }
    }, T.intLToNull()));
    this.objectIdentifierAsString = sb.toString();
    this.objectIdentifier = _native_typed_data.NativeUint8List.fromList(list);
    let identifier = object_identifiers.ObjectIdentifiers.getIdentifierByIdentifier(this.objectIdentifierAsString);
    if (identifier != null) {
      this.readableName = T.StringL().as(identifier[$_get]("readableName"));
    }
  }).prototype = asn1_object_identifier.ASN1ObjectIdentifier.prototype;
  (asn1_object_identifier.ASN1ObjectIdentifier.fromName = function(name) {
    this[readableName] = null;
    this[objectIdentifierAsString$] = null;
    this[objectIdentifier$] = null;
    asn1_object_identifier.ASN1ObjectIdentifier.__proto__.new.call(this);
    this.tag = 6;
    let identifier = object_identifiers.ObjectIdentifiers.getIdentifierByName(name);
    if (identifier == null) {
      dart.throw(new unsupported_object_identifier_exception.UnsupportedObjectIdentifierException.new(name));
    }
    this.objectIdentifierAsString = T.StringL().as(identifier[$_get]("identifierString"));
    this.readableName = T.StringL().as(identifier[$_get]("readableName"));
    this.objectIdentifier = T.ListLOfintL().as(identifier[$_get]("identifier"));
  }).prototype = asn1_object_identifier.ASN1ObjectIdentifier.prototype;
  (asn1_object_identifier.ASN1ObjectIdentifier.fromIdentifierString = function(objectIdentifierAsString, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 6;
    this[readableName] = null;
    this[objectIdentifier$] = null;
    this[objectIdentifierAsString$] = objectIdentifierAsString;
    asn1_object_identifier.ASN1ObjectIdentifier.__proto__.new.call(this, {tag: tag});
    let identifier = object_identifiers.ObjectIdentifiers.getIdentifierByIdentifier(this.objectIdentifierAsString);
    if (identifier == null) {
      dart.throw(new unsupported_object_identifier_exception.UnsupportedObjectIdentifierException.new(this.objectIdentifierAsString));
    }
    this.objectIdentifierAsString = T.StringL().as(identifier[$_get]("identifierString"));
    this.readableName = T.StringL().as(identifier[$_get]("readableName"));
    this.objectIdentifier = T.ListLOfintL().as(identifier[$_get]("identifier"));
  }).prototype = asn1_object_identifier.ASN1ObjectIdentifier.prototype;
  dart.addTypeTests(asn1_object_identifier.ASN1ObjectIdentifier);
  dart.addTypeCaches(asn1_object_identifier.ASN1ObjectIdentifier);
  dart.setLibraryUri(asn1_object_identifier.ASN1ObjectIdentifier, I[9]);
  dart.setFieldSignature(asn1_object_identifier.ASN1ObjectIdentifier, () => ({
    __proto__: dart.getFields(asn1_object_identifier.ASN1ObjectIdentifier.__proto__),
    objectIdentifier: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    objectIdentifierAsString: dart.fieldType(dart.legacy(core.String)),
    readableName: dart.fieldType(dart.legacy(core.String))
  }));
  asn1_null.ASN1Null = class ASN1Null extends asn1_object.ASN1Object {
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      switch (encodingRule) {
        case C[0] || CT.C0:
        {
          return _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([this.tag, 0]));
        }
        case C[1] || CT.C1:
        {
          return _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([this.tag, 129, 0]));
        }
        default:
        {
          dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
        }
      }
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("NULL");
      return sb.toString();
    }
  };
  (asn1_null.ASN1Null.new = function(opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 5;
    asn1_null.ASN1Null.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_null.ASN1Null.prototype;
  (asn1_null.ASN1Null.fromBytes = function(encodedBytes) {
    asn1_null.ASN1Null.__proto__.fromBytes.call(this, encodedBytes);
    ;
  }).prototype = asn1_null.ASN1Null.prototype;
  dart.addTypeTests(asn1_null.ASN1Null);
  dart.addTypeCaches(asn1_null.ASN1Null);
  dart.setLibraryUri(asn1_null.ASN1Null, I[10]);
  var integer$ = dart.privateName(asn1_integer, "ASN1Integer.integer");
  asn1_integer.ASN1Integer = class ASN1Integer extends asn1_object.ASN1Object {
    get integer() {
      return this[integer$];
    }
    set integer(value) {
      this[integer$] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (encodingRule != asn1_encoding_rule.ASN1EncodingRule.ENCODING_DER) {
        dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
      }
      if (this.integer.bitLength === 0) {
        if (dart.equals(this.integer, core._BigIntImpl.from(-1))) {
          this.valueBytes = _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([255]));
        } else {
          this.valueBytes = _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([0]));
        }
      } else {
        this.valueBytes = utils.encodeBigInt(this.integer);
      }
      this.valueByteLength = this.valueBytes[$length];
      return super.encode();
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("INTEGER " + dart.toString(this.integer)[$toUpperCase]());
      return sb.toString();
    }
  };
  (asn1_integer.ASN1Integer.new = function(integer, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 2;
    this[integer$] = integer;
    asn1_integer.ASN1Integer.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_integer.ASN1Integer.prototype;
  (asn1_integer.ASN1Integer.fromtInt = function(i, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 2;
    this[integer$] = null;
    asn1_integer.ASN1Integer.__proto__.new.call(this, {tag: tag});
    this.integer = core._BigIntImpl.from(i);
  }).prototype = asn1_integer.ASN1Integer.prototype;
  (asn1_integer.ASN1Integer.fromBytes = function(encodedBytes) {
    this[integer$] = null;
    asn1_integer.ASN1Integer.__proto__.fromBytes.call(this, encodedBytes);
    this.integer = utils.decodeBigInt(this.valueBytes);
  }).prototype = asn1_integer.ASN1Integer.prototype;
  dart.addTypeTests(asn1_integer.ASN1Integer);
  dart.addTypeCaches(asn1_integer.ASN1Integer);
  dart.setLibraryUri(asn1_integer.ASN1Integer, I[11]);
  dart.setFieldSignature(asn1_integer.ASN1Integer, () => ({
    __proto__: dart.getFields(asn1_integer.ASN1Integer.__proto__),
    integer: dart.fieldType(dart.legacy(core.BigInt))
  }));
  var stringValue$1 = dart.privateName(asn1_ia5_string, "ASN1IA5String.stringValue");
  var elements$5 = dart.privateName(asn1_ia5_string, "ASN1IA5String.elements");
  var _childLength$4 = dart.privateName(asn1_ia5_string, "_childLength");
  asn1_ia5_string.ASN1IA5String = class ASN1IA5String extends asn1_object.ASN1Object {
    get stringValue() {
      return this[stringValue$1];
    }
    set stringValue(value) {
      this[stringValue$1] = value;
    }
    get elements() {
      return this[elements$5];
    }
    set elements(value) {
      this[elements$5] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      switch (encodingRule) {
        case C[0] || CT.C0:
        case C[1] || CT.C1:
        {
          let octets = convert.ascii.encode(this.stringValue);
          this.valueByteLength = octets[$length];
          this.valueBytes = _native_typed_data.NativeUint8List.fromList(octets);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          this.valueByteLength = 0;
          if (this.elements == null) {
            this.elements[$add](new asn1_ia5_string.ASN1IA5String.new({stringValue: this.stringValue}));
          }
          this.valueByteLength = this[_childLength$4]({isIndefinite: encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH});
          this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
          let i = 0;
          this.elements[$forEach](dart.fn(obj => {
            let b = obj.encode();
            this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
            i = i + dart.notNull(b[$length]);
          }, T.ASN1ObjectLToNull()));
          break;
        }
        case C[4] || CT.C4:
        {
          dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
        }
      }
      return super.encode({encodingRule: encodingRule});
    }
    [_childLength$4](opts) {
      let isIndefinite = opts && 'isIndefinite' in opts ? opts.isIndefinite : false;
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      if (dart.test(isIndefinite)) {
        return l + 2;
      }
      return l;
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      if (dart.test(this.isConstructed)) {
        sb.write("IA5String (" + dart.str(this.elements[$length]) + " elem)");
        for (let e of this.elements) {
          let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("\n " + dart.str(dump));
        }
      } else {
        sb.write("IA5String " + dart.str(this.stringValue));
      }
      return sb.toString();
    }
  };
  (asn1_ia5_string.ASN1IA5String.new = function(opts) {
    let stringValue = opts && 'stringValue' in opts ? opts.stringValue : null;
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 22;
    this[stringValue$1] = stringValue;
    this[elements$5] = elements;
    asn1_ia5_string.ASN1IA5String.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_ia5_string.ASN1IA5String.prototype;
  (asn1_ia5_string.ASN1IA5String.fromBytes = function(encodedBytes) {
    this[elements$5] = null;
    this[stringValue$1] = null;
    asn1_ia5_string.ASN1IA5String.__proto__.fromBytes.call(this, encodedBytes);
    if (dart.test(asn1_utils.ASN1Utils.isConstructed(encodedBytes[$elementAt](0)))) {
      this.elements = T.JSArrayOfASN1ObjectL().of([]);
      let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
      let sb = new core.StringBuffer.new();
      while (dart.test(parser.hasNext())) {
        let ia5String = T.ASN1IA5StringL().as(parser.nextObject());
        sb.write(ia5String.stringValue);
        this.elements[$add](ia5String);
      }
      this.stringValue = sb.toString();
    } else {
      this.stringValue = convert.ascii.decode(this.valueBytes);
    }
  }).prototype = asn1_ia5_string.ASN1IA5String.prototype;
  dart.addTypeTests(asn1_ia5_string.ASN1IA5String);
  dart.addTypeCaches(asn1_ia5_string.ASN1IA5String);
  dart.setMethodSignature(asn1_ia5_string.ASN1IA5String, () => ({
    __proto__: dart.getMethods(asn1_ia5_string.ASN1IA5String.__proto__),
    [_childLength$4]: dart.fnType(dart.legacy(core.int), [], {isIndefinite: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(asn1_ia5_string.ASN1IA5String, I[12]);
  dart.setFieldSignature(asn1_ia5_string.ASN1IA5String, () => ({
    __proto__: dart.getFields(asn1_ia5_string.ASN1IA5String.__proto__),
    stringValue: dart.fieldType(dart.legacy(core.String)),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var dateTimeValue$ = dart.privateName(asn1_generalized_time, "ASN1GeneralizedTime.dateTimeValue");
  asn1_generalized_time.ASN1GeneralizedTime = class ASN1GeneralizedTime extends asn1_object.ASN1Object {
    get dateTimeValue() {
      return this[dateTimeValue$];
    }
    set dateTimeValue(value) {
      this[dateTimeValue$] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (encodingRule != asn1_encoding_rule.ASN1EncodingRule.ENCODING_DER) {
        dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
      }
      let utc = this.dateTimeValue.toUtc();
      let year = dart.toString(utc.year);
      let month = dart.toString(utc.month);
      let day = dart.toString(utc.day);
      let hour = dart.toString(utc.hour);
      let minute = dart.toString(utc.minute);
      let second = dart.toString(utc.second);
      let utcString = year + month + day + hour + minute + second + "Z";
      this.valueBytes = convert.ascii.encode(utcString);
      this.valueByteLength = this.valueBytes[$length];
      return super.encode();
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("UTCTime " + dart.str(this.dateTimeValue.toIso8601String()));
      return sb.toString();
    }
  };
  (asn1_generalized_time.ASN1GeneralizedTime.new = function(dateTimeValue, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 24;
    this[dateTimeValue$] = dateTimeValue;
    asn1_generalized_time.ASN1GeneralizedTime.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_generalized_time.ASN1GeneralizedTime.prototype;
  (asn1_generalized_time.ASN1GeneralizedTime.fromBytes = function(bytes) {
    this[dateTimeValue$] = null;
    asn1_generalized_time.ASN1GeneralizedTime.__proto__.fromBytes.call(this, bytes);
    let octets = this.valueBytes;
    let stringValue = convert.ascii.decode(octets);
    let year = stringValue[$substring](0, 4);
    let month = stringValue[$substring](4, 6);
    let day = stringValue[$substring](6, 8);
    let hour = stringValue[$substring](8, 10);
    let minute = stringValue[$substring](10, 12);
    let second = stringValue[$substring](12, 14);
    if (stringValue.length > 14) {
      let timeZone = stringValue[$substring](14, stringValue.length);
      this.dateTimeValue = core.DateTime.parse(year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second + timeZone);
    } else {
      this.dateTimeValue = core.DateTime.parse(year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second);
    }
  }).prototype = asn1_generalized_time.ASN1GeneralizedTime.prototype;
  dart.addTypeTests(asn1_generalized_time.ASN1GeneralizedTime);
  dart.addTypeCaches(asn1_generalized_time.ASN1GeneralizedTime);
  dart.setLibraryUri(asn1_generalized_time.ASN1GeneralizedTime, I[13]);
  dart.setFieldSignature(asn1_generalized_time.ASN1GeneralizedTime, () => ({
    __proto__: dart.getFields(asn1_generalized_time.ASN1GeneralizedTime.__proto__),
    dateTimeValue: dart.fieldType(dart.legacy(core.DateTime))
  }));
  var boolValue$ = dart.privateName(asn1_boolean, "ASN1Boolean.boolValue");
  asn1_boolean.ASN1Boolean = class ASN1Boolean extends asn1_object.ASN1Object {
    get boolValue() {
      return this[boolValue$];
    }
    set boolValue(value) {
      this[boolValue$] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      if (encodingRule != asn1_encoding_rule.ASN1EncodingRule.ENCODING_DER) {
        dart.throw(new unsupported_asn1_encoding_rule_exception.UnsupportedAsn1EncodingRuleException.new(encodingRule));
      }
      this.valueByteLength = 1;
      this.valueBytes = this.boolValue === true ? _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([255])) : _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([0]));
      return super.encode();
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      sb.write("Boolean " + dart.str(this.boolValue));
      return sb.toString();
    }
  };
  (asn1_boolean.ASN1Boolean.new = function(boolValue, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : 1;
    this[boolValue$] = boolValue;
    asn1_boolean.ASN1Boolean.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_boolean.ASN1Boolean.prototype;
  (asn1_boolean.ASN1Boolean.fromBytes = function(encodedBytes) {
    this[boolValue$] = null;
    asn1_boolean.ASN1Boolean.__proto__.fromBytes.call(this, encodedBytes);
    this.boolValue = this.valueBytes[$_get](0) === 255;
  }).prototype = asn1_boolean.ASN1Boolean.prototype;
  dart.addTypeTests(asn1_boolean.ASN1Boolean);
  dart.addTypeCaches(asn1_boolean.ASN1Boolean);
  dart.setLibraryUri(asn1_boolean.ASN1Boolean, I[14]);
  dart.setFieldSignature(asn1_boolean.ASN1Boolean, () => ({
    __proto__: dart.getFields(asn1_boolean.ASN1Boolean.__proto__),
    boolValue: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(asn1_boolean.ASN1Boolean, {
    /*asn1_boolean.ASN1Boolean.BOOLEAN_TRUE_VALUE*/get BOOLEAN_TRUE_VALUE() {
      return 255;
    },
    /*asn1_boolean.ASN1Boolean.BOOLEAN_FALSE_VALUE*/get BOOLEAN_FALSE_VALUE() {
      return 0;
    }
  }, true);
  var stringValues$ = dart.privateName(asn1_bit_string, "ASN1BitString.stringValues");
  var unusedbits = dart.privateName(asn1_bit_string, "ASN1BitString.unusedbits");
  var elements$6 = dart.privateName(asn1_bit_string, "ASN1BitString.elements");
  var _childLength$5 = dart.privateName(asn1_bit_string, "_childLength");
  asn1_bit_string.ASN1BitString = class ASN1BitString extends asn1_object.ASN1Object {
    get stringValues() {
      return this[stringValues$];
    }
    set stringValues(value) {
      this[stringValues$] = value;
    }
    get unusedbits() {
      return this[unusedbits];
    }
    set unusedbits(value) {
      this[unusedbits] = value;
    }
    get elements() {
      return this[elements$6];
    }
    set elements(value) {
      this[elements$6] = value;
    }
    encode(opts) {
      let encodingRule = opts && 'encodingRule' in opts ? opts.encodingRule : C[0] || CT.C0;
      switch (encodingRule) {
        case C[4] || CT.C4:
        case C[0] || CT.C0:
        case C[1] || CT.C1:
        {
          let b = T.JSArrayOfintL().of([]);
          if (this.unusedbits != null) {
            b[$add](this.unusedbits);
          } else {
            b[$add](0);
          }
          b[$addAll](this.stringValues);
          this.valueBytes = _native_typed_data.NativeUint8List.fromList(b);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          this.valueByteLength = 0;
          if (this.elements == null) {
            this.elements = T.JSArrayOfASN1ObjectL().of([]);
            this.elements[$add](new asn1_bit_string.ASN1BitString.new({stringValues: this.stringValues}));
          }
          this.valueByteLength = this[_childLength$5]({isIndefinite: encodingRule == asn1_encoding_rule.ASN1EncodingRule.ENCODING_BER_CONSTRUCTED_INDEFINITE_LENGTH});
          this.valueBytes = _native_typed_data.NativeUint8List.new(this.valueByteLength);
          let i = 0;
          this.elements[$forEach](dart.fn(obj => {
            let b = obj.encode();
            this.valueBytes[$setRange](i, i + dart.notNull(b[$length]), b);
            i = i + dart.notNull(b[$length]);
          }, T.ASN1ObjectLToNull()));
          break;
        }
      }
      return super.encode({encodingRule: encodingRule});
    }
    [_childLength$5](opts) {
      let isIndefinite = opts && 'isIndefinite' in opts ? opts.isIndefinite : false;
      let l = 0;
      this.elements[$forEach](dart.fn(obj => {
        l = l + dart.notNull(obj.encode()[$length]);
      }, T.ASN1ObjectLToNull()));
      if (dart.test(isIndefinite)) {
        return l + 2;
      }
      return l;
    }
    dump(opts) {
      let spaces = opts && 'spaces' in opts ? opts.spaces : 0;
      let sb = new core.StringBuffer.new();
      for (let i = 0; i < dart.notNull(spaces); i = i + 1) {
        sb.write(" ");
      }
      if (dart.test(this.isConstructed)) {
        sb.write("BIT STRING (" + dart.str(this.elements[$length]) + " elem)");
        for (let e of this.elements) {
          let dump = e.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("\n" + dart.str(dump));
        }
      } else {
        if (dart.test(asn1_utils.ASN1Utils.isASN1Tag(this.stringValues[$elementAt](0)))) {
          let parser = new asn1_parser.ASN1Parser.new(T.Uint8ListL().as(this.stringValues));
          let next = parser.nextObject();
          let dump = next.dump({spaces: dart.notNull(spaces) + dart.notNull(this.dumpIndent)});
          sb.write("BIT STRING\n" + dart.str(dump));
        } else {
          sb.write("BIT STRING " + dart.str(convert.ascii.decode(this.stringValues, {allowInvalid: true})));
        }
      }
      return sb.toString();
    }
  };
  (asn1_bit_string.ASN1BitString.new = function(opts) {
    let stringValues = opts && 'stringValues' in opts ? opts.stringValues : null;
    let elements = opts && 'elements' in opts ? opts.elements : null;
    let tag = opts && 'tag' in opts ? opts.tag : 3;
    this[unusedbits] = null;
    this[stringValues$] = stringValues;
    this[elements$6] = elements;
    asn1_bit_string.ASN1BitString.__proto__.new.call(this, {tag: tag});
    ;
  }).prototype = asn1_bit_string.ASN1BitString.prototype;
  (asn1_bit_string.ASN1BitString.fromBytes = function(bytes) {
    this[unusedbits] = null;
    this[elements$6] = null;
    this[stringValues$] = null;
    asn1_bit_string.ASN1BitString.__proto__.fromBytes.call(this, bytes);
    if (dart.test(asn1_utils.ASN1Utils.isConstructed(this.encodedBytes[$elementAt](0)))) {
      this.elements = T.JSArrayOfASN1ObjectL().of([]);
      let parser = new asn1_parser.ASN1Parser.new(this.valueBytes);
      this.stringValues = T.JSArrayOfintL().of([]);
      while (dart.test(parser.hasNext())) {
        let bitString = T.ASN1BitStringL().as(parser.nextObject());
        this.stringValues[$addAll](bitString.stringValues);
        this.elements[$add](bitString);
      }
    } else {
      this.unusedbits = this.valueBytes[$_get](0);
      this.stringValues = this.valueBytes[$sublist](1);
    }
  }).prototype = asn1_bit_string.ASN1BitString.prototype;
  dart.addTypeTests(asn1_bit_string.ASN1BitString);
  dart.addTypeCaches(asn1_bit_string.ASN1BitString);
  dart.setMethodSignature(asn1_bit_string.ASN1BitString, () => ({
    __proto__: dart.getMethods(asn1_bit_string.ASN1BitString.__proto__),
    [_childLength$5]: dart.fnType(dart.legacy(core.int), [], {isIndefinite: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(asn1_bit_string.ASN1BitString, I[15]);
  dart.setFieldSignature(asn1_bit_string.ASN1BitString, () => ({
    __proto__: dart.getFields(asn1_bit_string.ASN1BitString.__proto__),
    stringValues: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    unusedbits: dart.fieldType(dart.legacy(core.int)),
    elements: dart.fieldType(dart.legacy(core.List$(dart.legacy(asn1_object.ASN1Object))))
  }));
  var bytes$ = dart.privateName(asn1_parser, "ASN1Parser.bytes");
  var _position = dart.privateName(asn1_parser, "_position");
  var _createConstructed = dart.privateName(asn1_parser, "_createConstructed");
  var _createPrimitive = dart.privateName(asn1_parser, "_createPrimitive");
  asn1_parser.ASN1Parser = class ASN1Parser extends core.Object {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    hasNext() {
      return dart.notNull(this[_position]) < dart.notNull(this.bytes[$length]);
    }
    nextObject() {
      let tag = this.bytes[$_get](this[_position]);
      let length = asn1_utils.ASN1Utils.decodeLength(this.bytes[$sublist](this[_position]));
      let valueStartPosition = asn1_utils.ASN1Utils.calculateValueStartPosition(this.bytes[$sublist](this[_position]));
      if (dart.notNull(this[_position]) < dart.notNull(length) + dart.notNull(valueStartPosition)) {
        length = dart.notNull(length) + dart.notNull(valueStartPosition);
      } else {
        length = dart.notNull(this.bytes[$length]) - dart.notNull(this[_position]);
      }
      let offset = dart.notNull(this[_position]) + dart.notNull(this.bytes[$offsetInBytes]);
      let subBytes = typed_data.Uint8List.view(this.bytes[$buffer], offset, length);
      let isConstructed = asn1_utils.ASN1Utils.isConstructed(tag);
      let isPrimitive = (192 & dart.notNull(tag)) === 0;
      let obj = null;
      if (dart.test(isConstructed)) {
        obj = this[_createConstructed](tag, subBytes);
      } else if (isPrimitive) {
        obj = this[_createPrimitive](tag, subBytes);
      } else {
        obj = new asn1_object.ASN1Object.fromBytes(subBytes);
      }
      this[_position] = dart.notNull(this[_position]) + dart.notNull(obj.totalEncodedByteLength);
      return obj;
    }
    [_createConstructed](tag, bytes) {
      switch (tag) {
        case 48:
        {
          return new asn1_sequence.ASN1Sequence.fromBytes(bytes);
        }
        case 49:
        {
          return new asn1_set.ASN1Set.fromBytes(bytes);
        }
        case 54:
        {
          return new asn1_ia5_string.ASN1IA5String.fromBytes(bytes);
        }
        case 35:
        {
          return new asn1_bit_string.ASN1BitString.fromBytes(bytes);
        }
        case 36:
        {
          return new asn1_octet_string.ASN1OctetString.fromBytes(bytes);
        }
        case 51:
        {
          return new asn1_printable_string.ASN1PrintableString.fromBytes(bytes);
        }
        case 52:
        {
          return new asn1_teletext_string.ASN1TeletextString.fromBytes(bytes);
        }
        case 160:
        case 161:
        case 162:
        case 163:
        {
          return new asn1_object.ASN1Object.fromBytes(bytes);
        }
        default:
        {
          dart.throw(new unsupported_asn1_tag_exception.UnsupportedASN1TagException.new(tag));
        }
      }
    }
    [_createPrimitive](tag, bytes) {
      switch (tag) {
        case 4:
        {
          return new asn1_octet_string.ASN1OctetString.fromBytes(bytes);
        }
        case 12:
        {
          return new asn1_utf8_string.ASN1UTF8String.fromBytes(bytes);
        }
        case 22:
        {
          return new asn1_ia5_string.ASN1IA5String.fromBytes(bytes);
        }
        case 2:
        case 10:
        {
          return new asn1_integer.ASN1Integer.fromBytes(bytes);
        }
        case 1:
        {
          return new asn1_boolean.ASN1Boolean.fromBytes(bytes);
        }
        case 6:
        {
          return new asn1_object_identifier.ASN1ObjectIdentifier.fromBytes(bytes);
        }
        case 3:
        {
          return new asn1_bit_string.ASN1BitString.fromBytes(bytes);
        }
        case 5:
        {
          return new asn1_null.ASN1Null.fromBytes(bytes);
        }
        case 19:
        {
          return new asn1_printable_string.ASN1PrintableString.fromBytes(bytes);
        }
        case 23:
        {
          return new asn1_utc_time.ASN1UtcTime.fromBytes(bytes);
        }
        case 20:
        {
          return new asn1_teletext_string.ASN1TeletextString.fromBytes(bytes);
        }
        case 24:
        {
          return new asn1_generalized_time.ASN1GeneralizedTime.fromBytes(bytes);
        }
        default:
        {
          dart.throw(new unsupported_asn1_tag_exception.UnsupportedASN1TagException.new(tag));
        }
      }
    }
  };
  (asn1_parser.ASN1Parser.new = function(bytes) {
    this[_position] = 0;
    this[bytes$] = bytes;
    ;
  }).prototype = asn1_parser.ASN1Parser.prototype;
  dart.addTypeTests(asn1_parser.ASN1Parser);
  dart.addTypeCaches(asn1_parser.ASN1Parser);
  dart.setMethodSignature(asn1_parser.ASN1Parser, () => ({
    __proto__: dart.getMethods(asn1_parser.ASN1Parser.__proto__),
    hasNext: dart.fnType(dart.legacy(core.bool), []),
    nextObject: dart.fnType(dart.legacy(asn1_object.ASN1Object), []),
    [_createConstructed]: dart.fnType(dart.legacy(asn1_object.ASN1Object), [dart.legacy(core.int), dart.legacy(typed_data.Uint8List)]),
    [_createPrimitive]: dart.fnType(dart.legacy(asn1_object.ASN1Object), [dart.legacy(core.int), dart.legacy(typed_data.Uint8List)])
  }));
  dart.setLibraryUri(asn1_parser.ASN1Parser, I[16]);
  dart.setFieldSignature(asn1_parser.ASN1Parser, () => ({
    __proto__: dart.getFields(asn1_parser.ASN1Parser.__proto__),
    bytes: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    [_position]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.trackLibraries("packages/pointycastle/asn1/primitives/asn1_utf8_string.dart", {
    "package:pointycastle/asn1/primitives/asn1_utf8_string.dart": asn1_utf8_string,
    "package:pointycastle/asn1/primitives/asn1_utc_time.dart": asn1_utc_time,
    "package:pointycastle/asn1/primitives/asn1_teletext_string.dart": asn1_teletext_string,
    "package:pointycastle/asn1/primitives/asn1_set.dart": asn1_set,
    "package:pointycastle/asn1/primitives/asn1_sequence.dart": asn1_sequence,
    "package:pointycastle/asn1/primitives/asn1_printable_string.dart": asn1_printable_string,
    "package:pointycastle/asn1/primitives/asn1_octet_string.dart": asn1_octet_string,
    "package:pointycastle/asn1/primitives/asn1_object_identifier.dart": asn1_object_identifier,
    "package:pointycastle/asn1/primitives/asn1_null.dart": asn1_null,
    "package:pointycastle/asn1/primitives/asn1_integer.dart": asn1_integer,
    "package:pointycastle/asn1/primitives/asn1_ia5_string.dart": asn1_ia5_string,
    "package:pointycastle/asn1/primitives/asn1_generalized_time.dart": asn1_generalized_time,
    "package:pointycastle/asn1/primitives/asn1_boolean.dart": asn1_boolean,
    "package:pointycastle/asn1/primitives/asn1_bit_string.dart": asn1_bit_string,
    "package:pointycastle/asn1/asn1_parser.dart": asn1_parser,
    "package:pointycastle/asn1/asn1_object.dart": asn1_object
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../asn1_object.dart","asn1_utf8_string.dart","asn1_utc_time.dart","asn1_teletext_string.dart","asn1_set.dart","asn1_sequence.dart","asn1_printable_string.dart","asn1_octet_string.dart","asn1_object_identifier.dart","asn1_null.dart","asn1_integer.dart","asn1_ia5_string.dart","asn1_generalized_time.dart","asn1_boolean.dart","asn1_bit_string.dart","../asn1_parser.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/pointycastle/asn1/primitives/asn1_utf8_string.dart.lib.js"}');
  // Exports:
  return {
    asn1__primitives__asn1_utf8_string: asn1_utf8_string,
    asn1__primitives__asn1_utc_time: asn1_utc_time,
    asn1__primitives__asn1_teletext_string: asn1_teletext_string,
    asn1__primitives__asn1_set: asn1_set,
    asn1__primitives__asn1_sequence: asn1_sequence,
    asn1__primitives__asn1_printable_string: asn1_printable_string,
    asn1__primitives__asn1_octet_string: asn1_octet_string,
    asn1__primitives__asn1_object_identifier: asn1_object_identifier,
    asn1__primitives__asn1_null: asn1_null,
    asn1__primitives__asn1_integer: asn1_integer,
    asn1__primitives__asn1_ia5_string: asn1_ia5_string,
    asn1__primitives__asn1_generalized_time: asn1_generalized_time,
    asn1__primitives__asn1_boolean: asn1_boolean,
    asn1__primitives__asn1_bit_string: asn1_bit_string,
    asn1__asn1_parser: asn1_parser,
    asn1__asn1_object: asn1_object
  };
}));

//# sourceMappingURL=asn1_utf8_string.dart.lib.js.map
